###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     04/Nov/2013  13:20:02 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\st\stm32 foc firwmare libraries                       #
#                    v2.0\STM32_FOC_PMSM\src\stm32f10x_lcd.c                  #
#    Command line =  "D:\st\stm32 foc firwmare libraries                      #
#                    v2.0\STM32_FOC_PMSM\src\stm32f10x_lcd.c" -D              #
#                    VECT_TAB_FLASH -lCN "D:\st\stm32 foc firwmare libraries  #
#                    v2.0\STM32_FOC_PMSM\EWARM\Debug\List\" --diag_error      #
#                    Pe068,Pe069 -o "D:\st\stm32 foc firwmare libraries       #
#                    v2.0\STM32_FOC_PMSM\EWARM\Debug\Obj\" --debug            #
#                    --endian=little --cpu=Cortex-M3 --fpu=None               #
#                    --dlib_config D:\IAR\arm\INC\c\DLib_Config_Normal.h -I   #
#                    "D:\st\stm32 foc firwmare libraries                      #
#                    v2.0\STM32_FOC_PMSM\EWARM\..\" -I "D:\st\stm32 foc       #
#                    firwmare libraries v2.0\STM32_FOC_PMSM\EWARM\..\..\STM32 #
#                    F10XFWLIB\inc\" -I "D:\st\stm32 foc firwmare libraries   #
#                    v2.0\STM32_FOC_PMSM\EWARM\..\inc\" -Oh --use_c++_inline  #
#                    --require_prototypes                                     #
#    List file    =  D:\st\stm32 foc firwmare libraries                       #
#                    v2.0\STM32_FOC_PMSM\EWARM\Debug\List\stm32f10x_lcd.lst   #
#    Object file  =  D:\st\stm32 foc firwmare libraries                       #
#                    v2.0\STM32_FOC_PMSM\EWARM\Debug\Obj\stm32f10x_lcd.o      #
#                                                                             #
#                                                                             #
###############################################################################

D:\st\stm32 foc firwmare libraries v2.0\STM32_FOC_PMSM\src\stm32f10x_lcd.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : stm32f10x_lcd.c
      3          * Author             : MCD Application Team & IMS Systems Lab
      4          * Date First Issued  : 21/11/07
      5          * Description        : This file includes the LCD driver for AM-240320LTNQW00H 
      6          *                      (LCD_HX8312) and AM-240320L8TNQW00H (LCD_ILI9320) 
      7          *                      Liquid Crystal Display Module of STM3210B-EVAL board.
      8          ********************************************************************************
      9          * History:
     10          * 21/11/07 v1.0
     11          * 29/05/08 v2.0
     12          ********************************************************************************
     13          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     15          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     16          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     17          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     18          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19          *
     20          * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     21          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     22          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     23          *******************************************************************************/
     24          
     25          /* Includes ------------------------------------------------------------------*/
     26          #include "stm32f10x_lcd.h"
     27          #include "stm32f10x_Timebase.h"
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* Private define ------------------------------------------------------------*/
     31          #define LCD_ILI9320  0x9320
     32          #define LCD_HX8312   0x8312
     33          
     34          #define START_BYTE  0x70
     35          #define SET_INDEX   0x00
     36          #define READ_STATUS 0x01
     37          #define WRITE_REG   0x02
     38          #define READ_REG    0x03
     39               
     40               /* ASCII Table: each character is 16 column (16dots large) 
     41                  and 24 raw (24 dots high) */

   \                                 In section .text, align 4, keep-with-next
     42               uc16 ASCII_Table[] =
   \                     ASCII_Table:
   \   00000000   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000002C   0x0000 0x0000      DC16 0, 0, 0, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0000 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \   00000048   0x0180 0x0180      DC16 384, 384, 0, 0, 384, 384, 0, 0, 0, 0, 0, 0, 0, 0, 204, 204, 204
   \              0x0000 0x0000
   \              0x0180 0x0180
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00CC 0x00CC
   \              0x00CC       
   \   0000006A   0x00CC 0x00CC      DC16 204, 204, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00CC 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000092   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 3168, 3168, 3168, 1584, 1584, 8190, 8190, 1584
   \              0x0000 0x0000
   \              0x0000 0x0C60
   \              0x0C60 0x0C60
   \              0x0630 0x0630
   \              0x1FFE 0x1FFE
   \              0x0630       
   \   000000AC   0x0738 0x0318      DC16 1848, 792, 8190, 8190, 792, 792, 396, 396, 396, 0, 0, 128, 992
   \              0x1FFE 0x1FFE
   \              0x0318 0x0318
   \              0x018C 0x018C
   \              0x018C 0x0000
   \              0x0000 0x0080
   \              0x03E0       
   \   000000C6   0x0FF8 0x0E9C      DC16 4088, 3740, 7308, 6284, 140, 152, 504, 2016, 3712, 7296, 6284
   \              0x1C8C 0x188C
   \              0x008C 0x0098
   \              0x01F8 0x07E0
   \              0x0E80 0x1C80
   \              0x188C       
   \   000000DC   0x188C 0x189C      DC16 6284, 6300, 3256, 4080, 992, 128, 128, 0, 0, 0, 0, 0, 0, 6158
   \              0x0CB8 0x0FF0
   \              0x03E0 0x0080
   \              0x0080 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x180E
   \   000000F8   0x0C1B 0x0C11      DC16 3099, 3089, 1553, 1553, 785, 785, 411, 398, 14528, 27840, 17504
   \              0x0611 0x0611
   \              0x0311 0x0311
   \              0x019B 0x018E
   \              0x38C0 0x6CC0
   \              0x4460       
   \   0000010E   0x4460 0x4430      DC16 17504, 17456, 17456, 17432, 27672, 14348, 0, 0, 0, 0, 480, 1008
   \              0x4430 0x4418
   \              0x6C18 0x380C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x01E0 0x03F0
   \   00000126   0x0738 0x0618      DC16 1848, 1560, 1560, 816, 496, 240, 248, 12700, 13070, 7686, 7174
   \              0x0618 0x0330
   \              0x01F0 0x00F0
   \              0x00F8 0x319C
   \              0x330E 0x1E06
   \              0x1C06       
   \   0000013C   0x1C06 0x3F06      DC16 7174, 16134, 29692, 8688, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12
   \              0x73FC 0x21F0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x000C 0x000C
   \              0x000C 0x000C
   \   0000015C   0x000C 0x000C      DC16 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 512
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0200
   \   00000184   0x0300 0x0180      DC16 768, 384, 192, 192, 96, 96, 48, 48, 48, 48, 48, 48, 48, 48, 96, 96
   \              0x00C0 0x00C0
   \              0x0060 0x0060
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0060 0x0060
   \   000001A4   0x00C0 0x00C0      DC16 192, 192, 384, 768, 512, 0, 0, 32, 96, 192, 384, 384, 768, 768
   \              0x0180 0x0300
   \              0x0200 0x0000
   \              0x0000 0x0020
   \              0x0060 0x00C0
   \              0x0180 0x0180
   \              0x0300 0x0300
   \   000001C0   0x0600 0x0600      DC16 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 768, 768, 384, 384
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0300 0x0300
   \              0x0180 0x0180
   \   000001D8   0x00C0 0x0060      DC16 192, 96, 32, 0, 0, 0, 0, 0, 0, 0, 192, 192, 1752, 2040, 480, 816
   \              0x0020 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x06D8 0x07F8
   \              0x01E0 0x0330
   \   000001F8   0x0738 0x0000      DC16 1848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0180 0x0180
   \   00000220   0x0180 0x0180      DC16 384, 384, 384, 16380, 16380, 384, 384, 384, 384, 384, 0, 0, 0, 0
   \              0x0180 0x3FFC
   \              0x3FFC 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000023C   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180       
   \   00000266   0x0100 0x0100      DC16 256, 256, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2016
   \              0x0080 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x07E0
   \   0000028A   0x07E0 0x0000      DC16 2016, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000002B4   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0, 0, 0, 3072, 3072, 1536
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x00C0
   \              0x00C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0C00
   \              0x0C00 0x0600
   \   000002D8   0x0600 0x0600      DC16 1536, 1536, 768, 768, 768, 896, 384, 384, 384, 192, 192, 192, 96
   \              0x0300 0x0300
   \              0x0300 0x0380
   \              0x0180 0x0180
   \              0x0180 0x00C0
   \              0x00C0 0x00C0
   \              0x0060       
   \   000002F2   0x0060 0x0000      DC16 96, 0, 0, 0, 0, 0, 0, 0, 992, 2032, 3640, 3096, 6156, 6156, 6156
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03E0 0x07F0
   \              0x0E38 0x0C18
   \              0x180C 0x180C
   \              0x180C       
   \   00000310   0x180C 0x180C      DC16 6156, 6156, 6156, 6156, 6156, 6156, 3096, 3640, 2032, 992, 0, 0, 0
   \              0x180C 0x180C
   \              0x180C 0x180C
   \              0x0C18 0x0E38
   \              0x07F0 0x03E0
   \              0x0000 0x0000
   \              0x0000       
   \   0000032A   0x0000 0x0000      DC16 0, 0, 0, 0, 256, 384, 448, 496, 408, 392, 384, 384, 384, 384, 384
   \              0x0000 0x0000
   \              0x0100 0x0180
   \              0x01C0 0x01F0
   \              0x0198 0x0188
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180       
   \   00000348   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 0, 0, 0, 0, 0, 0, 0, 992, 4088, 3096
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \              0x0FF8 0x0C18
   \   00000368   0x180C 0x180C      DC16 6156, 6156, 6144, 6144, 3072, 1536, 768, 384, 192, 96, 48, 24
   \              0x1800 0x1800
   \              0x0C00 0x0600
   \              0x0300 0x0180
   \              0x00C0 0x0060
   \              0x0030 0x0018
   \   00000380   0x1FFC 0x1FFC      DC16 8188, 8188, 0, 0, 0, 0, 0, 0, 0, 480, 2040, 3608, 3084, 3084, 3072
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x01E0
   \              0x07F8 0x0E18
   \              0x0C0C 0x0C0C
   \              0x0C00       
   \   0000039E   0x0600 0x03C0      DC16 1536, 960, 1984, 3072, 6144, 6144, 6156, 6156, 3096, 2040, 992, 0
   \              0x07C0 0x0C00
   \              0x1800 0x1800
   \              0x180C 0x180C
   \              0x0C18 0x07F8
   \              0x03E0 0x0000
   \   000003B6   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 3072, 3584, 3840, 3840, 3456, 3264, 3168, 3168
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0C00 0x0E00
   \              0x0F00 0x0F00
   \              0x0D80 0x0CC0
   \              0x0C60 0x0C60
   \   000003D2   0x0C30 0x0C18      DC16 3120, 3096, 3084, 16380, 16380, 3072, 3072, 3072, 3072, 0, 0, 0, 0
   \              0x0C0C 0x3FFC
   \              0x3FFC 0x0C00
   \              0x0C00 0x0C00
   \              0x0C00 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000003EC   0x0000 0x0000      DC16 0, 0, 0, 4088, 4088, 24, 24, 12, 1004, 2044, 3612, 7168, 6144
   \              0x0000 0x0FF8
   \              0x0FF8 0x0018
   \              0x0018 0x000C
   \              0x03EC 0x07FC
   \              0x0E1C 0x1C00
   \              0x1800       
   \   00000406   0x1800 0x1800      DC16 6144, 6144, 6156, 3100, 3608, 2040, 992, 0, 0, 0, 0, 0, 0, 0, 1984
   \              0x180C 0x0C1C
   \              0x0E18 0x07F8
   \              0x03E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x07C0       
   \   00000424   0x0FF0 0x1C38      DC16 4080, 7224, 6168, 24, 12, 972, 4076, 3644, 7196, 6156, 6156, 6156
   \              0x1818 0x0018
   \              0x000C 0x03CC
   \              0x0FEC 0x0E3C
   \              0x1C1C 0x180C
   \              0x180C 0x180C
   \   0000043C   0x1C18 0x0E38      DC16 7192, 3640, 2032, 992, 0, 0, 0, 0, 0, 0, 0, 8188, 8188, 3072, 1536
   \              0x07F0 0x03E0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x1FFC
   \              0x1FFC 0x0C00
   \              0x0600       
   \   0000045A   0x0600 0x0300      DC16 1536, 768, 896, 384, 448, 192, 224, 96, 96, 112, 48, 48, 48, 0, 0
   \              0x0380 0x0180
   \              0x01C0 0x00C0
   \              0x00E0 0x0060
   \              0x0060 0x0070
   \              0x0030 0x0030
   \              0x0030 0x0000
   \              0x0000       
   \   00000478   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 992, 2032, 3640, 3096, 3096, 3096, 1592, 2032, 2032
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \              0x07F0 0x0E38
   \              0x0C18 0x0C18
   \              0x0C18 0x0638
   \              0x07F0 0x07F0
   \   00000494   0x0C18 0x180C      DC16 3096, 6156, 6156, 6156, 6156, 3128, 4088, 992, 0, 0, 0, 0, 0, 0, 0
   \              0x180C 0x180C
   \              0x180C 0x0C38
   \              0x0FF8 0x03E0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000004B2   0x03E0 0x07F0      DC16 992, 2032, 3640, 3100, 6156, 6156, 6156, 7196, 7736, 7160, 6624
   \              0x0E38 0x0C1C
   \              0x180C 0x180C
   \              0x180C 0x1C1C
   \              0x1E38 0x1BF8
   \              0x19E0       
   \   000004C8   0x1800 0x0C00      DC16 6144, 3072, 3072, 3612, 2040, 496, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0C00 0x0E1C
   \              0x07F8 0x01F0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000004EA   0x0000 0x0180      DC16 0, 384, 384, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384, 0, 0, 0, 0, 0, 0, 0
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000512   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 384, 384, 0, 0, 0, 0, 0, 0, 0, 0, 384, 384, 256
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \              0x0180 0x0100
   \   00000536   0x0100 0x0080      DC16 256, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4096, 7168, 3968, 992
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x1000
   \              0x1C00 0x0F80
   \              0x03E0       
   \   00000558   0x7FF8 0x7FF8      DC16 32760, 32760, 32760, 992, 3968, 7168, 4096, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x7FF8 0x03E0
   \              0x0F80 0x1C00
   \              0x1000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000576   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 8184, 0, 0, 0, 8184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x1FF8
   \              0x0000 0x0000
   \              0x0000 0x1FF8
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   0000059E   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 56, 496, 1984, 8190, 8190, 8190
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0008
   \              0x0038 0x01F0
   \              0x07C0 0x1FFE
   \              0x1FFE 0x1FFE
   \   000005BE   0x07C0 0x01F0      DC16 1984, 496, 56, 8, 0, 0, 0, 0, 0, 0, 992, 4088, 3096, 6156, 6156
   \              0x0038 0x0008
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03E0 0x0FF8
   \              0x0C18 0x180C
   \              0x180C       
   \   000005DC   0x1800 0x0C00      DC16 6144, 3072, 1536, 768, 384, 192, 192, 192, 0, 0, 192, 192, 0, 0, 0
   \              0x0600 0x0300
   \              0x0180 0x00C0
   \              0x00C0 0x00C0
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x0000 0x0000
   \              0x0000       
   \   000005FA   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 2016, 6168, 8196, 10690, 18978, 17425, 17417, 17417
   \              0x0000 0x0000
   \              0x0000 0x07E0
   \              0x1818 0x2004
   \              0x29C2 0x4A22
   \              0x4411 0x4409
   \              0x4409       
   \   00000614   0x4409 0x2209      DC16 17417, 8713, 4881, 3298, 16386, 8196, 6168, 2016, 0, 0, 0, 0, 0, 0
   \              0x1311 0x0CE2
   \              0x4002 0x2004
   \              0x1818 0x07E0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000630   0x0000 0x0380      DC16 0, 896, 896, 1728, 1728, 1728, 3168, 3168, 6192, 6192, 6192, 16376
   \              0x0380 0x06C0
   \              0x06C0 0x06C0
   \              0x0C60 0x0C60
   \              0x1830 0x1830
   \              0x1830 0x3FF8
   \   00000648   0x3FF8 0x701C      DC16 16376, 28700, 24588, 24588, 49158, 49158, 0, 0, 0, 0, 0, 0, 0
   \              0x600C 0x600C
   \              0xC006 0xC006
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000662   0x03FC 0x0FFC      DC16 1020, 4092, 3084, 6156, 6156, 6156, 3084, 2044, 4092, 6156, 12300
   \              0x0C0C 0x180C
   \              0x180C 0x180C
   \              0x0C0C 0x07FC
   \              0x0FFC 0x180C
   \              0x300C       
   \   00000678   0x300C 0x300C      DC16 12300, 12300, 12300, 6156, 8188, 2044, 0, 0, 0, 0, 0, 0, 0, 1984
   \              0x300C 0x180C
   \              0x1FFC 0x07FC
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x07C0
   \   00000694   0x1FF0 0x3838      DC16 8176, 14392, 12316, 28684, 24582, 6, 6, 6, 6, 6, 6, 24582, 28684
   \              0x301C 0x700C
   \              0x6006 0x0006
   \              0x0006 0x0006
   \              0x0006 0x0006
   \              0x0006 0x6006
   \              0x700C       
   \   000006AE   0x301C 0x1FF0      DC16 12316, 8176, 2016, 0, 0, 0, 0, 0, 0, 0, 1022, 4094, 3590, 6150
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03FE 0x0FFE
   \              0x0E06 0x1806
   \   000006CA   0x1806 0x3006      DC16 6150, 12294, 12294, 12294, 12294, 12294, 12294, 12294, 6150, 6150
   \              0x3006 0x3006
   \              0x3006 0x3006
   \              0x3006 0x3006
   \              0x1806 0x1806
   \   000006DE   0x0E06 0x0FFE      DC16 3590, 4094, 1022, 0, 0, 0, 0, 0, 0, 0, 16380, 16380, 12, 12, 12
   \              0x03FE 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x3FFC 0x3FFC
   \              0x000C 0x000C
   \              0x000C       
   \   000006FC   0x000C 0x000C      DC16 12, 12, 8188, 8188, 12, 12, 12, 12, 12, 12, 16380, 16380, 0, 0, 0
   \              0x1FFC 0x1FFC
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x3FFC 0x3FFC
   \              0x0000 0x0000
   \              0x0000       
   \   0000071A   0x0000 0x0000      DC16 0, 0, 0, 0, 16376, 16376, 24, 24, 24, 24, 24, 8184, 8184, 24, 24
   \              0x0000 0x0000
   \              0x3FF8 0x3FF8
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x1FF8
   \              0x1FF8 0x0018
   \              0x0018       
   \   00000738   0x0018 0x0018      DC16 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 4064, 16376, 30780
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0FE0
   \              0x3FF8 0x783C
   \   00000758   0x600E 0xE006      DC16 24590, 57350, 49159, 3, 3, 65027, 65027, 49155, 49159, 49158
   \              0xC007 0x0003
   \              0x0003 0xFE03
   \              0xFE03 0xC003
   \              0xC007 0xC006
   \   0000076C   0xC00E 0xF03C      DC16 49166, 61500, 16376, 4064, 0, 0, 0, 0, 0, 0, 0, 12300, 12300
   \              0x3FF8 0x0FE0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x300C
   \              0x300C       
   \   00000786   0x300C 0x300C      DC16 12300, 12300, 12300, 12300, 12300, 16380, 16380, 12300, 12300
   \              0x300C 0x300C
   \              0x300C 0x3FFC
   \              0x3FFC 0x300C
   \              0x300C       
   \   00000798   0x300C 0x300C      DC16 12300, 12300, 12300, 12300, 12300, 12300, 0, 0, 0, 0, 0, 0, 0, 384
   \              0x300C 0x300C
   \              0x300C 0x300C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0180
   \   000007B4   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180       
   \   000007CE   0x0180 0x0180      DC16 384, 384, 384, 0, 0, 0, 0, 0, 0, 0, 1536, 1536, 1536, 1536, 1536
   \              0x0180 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0600       
   \   000007EC   0x0600 0x0600      DC16 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1560, 1560, 1848, 1008
   \              0x0600 0x0600
   \              0x0600 0x0600
   \              0x0600 0x0618
   \              0x0618 0x0738
   \              0x03F0       
   \   00000802   0x01E0 0x0000      DC16 480, 0, 0, 0, 0, 0, 0, 0, 12294, 6150, 3078, 1542, 774, 390, 198
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x3006 0x1806
   \              0x0C06 0x0606
   \              0x0306 0x0186
   \              0x00C6       
   \   00000820   0x0066 0x0076      DC16 102, 118, 222, 398, 774, 1542, 3078, 6150, 12294, 24582, 0, 0, 0
   \              0x00DE 0x018E
   \              0x0306 0x0606
   \              0x0C06 0x1806
   \              0x3006 0x6006
   \              0x0000 0x0000
   \              0x0000       
   \   0000083A   0x0000 0x0000      DC16 0, 0, 0, 0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24
   \              0x0000 0x0000
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x0018
   \   0000085E   0x0018 0x1FF8      DC16 24, 8184, 8184, 0, 0, 0, 0, 0, 0, 0, 57358, 61470, 61470, 61470
   \              0x1FF8 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0xE00E 0xF01E
   \              0xF01E 0xF01E
   \   0000087A   0xD836 0xD836      DC16 55350, 55350, 55350, 55350, 52326, 52326, 52326, 50886, 50886
   \              0xD836 0xD836
   \              0xCC66 0xCC66
   \              0xCC66 0xC6C6
   \              0xC6C6       
   \   0000088C   0xC6C6 0xC6C6      DC16 50886, 50886, 50054, 50054, 0, 0, 0, 0, 0, 0, 0, 12300, 12316
   \              0xC386 0xC386
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x300C
   \              0x301C       
   \   000008A6   0x303C 0x303C      DC16 12348, 12348, 12396, 12396, 12492, 12492, 12684, 13068, 13068
   \              0x306C 0x306C
   \              0x30CC 0x30CC
   \              0x318C 0x330C
   \              0x330C       
   \   000008B8   0x360C 0x360C      DC16 13836, 13836, 15372, 15372, 14348, 12300, 0, 0, 0, 0, 0, 0, 0
   \              0x3C0C 0x3C0C
   \              0x380C 0x300C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000008D2   0x07E0 0x1FF8      DC16 2016, 8184, 14364, 28686, 24582, 49155, 49155, 49155, 49155, 49155
   \              0x381C 0x700E
   \              0x6006 0xC003
   \              0xC003 0xC003
   \              0xC003 0xC003
   \   000008E6   0xC003 0xC003      DC16 49155, 49155, 24582, 28686, 14364, 8184, 2016, 0, 0, 0, 0, 0, 0, 0
   \              0x6006 0x700E
   \              0x381C 0x1FF8
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000902   0x0FFC 0x1FFC      DC16 4092, 8188, 14348, 12300, 12300, 12300, 12300, 6156, 8188, 2044
   \              0x380C 0x300C
   \              0x300C 0x300C
   \              0x300C 0x180C
   \              0x1FFC 0x07FC
   \   00000916   0x000C 0x000C      DC16 12, 12, 12, 12, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 2016, 8184, 14364
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x07E0 0x1FF8
   \              0x381C       
   \   00000938   0x700E 0x6006      DC16 28686, 24582, 57347, 49155, 49155, 49155, 49155, 49155, 57351
   \              0xE003 0xC003
   \              0xC003 0xC003
   \              0xC003 0xC003
   \              0xE007       
   \   0000094A   0x6306 0x3F0E      DC16 25350, 16142, 15388, 16376, 63456, 49152, 0, 0, 0, 0, 0, 0, 4094
   \              0x3C1C 0x3FF8
   \              0xF7E0 0xC000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0FFE       
   \   00000964   0x1FFE 0x3806      DC16 8190, 14342, 12294, 12294, 12294, 14342, 8190, 2046, 774, 1542
   \              0x3006 0x3006
   \              0x3006 0x3806
   \              0x1FFE 0x07FE
   \              0x0306 0x0606
   \   00000978   0x0C06 0x1806      DC16 3078, 6150, 6150, 12294, 12294, 24582, 0, 0, 0, 0, 0, 0, 0, 992
   \              0x1806 0x3006
   \              0x3006 0x6006
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \   00000994   0x0FF8 0x0C1C      DC16 4088, 3100, 6156, 6156, 12, 28, 1016, 4064, 7680, 14336, 12294
   \              0x180C 0x180C
   \              0x000C 0x001C
   \              0x03F8 0x0FE0
   \              0x1E00 0x3800
   \              0x3006       
   \   000009AA   0x3006 0x300E      DC16 12294, 12302, 7196, 4088, 2016, 0, 0, 0, 0, 0, 0, 0, 32766, 32766
   \              0x1C1C 0x0FF8
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x7FFE 0x7FFE
   \   000009C6   0x0180 0x0180      DC16 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384, 384
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180       
   \   000009E0   0x0180 0x0180      DC16 384, 384, 0, 0, 0, 0, 0, 0, 0, 12300, 12300, 12300, 12300, 12300
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x300C
   \              0x300C 0x300C
   \              0x300C 0x300C
   \   000009FC   0x300C 0x300C      DC16 12300, 12300, 12300, 12300, 12300, 12300, 12300, 12300, 12300
   \              0x300C 0x300C
   \              0x300C 0x300C
   \              0x300C 0x300C
   \              0x300C       
   \   00000A0E   0x1818 0x1FF8      DC16 6168, 8184, 2016, 0, 0, 0, 0, 0, 0, 0, 24579, 12294, 12294, 12294
   \              0x07E0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x6003 0x3006
   \              0x3006 0x3006
   \   00000A2A   0x180C 0x180C      DC16 6156, 6156, 6156, 3096, 3096, 3640, 1584, 1584, 1904, 864, 864
   \              0x180C 0x0C18
   \              0x0C18 0x0E38
   \              0x0630 0x0630
   \              0x0770 0x0360
   \              0x0360       
   \   00000A40   0x01C0 0x01C0      DC16 448, 448, 0, 0, 0, 0, 0, 0, 0, 24579, 25027, 25027, 25027, 13158
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x6003
   \              0x61C3 0x61C3
   \              0x61C3 0x3366
   \   00000A5C   0x3366 0x3366      DC16 13158, 13158, 13158, 13158, 13158, 7020, 7020, 7020, 6700, 7740
   \              0x3366 0x3366
   \              0x3366 0x1B6C
   \              0x1B6C 0x1B6C
   \              0x1A2C 0x1E3C
   \   00000A70   0x0E38 0x0E38      DC16 3640, 3640, 0, 0, 0, 0, 0, 0, 0, 57359, 28684, 12312, 6192, 3184
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0xE00F
   \              0x700C 0x3018
   \              0x1830 0x0C70
   \   00000A8C   0x0E60 0x07C0      DC16 3680, 1984, 896, 896, 960, 1760, 3184, 7216, 6168, 12300, 24590
   \              0x0380 0x0380
   \              0x03C0 0x06E0
   \              0x0C70 0x1C30
   \              0x1818 0x300C
   \              0x600E       
   \   00000AA2   0xE007 0x0000      DC16 57351, 0, 0, 0, 0, 0, 0, 0, 49155, 24582, 12300, 14364, 6200, 3120
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0xC003 0x6006
   \              0x300C 0x381C
   \              0x1838 0x0C30
   \   00000ABE   0x0660 0x07E0      DC16 1632, 2016, 960, 384, 384, 384, 384, 384, 384, 384, 384, 0, 0, 0
   \              0x03C0 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0000
   \              0x0000 0x0000
   \   00000ADA   0x0000 0x0000      DC16 0, 0, 0, 0, 32764, 32764, 24576, 12288, 6144, 3072, 1536, 768, 384
   \              0x0000 0x0000
   \              0x7FFC 0x7FFC
   \              0x6000 0x3000
   \              0x1800 0x0C00
   \              0x0600 0x0300
   \              0x0180       
   \   00000AF4   0x00C0 0x0060      DC16 192, 96, 48, 24, 12, 6, 32766, 32766, 0, 0, 0, 0, 0, 0, 0, 992
   \              0x0030 0x0018
   \              0x000C 0x0006
   \              0x7FFE 0x7FFE
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \   00000B14   0x03E0 0x0060      DC16 992, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \              0x0060 0x0060
   \   00000B34   0x0060 0x0060      DC16 96, 96, 96, 992, 992, 0, 0, 48, 48, 96, 96, 96, 192, 192, 192, 448
   \              0x0060 0x03E0
   \              0x03E0 0x0000
   \              0x0000 0x0030
   \              0x0030 0x0060
   \              0x0060 0x0060
   \              0x00C0 0x00C0
   \              0x00C0 0x01C0
   \   00000B54   0x0180 0x0180      DC16 384, 384, 384, 768, 768, 768, 1536, 1536, 0, 0, 0, 0, 0, 0, 0, 992
   \              0x0180 0x0300
   \              0x0300 0x0300
   \              0x0600 0x0600
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03E0
   \   00000B74   0x03E0 0x0300      DC16 992, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768, 768
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x0300       
   \   00000B8E   0x0300 0x0300      DC16 768, 768, 768, 768, 768, 768, 992, 992, 0, 0, 384, 448, 448, 992
   \              0x0300 0x0300
   \              0x0300 0x0300
   \              0x03E0 0x03E0
   \              0x0000 0x0000
   \              0x0180 0x01C0
   \              0x01C0 0x03E0
   \   00000BAA   0x03E0 0x03E0      DC16 992, 992, 2032, 2032, 3544, 3544, 448, 448, 448, 448, 448, 448
   \              0x07F0 0x07F0
   \              0x0DD8 0x0DD8
   \              0x01C0 0x01C0
   \              0x01C0 0x01C0
   \              0x01C0 0x01C0
   \   00000BC2   0x01C0 0x01C0      DC16 448, 448, 448, 448, 448, 448, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x01C0 0x01C0
   \              0x01C0 0x01C0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000BE6   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 65535, 65535, 0, 0, 0, 0, 0, 0, 12, 12, 12, 12
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0xFFFF 0xFFFF
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x000C 0x000C
   \              0x000C 0x000C
   \   00000C0A   0x000C 0x000C      DC16 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000C36   0x0000 0x0000      DC16 0, 0, 0, 1008, 2040, 3100, 3084, 3840, 4080, 3320, 3084, 3084
   \              0x0000 0x03F0
   \              0x07F8 0x0C1C
   \              0x0C0C 0x0F00
   \              0x0FF0 0x0CF8
   \              0x0C0C 0x0C0C
   \   00000C4E   0x0F1C 0x0FF8      DC16 3868, 4088, 6384, 0, 0, 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 984
   \              0x18F0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x03D8
   \   00000C6E   0x0FF8 0x0C38      DC16 4088, 3128, 6168, 6168, 6168, 6168, 6168, 6168, 3128, 4088, 984, 0
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x0C38 0x0FF8
   \              0x03D8 0x0000
   \   00000C86   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 960, 2032, 3632, 3096, 24, 24, 24
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03C0
   \              0x07F0 0x0E30
   \              0x0C18 0x0018
   \              0x0018 0x0018
   \   00000CAA   0x0018 0x0C18      DC16 24, 3096, 3632, 2032, 960, 0, 0, 0, 0, 0, 0, 0, 6144, 6144, 6144
   \              0x0E30 0x07F0
   \              0x03C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x1800 0x1800
   \              0x1800       
   \   00000CC8   0x1800 0x1800      DC16 6144, 6144, 7104, 8176, 7216, 6168, 6168, 6168, 6168, 6168, 6168
   \              0x1BC0 0x1FF0
   \              0x1C30 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818       
   \   00000CDE   0x1C30 0x1FF0      DC16 7216, 8176, 7104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 960, 4080
   \              0x1BC0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x03C0
   \              0x0FF0       
   \   00000D00   0x0C30 0x1818      DC16 3120, 6168, 8184, 8184, 24, 24, 6200, 7216, 4080, 1984, 0, 0, 0, 0
   \              0x1FF8 0x1FF8
   \              0x0018 0x0018
   \              0x1838 0x1C30
   \              0x0FF0 0x07C0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000D1C   0x0000 0x0000      DC16 0, 0, 0, 3968, 4032, 192, 192, 192, 2032, 2032, 192, 192, 192, 192
   \              0x0000 0x0F80
   \              0x0FC0 0x00C0
   \              0x00C0 0x00C0
   \              0x07F0 0x07F0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \   00000D38   0x00C0 0x00C0      DC16 192, 192, 192, 192, 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \   00000D5C   0x0DE0 0x0FF8      DC16 3552, 4088, 3608, 3084, 3084, 3084, 3084, 3084, 3084, 3608, 4088
   \              0x0E18 0x0C0C
   \              0x0C0C 0x0C0C
   \              0x0C0C 0x0C0C
   \              0x0C0C 0x0E18
   \              0x0FF8       
   \   00000D72   0x0DE0 0x0C00      DC16 3552, 3072, 3084, 1564, 2040, 496, 0, 0, 24, 24, 24, 24, 24, 2008
   \              0x0C0C 0x061C
   \              0x07F8 0x01F0
   \              0x0000 0x0000
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0018 0x07D8
   \   00000D8E   0x0FF8 0x1C38      DC16 4088, 7224, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818       
   \   00000DA4   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 192, 192, 0, 0, 0, 192, 192, 192, 192, 192
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x00C0
   \              0x00C0 0x0000
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0       
   \   00000DC6   0x00C0 0x00C0      DC16 192, 192, 192, 192, 192, 192, 192, 0, 0, 0, 0, 0, 0, 0, 192, 192
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x00C0 0x00C0
   \   00000DE6   0x0000 0x0000      DC16 0, 0, 0, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192
   \              0x0000 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \   00000E02   0x00C0 0x00C0      DC16 192, 192, 192, 192, 248, 120, 0, 0, 12, 12, 12, 12, 12, 3084, 1548
   \              0x00C0 0x00C0
   \              0x00F8 0x0078
   \              0x0000 0x0000
   \              0x000C 0x000C
   \              0x000C 0x000C
   \              0x000C 0x0C0C
   \              0x060C       
   \   00000E20   0x030C 0x018C      DC16 780, 396, 204, 108, 252, 412, 908, 780, 1548, 3084, 0, 0, 0, 0, 0
   \              0x00CC 0x006C
   \              0x00FC 0x019C
   \              0x038C 0x030C
   \              0x060C 0x0C0C
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000E3E   0x0000 0x0000      DC16 0, 0, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \   00000E5A   0x00C0 0x00C0      DC16 192, 192, 192, 192, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15484
   \              0x00C0 0x00C0
   \              0x00C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x3C7C
   \   00000E7E   0x7EFF 0xE3C7      DC16 32511, 58311, 49539, 49539, 49539, 49539, 49539, 49539, 49539
   \              0xC183 0xC183
   \              0xC183 0xC183
   \              0xC183 0xC183
   \              0xC183       
   \   00000E90   0xC183 0xC183      DC16 49539, 49539, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1944, 4088, 7224
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0798 0x0FF8
   \              0x1C38       
   \   00000EB2   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 0, 0, 0, 0
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000ECC   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 0, 960, 4080, 3120, 6168, 6168, 6168, 6168
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03C0 0x0FF0
   \              0x0C30 0x1818
   \              0x1818 0x1818
   \              0x1818       
   \   00000EEA   0x1818 0x1818      DC16 6168, 6168, 3120, 4080, 960, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0C30 0x0FF0
   \              0x03C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000F0C   0x03D8 0x0FF8      DC16 984, 4088, 3128, 6168, 6168, 6168, 6168, 6168, 6168, 3128, 4088
   \              0x0C38 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x0C38
   \              0x0FF8       
   \   00000F22   0x03D8 0x0018      DC16 984, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 7104, 8176, 7216
   \              0x0018 0x0018
   \              0x0018 0x0018
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x1BC0
   \              0x1FF0 0x1C30
   \   00000F42   0x1818 0x1818      DC16 6168, 6168, 6168, 6168, 6168, 6168, 7216, 8176, 7104, 6144, 6144
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1C30 0x1FF0
   \              0x1BC0 0x1800
   \              0x1800       
   \   00000F58   0x1800 0x1800      DC16 6144, 6144, 6144, 0, 0, 0, 0, 0, 0, 0, 1968, 1008, 112, 48, 48, 48
   \              0x1800 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x07B0 0x03F0
   \              0x0070 0x0030
   \              0x0030 0x0030
   \   00000F78   0x0030 0x0030      DC16 48, 48, 48, 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 992
   \              0x0030 0x0030
   \              0x0030 0x0030
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x03E0       
   \   00000F9E   0x03F0 0x0E38      DC16 1008, 3640, 3096, 56, 1008, 1984, 3072, 3096, 3640, 2032, 992, 0
   \              0x0C18 0x0038
   \              0x03F0 0x07C0
   \              0x0C00 0x0C18
   \              0x0E38 0x07F0
   \              0x03E0 0x0000
   \   00000FB6   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 0, 128, 192, 192, 192, 2032, 2032, 192, 192, 192
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0080
   \              0x00C0 0x00C0
   \              0x00C0 0x07F0
   \              0x07F0 0x00C0
   \              0x00C0 0x00C0
   \   00000FD6   0x00C0 0x00C0      DC16 192, 192, 192, 192, 192, 1984, 1920, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00C0 0x00C0
   \              0x00C0 0x07C0
   \              0x0780 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00000FF8   0x0000 0x0000      DC16 0, 0, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 6168, 7224
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1818
   \              0x1818 0x1C38
   \   00001010   0x1FF0 0x19E0      DC16 8176, 6624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6156, 3096, 3096
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x180C 0x0C18
   \              0x0C18       
   \   00001032   0x0C18 0x0630      DC16 3096, 1584, 1584, 1584, 864, 864, 864, 448, 448, 0, 0, 0, 0, 0, 0
   \              0x0630 0x0630
   \              0x0360 0x0360
   \              0x0360 0x01C0
   \              0x01C0 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   00001050   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 16833, 16833, 25027, 25443, 25443, 25443, 13878
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x41C1 0x41C1
   \              0x61C3 0x6363
   \              0x6363 0x6363
   \              0x3636       
   \   0000106A   0x3636 0x3636      DC16 13878, 13878, 7196, 7196, 7196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x1C1C 0x1C1C
   \              0x1C1C 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   0000108C   0x381C 0x1C38      DC16 14364, 7224, 3120, 1632, 864, 864, 864, 864, 1632, 3120, 7224
   \              0x0C30 0x0660
   \              0x0360 0x0360
   \              0x0360 0x0360
   \              0x0660 0x0C30
   \              0x1C38       
   \   000010A2   0x381C 0x0000      DC16 14364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12312, 6192, 6192, 6256
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x3018
   \              0x1830 0x1830
   \              0x1870       
   \   000010C4   0x0C60 0x0C60      DC16 3168, 3168, 3296, 1728, 1728, 896, 896, 896, 384, 384, 448, 240
   \              0x0CE0 0x06C0
   \              0x06C0 0x0380
   \              0x0380 0x0380
   \              0x0180 0x0180
   \              0x01C0 0x00F0
   \   000010DC   0x0070 0x0000      DC16 112, 0, 0, 0, 0, 0, 0, 0, 8188, 8188, 3072, 1536, 768, 384, 192
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x1FFC 0x1FFC
   \              0x0C00 0x0600
   \              0x0300 0x0180
   \              0x00C0       
   \   000010FA   0x0060 0x0030      DC16 96, 48, 24, 8188, 8188, 0, 0, 0, 0, 0, 0, 0, 768, 384, 192, 192
   \              0x0018 0x1FFC
   \              0x1FFC 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0300 0x0180
   \              0x00C0 0x00C0
   \   0000111A   0x00C0 0x00C0      DC16 192, 192, 192, 192, 96, 96, 48, 96, 64, 192, 192, 192, 192, 192
   \              0x00C0 0x00C0
   \              0x0060 0x0060
   \              0x0030 0x0060
   \              0x0040 0x00C0
   \              0x00C0 0x00C0
   \              0x00C0 0x00C0
   \   00001136   0x00C0 0x0180      DC16 192, 384, 768, 0, 0, 0, 448, 448, 448, 448, 448, 448, 448, 448
   \              0x0300 0x0000
   \              0x0000 0x0000
   \              0x01C0 0x01C0
   \              0x01C0 0x01C0
   \              0x01C0 0x01C0
   \              0x01C0 0x01C0
   \   00001152   0x01C0 0x01C0      DC16 448, 448, 448, 448, 3544, 3544, 2032, 2032, 992, 992, 992, 448
   \              0x01C0 0x01C0
   \              0x0DD8 0x0DD8
   \              0x07F0 0x07F0
   \              0x03E0 0x03E0
   \              0x03E0 0x01C0
   \   0000116A   0x01C0 0x0180      DC16 448, 384, 0, 0, 96, 192, 448, 384, 384, 384, 384, 384, 768, 768
   \              0x0000 0x0000
   \              0x0060 0x00C0
   \              0x01C0 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0300 0x0300
   \   00001186   0x0600 0x0300      DC16 1536, 768, 256, 384, 384, 384, 384, 384, 384, 192, 96, 0, 0, 0, 0
   \              0x0100 0x0180
   \              0x0180 0x0180
   \              0x0180 0x0180
   \              0x0180 0x00C0
   \              0x0060 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000011A4   0x0000 0x0000      DC16 0, 0, 0, 0, 0, 0, 4336, 8184, 3848, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x10F0 0x1FF8
   \              0x0F08 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000 0x0000
   \              0x0000       
   \   000011CA   0x0000 0x0000      DC16 0, 0, 0
   \              0x0000       
     43                 {
     44                   /* Space ' ' */
     45                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     46                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
     47                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     48                   /* '!' */
     49                   0x0000, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
     50                   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0000, 0x0000, 
     51                   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     52                   /* '"' */
     53                   0x0000, 0x0000, 0x00CC, 0x00CC, 0x00CC, 0x00CC, 0x00CC, 0x00CC,
     54                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
     55                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     56                   /* '#' */
     57                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0C60, 0x0C60,
     58                   0x0C60, 0x0630, 0x0630, 0x1FFE, 0x1FFE, 0x0630, 0x0738, 0x0318, 
     59                   0x1FFE, 0x1FFE, 0x0318, 0x0318, 0x018C, 0x018C, 0x018C, 0x0000,
     60                   /* '$' */
     61                   0x0000, 0x0080, 0x03E0, 0x0FF8, 0x0E9C, 0x1C8C, 0x188C, 0x008C,
     62                   0x0098, 0x01F8, 0x07E0, 0x0E80, 0x1C80, 0x188C, 0x188C, 0x189C, 
     63                   0x0CB8, 0x0FF0, 0x03E0, 0x0080, 0x0080, 0x0000, 0x0000, 0x0000,
     64                   /* '%' */
     65                   0x0000, 0x0000, 0x0000, 0x180E, 0x0C1B, 0x0C11, 0x0611, 0x0611,
     66                   0x0311, 0x0311, 0x019B, 0x018E, 0x38C0, 0x6CC0, 0x4460, 0x4460, 
     67                   0x4430, 0x4430, 0x4418, 0x6C18, 0x380C, 0x0000, 0x0000, 0x0000,
     68                   /* '&' */
     69                   0x0000, 0x01E0, 0x03F0, 0x0738, 0x0618, 0x0618, 0x0330, 0x01F0,
     70                   0x00F0, 0x00F8, 0x319C, 0x330E, 0x1E06, 0x1C06, 0x1C06, 0x3F06, 
     71                   0x73FC, 0x21F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     72                   /* ''' */
     73                   0x0000, 0x0000, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C,
     74                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
     75                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     76                   /* '(' */
     77                   0x0000, 0x0200, 0x0300, 0x0180, 0x00C0, 0x00C0, 0x0060, 0x0060,
     78                   0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 
     79                   0x0060, 0x0060, 0x00C0, 0x00C0, 0x0180, 0x0300, 0x0200, 0x0000,
     80                   /* ')' */
     81                   0x0000, 0x0020, 0x0060, 0x00C0, 0x0180, 0x0180, 0x0300, 0x0300,
     82                   0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 
     83                   0x0300, 0x0300, 0x0180, 0x0180, 0x00C0, 0x0060, 0x0020, 0x0000,
     84                   /* '*' */
     85                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x00C0, 0x00C0,
     86                   0x06D8, 0x07F8, 0x01E0, 0x0330, 0x0738, 0x0000, 0x0000, 0x0000, 
     87                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     88                   /* '+' */
     89                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180,
     90                   0x0180, 0x0180, 0x0180, 0x3FFC, 0x3FFC, 0x0180, 0x0180, 0x0180, 
     91                   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     92                   /* ',' */
     93                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     94                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
     95                   0x0000, 0x0180, 0x0180, 0x0100, 0x0100, 0x0080, 0x0000, 0x0000,
     96                   /* '-' */
     97                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
     98                   0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x0000, 
     99                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    100                   /* '.' */
    101                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    102                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    103                   0x0000, 0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    104                   /* '/' */
    105                   0x0000, 0x0C00, 0x0C00, 0x0600, 0x0600, 0x0600, 0x0300, 0x0300,
    106                   0x0300, 0x0380, 0x0180, 0x0180, 0x0180, 0x00C0, 0x00C0, 0x00C0, 
    107                   0x0060, 0x0060, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    108                   /* '0' */
    109                   0x0000, 0x03E0, 0x07F0, 0x0E38, 0x0C18, 0x180C, 0x180C, 0x180C,
    110                   0x180C, 0x180C, 0x180C, 0x180C, 0x180C, 0x180C, 0x0C18, 0x0E38, 
    111                   0x07F0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    112                   /* '1' */
    113                   0x0000, 0x0100, 0x0180, 0x01C0, 0x01F0, 0x0198, 0x0188, 0x0180,
    114                   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 
    115                   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    116                   /* '2' */
    117                   0x0000, 0x03E0, 0x0FF8, 0x0C18, 0x180C, 0x180C, 0x1800, 0x1800,
    118                   0x0C00, 0x0600, 0x0300, 0x0180, 0x00C0, 0x0060, 0x0030, 0x0018, 
    119                   0x1FFC, 0x1FFC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    120                   /* '3' */
    121                   0x0000, 0x01E0, 0x07F8, 0x0E18, 0x0C0C, 0x0C0C, 0x0C00, 0x0600,
    122                   0x03C0, 0x07C0, 0x0C00, 0x1800, 0x1800, 0x180C, 0x180C, 0x0C18, 
    123                   0x07F8, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    124                   /* '4' */
    125                   0x0000, 0x0C00, 0x0E00, 0x0F00, 0x0F00, 0x0D80, 0x0CC0, 0x0C60,
    126                   0x0C60, 0x0C30, 0x0C18, 0x0C0C, 0x3FFC, 0x3FFC, 0x0C00, 0x0C00, 
    127                   0x0C00, 0x0C00, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    128                   /* '5' */
    129                   0x0000, 0x0FF8, 0x0FF8, 0x0018, 0x0018, 0x000C, 0x03EC, 0x07FC,
    130                   0x0E1C, 0x1C00, 0x1800, 0x1800, 0x1800, 0x180C, 0x0C1C, 0x0E18, 
    131                   0x07F8, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    132                   /* '6' */
    133                   0x0000, 0x07C0, 0x0FF0, 0x1C38, 0x1818, 0x0018, 0x000C, 0x03CC,
    134                   0x0FEC, 0x0E3C, 0x1C1C, 0x180C, 0x180C, 0x180C, 0x1C18, 0x0E38, 
    135                   0x07F0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    136                   /* '7' */
    137                   0x0000, 0x1FFC, 0x1FFC, 0x0C00, 0x0600, 0x0600, 0x0300, 0x0380,
    138                   0x0180, 0x01C0, 0x00C0, 0x00E0, 0x0060, 0x0060, 0x0070, 0x0030, 
    139                   0x0030, 0x0030, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    140                   /* '8' */
    141                   0x0000, 0x03E0, 0x07F0, 0x0E38, 0x0C18, 0x0C18, 0x0C18, 0x0638,
    142                   0x07F0, 0x07F0, 0x0C18, 0x180C, 0x180C, 0x180C, 0x180C, 0x0C38, 
    143                   0x0FF8, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    144                   /* '9' */
    145                   0x0000, 0x03E0, 0x07F0, 0x0E38, 0x0C1C, 0x180C, 0x180C, 0x180C,
    146                   0x1C1C, 0x1E38, 0x1BF8, 0x19E0, 0x1800, 0x0C00, 0x0C00, 0x0E1C, 
    147                   0x07F8, 0x01F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    148                   /* ':' */
    149                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180,
    150                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    151                   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    152                   /* ';' */
    153                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0180, 0x0180,
    154                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    155                   0x0180, 0x0180, 0x0100, 0x0100, 0x0080, 0x0000, 0x0000, 0x0000,
    156                   /* '<' */
    157                   /*MODIFIED TO DRAW AN ARROW POINTING LEFT*/
    158                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    159                   0x1000, 0x1C00, 0x0F80, 0x03E0, 0x7FF8, 0x7FF8, 0x7FF8, 0x03E0, 
    160                   0x0F80, 0x1C00, 0x1000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    161                   /* '=' */
    162                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    163                   0x1FF8, 0x0000, 0x0000, 0x0000, 0x1FF8, 0x0000, 0x0000, 0x0000, 
    164                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    165                   /* '>' */
    166                   /*MODIFIED TO DRAW AN ARROW POINTING RIGHT*/
    167                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    168                   0x0008, 0x0038, 0x01F0, 0x07C0, 0x1FFE, 0x1FFE, 0x1FFE, 0x07C0, 
    169                   0x01F0, 0x0038, 0x0008, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    170                   /* '?' */
    171                   0x0000, 0x03E0, 0x0FF8, 0x0C18, 0x180C, 0x180C, 0x1800, 0x0C00,
    172                   0x0600, 0x0300, 0x0180, 0x00C0, 0x00C0, 0x00C0, 0x0000, 0x0000, 
    173                   0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    174                   /* '@' */
    175                   0x0000, 0x0000, 0x07E0, 0x1818, 0x2004, 0x29C2, 0x4A22, 0x4411,
    176                   0x4409, 0x4409, 0x4409, 0x2209, 0x1311, 0x0CE2, 0x4002, 0x2004, 
    177                   0x1818, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,                       
    178                   /* 'A' */
    179                   0x0000, 0x0380, 0x0380, 0x06C0, 0x06C0, 0x06C0, 0x0C60, 0x0C60,
    180                   0x1830, 0x1830, 0x1830, 0x3FF8, 0x3FF8, 0x701C, 0x600C, 0x600C, 
    181                   0xC006, 0xC006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    182                   /* 'B' */
    183                   0x0000, 0x03FC, 0x0FFC, 0x0C0C, 0x180C, 0x180C, 0x180C, 0x0C0C,
    184                   0x07FC, 0x0FFC, 0x180C, 0x300C, 0x300C, 0x300C, 0x300C, 0x180C, 
    185                   0x1FFC, 0x07FC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    186                   /* 'C' */
    187                   0x0000, 0x07C0, 0x1FF0, 0x3838, 0x301C, 0x700C, 0x6006, 0x0006,
    188                   0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x6006, 0x700C, 0x301C, 
    189                   0x1FF0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    190                   /* 'D' */
    191                   0x0000, 0x03FE, 0x0FFE, 0x0E06, 0x1806, 0x1806, 0x3006, 0x3006,
    192                   0x3006, 0x3006, 0x3006, 0x3006, 0x3006, 0x1806, 0x1806, 0x0E06, 
    193                   0x0FFE, 0x03FE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    194                   /* 'E' */
    195                   0x0000, 0x3FFC, 0x3FFC, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C,
    196                   0x1FFC, 0x1FFC, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 
    197                   0x3FFC, 0x3FFC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    198                   /* 'F' */
    199                   0x0000, 0x3FF8, 0x3FF8, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018,
    200                   0x1FF8, 0x1FF8, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 
    201                   0x0018, 0x0018, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    202                   /* 'G' */
    203                   0x0000, 0x0FE0, 0x3FF8, 0x783C, 0x600E, 0xE006, 0xC007, 0x0003,
    204                   0x0003, 0xFE03, 0xFE03, 0xC003, 0xC007, 0xC006, 0xC00E, 0xF03C, 
    205                   0x3FF8, 0x0FE0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    206                   /* 'H' */
    207                   0x0000, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C,
    208                   0x3FFC, 0x3FFC, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 
    209                   0x300C, 0x300C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    210                   /* 'I' */
    211                   0x0000, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
    212                   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 
    213                   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    214                   /* 'J' */
    215                   0x0000, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0600,
    216                   0x0600, 0x0600, 0x0600, 0x0600, 0x0600, 0x0618, 0x0618, 0x0738, 
    217                   0x03F0, 0x01E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    218                   /* 'K' */
    219                   0x0000, 0x3006, 0x1806, 0x0C06, 0x0606, 0x0306, 0x0186, 0x00C6,
    220                   0x0066, 0x0076, 0x00DE, 0x018E, 0x0306, 0x0606, 0x0C06, 0x1806, 
    221                   0x3006, 0x6006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    222                   /* 'L' */
    223                   0x0000, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018,
    224                   0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 
    225                   0x1FF8, 0x1FF8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    226                   /* 'M' */
    227                   0x0000, 0xE00E, 0xF01E, 0xF01E, 0xF01E, 0xD836, 0xD836, 0xD836,
    228                   0xD836, 0xCC66, 0xCC66, 0xCC66, 0xC6C6, 0xC6C6, 0xC6C6, 0xC6C6, 
    229                   0xC386, 0xC386, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    230                   /* 'N' */
    231                   0x0000, 0x300C, 0x301C, 0x303C, 0x303C, 0x306C, 0x306C, 0x30CC,
    232                   0x30CC, 0x318C, 0x330C, 0x330C, 0x360C, 0x360C, 0x3C0C, 0x3C0C, 
    233                   0x380C, 0x300C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    234                   /* 'O' */
    235                   0x0000, 0x07E0, 0x1FF8, 0x381C, 0x700E, 0x6006, 0xC003, 0xC003,
    236                   0xC003, 0xC003, 0xC003, 0xC003, 0xC003, 0x6006, 0x700E, 0x381C, 
    237                   0x1FF8, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    238                   /* 'P' */
    239                   0x0000, 0x0FFC, 0x1FFC, 0x380C, 0x300C, 0x300C, 0x300C, 0x300C,
    240                   0x180C, 0x1FFC, 0x07FC, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 
    241                   0x000C, 0x000C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    242                   /* 'Q' */
    243                   0x0000, 0x07E0, 0x1FF8, 0x381C, 0x700E, 0x6006, 0xE003, 0xC003,
    244                   0xC003, 0xC003, 0xC003, 0xC003, 0xE007, 0x6306, 0x3F0E, 0x3C1C, 
    245                   0x3FF8, 0xF7E0, 0xC000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    246                   /* 'R' */
    247                   0x0000, 0x0FFE, 0x1FFE, 0x3806, 0x3006, 0x3006, 0x3006, 0x3806,
    248                   0x1FFE, 0x07FE, 0x0306, 0x0606, 0x0C06, 0x1806, 0x1806, 0x3006, 
    249                   0x3006, 0x6006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    250                   /* 'S' */
    251                   0x0000, 0x03E0, 0x0FF8, 0x0C1C, 0x180C, 0x180C, 0x000C, 0x001C,
    252                   0x03F8, 0x0FE0, 0x1E00, 0x3800, 0x3006, 0x3006, 0x300E, 0x1C1C, 
    253                   0x0FF8, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    254                   /* 'T' */
    255                   0x0000, 0x7FFE, 0x7FFE, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
    256                   0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 
    257                   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    258                   /* 'U' */
    259                   0x0000, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C,
    260                   0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x300C, 0x1818, 
    261                   0x1FF8, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    262                   /* 'V' */
    263                   0x0000, 0x6003, 0x3006, 0x3006, 0x3006, 0x180C, 0x180C, 0x180C,
    264                   0x0C18, 0x0C18, 0x0E38, 0x0630, 0x0630, 0x0770, 0x0360, 0x0360, 
    265                   0x01C0, 0x01C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    266                   /* 'W' */
    267                   0x0000, 0x6003, 0x61C3, 0x61C3, 0x61C3, 0x3366, 0x3366, 0x3366,
    268                   0x3366, 0x3366, 0x3366, 0x1B6C, 0x1B6C, 0x1B6C, 0x1A2C, 0x1E3C, 
    269                   0x0E38, 0x0E38, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    270                   /* 'X' */
    271                   0x0000, 0xE00F, 0x700C, 0x3018, 0x1830, 0x0C70, 0x0E60, 0x07C0,
    272                   0x0380, 0x0380, 0x03C0, 0x06E0, 0x0C70, 0x1C30, 0x1818, 0x300C, 
    273                   0x600E, 0xE007, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    274                   /* 'Y' */
    275                   0x0000, 0xC003, 0x6006, 0x300C, 0x381C, 0x1838, 0x0C30, 0x0660,
    276                   0x07E0, 0x03C0, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180, 
    277                   0x0180, 0x0180, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    278                   /* 'Z' */
    279                   0x0000, 0x7FFC, 0x7FFC, 0x6000, 0x3000, 0x1800, 0x0C00, 0x0600,
    280                   0x0300, 0x0180, 0x00C0, 0x0060, 0x0030, 0x0018, 0x000C, 0x0006, 
    281                   0x7FFE, 0x7FFE, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    282                   /* '[' */
    283                   0x0000, 0x03E0, 0x03E0, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060,
    284                   0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 
    285                   0x0060, 0x0060, 0x0060, 0x0060, 0x0060, 0x03E0, 0x03E0, 0x0000,
    286                   /* '\' */
    287                   0x0000, 0x0030, 0x0030, 0x0060, 0x0060, 0x0060, 0x00C0, 0x00C0,
    288                   0x00C0, 0x01C0, 0x0180, 0x0180, 0x0180, 0x0300, 0x0300, 0x0300, 
    289                   0x0600, 0x0600, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    290                   /* ']' */
    291                   0x0000, 0x03E0, 0x03E0, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300,
    292                   0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 
    293                   0x0300, 0x0300, 0x0300, 0x0300, 0x0300, 0x03E0, 0x03E0, 0x0000,
    294                   /* '^' */
    295                   /* MODIFIED TO DRAW AN ARROW UP POINTING */
    296                   0x0000, 0x0180, 0x01C0, 0x01C0, 0x03E0, 0x03E0, 0x03E0, 0x07F0,
    297                   0x07F0, 0x0DD8, 0x0DD8, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 
    298                   0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x0000,
    299                   /* '_' */
    300                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    301                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    302                   0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    303                   /* ''' */
    304                   0x0000, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x0000,
    305                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    306                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    307                   /* 'a' */
    308                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03F0, 0x07F8, 
    309                   0x0C1C, 0x0C0C, 0x0F00, 0x0FF0, 0x0CF8, 0x0C0C, 0x0C0C, 0x0F1C, 
    310                   0x0FF8, 0x18F0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    311                   /* 'b' */
    312                   0x0000, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x03D8, 0x0FF8, 
    313                   0x0C38, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x0C38, 
    314                   0x0FF8, 0x03D8, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    315                   /* 'c' */
    316                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03C0, 0x07F0, 
    317                   0x0E30, 0x0C18, 0x0018, 0x0018, 0x0018, 0x0018, 0x0C18, 0x0E30, 
    318                   0x07F0, 0x03C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    319                   /* 'd' */
    320                   0x0000, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1BC0, 0x1FF0, 
    321                   0x1C30, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1C30, 
    322                   0x1FF0, 0x1BC0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    323                   /* 'e' */
    324                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03C0, 0x0FF0, 
    325                   0x0C30, 0x1818, 0x1FF8, 0x1FF8, 0x0018, 0x0018, 0x1838, 0x1C30, 
    326                   0x0FF0, 0x07C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    327                   /* 'f' */
    328                   0x0000, 0x0F80, 0x0FC0, 0x00C0, 0x00C0, 0x00C0, 0x07F0, 0x07F0, 
    329                   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 
    330                   0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    331                   /* 'g' */
    332                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0DE0, 0x0FF8, 
    333                   0x0E18, 0x0C0C, 0x0C0C, 0x0C0C, 0x0C0C, 0x0C0C, 0x0C0C, 0x0E18, 
    334                   0x0FF8, 0x0DE0, 0x0C00, 0x0C0C, 0x061C, 0x07F8, 0x01F0, 0x0000,
    335                   /* 'h' */
    336                   0x0000, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x07D8, 0x0FF8, 
    337                   0x1C38, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 
    338                   0x1818, 0x1818, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    339                   /* 'i' */
    340                   0x0000, 0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x00C0, 0x00C0, 
    341                   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 
    342                   0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    343                   /* 'j' */
    344                   0x0000, 0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x00C0, 0x00C0, 
    345                   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 
    346                   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00F8, 0x0078, 0x0000,
    347                   /* 'k' */
    348                   0x0000, 0x000C, 0x000C, 0x000C, 0x000C, 0x000C, 0x0C0C, 0x060C, 
    349                   0x030C, 0x018C, 0x00CC, 0x006C, 0x00FC, 0x019C, 0x038C, 0x030C, 
    350                   0x060C, 0x0C0C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    351                   /* 'l' */
    352                   0x0000, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 
    353                   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 
    354                   0x00C0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    355                   /* 'm' */
    356                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3C7C, 0x7EFF, 
    357                   0xE3C7, 0xC183, 0xC183, 0xC183, 0xC183, 0xC183, 0xC183, 0xC183, 
    358                   0xC183, 0xC183, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    359                   /* 'n' */
    360                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0798, 0x0FF8, 
    361                   0x1C38, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 
    362                   0x1818, 0x1818, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    363                   /* 'o' */
    364                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03C0, 0x0FF0, 
    365                   0x0C30, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x0C30, 
    366                   0x0FF0, 0x03C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    367                   /* 'p' */
    368                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03D8, 0x0FF8, 
    369                   0x0C38, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x0C38, 
    370                   0x0FF8, 0x03D8, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0000,
    371                   /* 'q' */
    372                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1BC0, 0x1FF0, 
    373                   0x1C30, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1C30, 
    374                   0x1FF0, 0x1BC0, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x0000,
    375                   /* 'r' */
    376                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07B0, 0x03F0, 
    377                   0x0070, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 0x0030, 
    378                   0x0030, 0x0030, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    379                   /* 's' */
    380                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x03E0, 0x03F0, 
    381                   0x0E38, 0x0C18, 0x0038, 0x03F0, 0x07C0, 0x0C00, 0x0C18, 0x0E38, 
    382                   0x07F0, 0x03E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    383                   /* 't' */
    384                   0x0000, 0x0000, 0x0080, 0x00C0, 0x00C0, 0x00C0, 0x07F0, 0x07F0, 
    385                   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 
    386                   0x07C0, 0x0780, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    387                   /* 'u' */
    388                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1818, 0x1818, 
    389                   0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1818, 0x1C38, 
    390                   0x1FF0, 0x19E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    391                   /* 'v' */
    392                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x180C, 0x0C18, 
    393                   0x0C18, 0x0C18, 0x0630, 0x0630, 0x0630, 0x0360, 0x0360, 0x0360, 
    394                   0x01C0, 0x01C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    395                   /* 'w' */
    396                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x41C1, 0x41C1, 
    397                   0x61C3, 0x6363, 0x6363, 0x6363, 0x3636, 0x3636, 0x3636, 0x1C1C, 
    398                   0x1C1C, 0x1C1C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    399                   /* 'x' */
    400                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x381C, 0x1C38, 
    401                   0x0C30, 0x0660, 0x0360, 0x0360, 0x0360, 0x0360, 0x0660, 0x0C30, 
    402                   0x1C38, 0x381C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    403                   /* 'y' */
    404                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x3018, 0x1830, 
    405                   0x1830, 0x1870, 0x0C60, 0x0C60, 0x0CE0, 0x06C0, 0x06C0, 0x0380, 
    406                   0x0380, 0x0380, 0x0180, 0x0180, 0x01C0, 0x00F0, 0x0070, 0x0000,
    407                   /* 'z' */
    408                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x1FFC, 0x1FFC, 
    409                   0x0C00, 0x0600, 0x0300, 0x0180, 0x00C0, 0x0060, 0x0030, 0x0018, 
    410                   0x1FFC, 0x1FFC, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    411                   /* '{' */
    412                   0x0000, 0x0300, 0x0180, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x00C0, 
    413                   0x00C0, 0x0060, 0x0060, 0x0030, 0x0060, 0x0040, 0x00C0, 0x00C0, 
    414                   0x00C0, 0x00C0, 0x00C0, 0x00C0, 0x0180, 0x0300, 0x0000, 0x0000,
    415                   /* '|' */ 
    416                   /* MODIFIED TO DRAW AN ARROW DOWN POINTING */
    417                   0x0000, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 
    418                   0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x01C0, 0x0DD8, 0x0DD8, 0x07F0, 
    419                   0x07F0, 0x03E0, 0x03E0, 0x03E0, 0x01C0, 0x01C0, 0x0180, 0x0000,
    420                   /* '}' */
    421                   0x0000, 0x0060, 0x00C0, 0x01C0, 0x0180, 0x0180, 0x0180, 0x0180, 
    422                   0x0180, 0x0300, 0x0300, 0x0600, 0x0300, 0x0100, 0x0180, 0x0180, 
    423                   0x0180, 0x0180, 0x0180, 0x0180, 0x00C0, 0x0060, 0x0000, 0x0000,
    424                   /* '~' */
    425                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    426                   0x10F0, 0x1FF8, 0x0F08, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    427                   0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    428                };
    429          /* Private macro -------------------------------------------------------------*/
    430          /* Private variables ---------------------------------------------------------*/
    431            /* Global variables to set the written text color */

   \                                 In section .data, align 4
    432          static  vu16 TextColor = 0x0000, BackColor = 0xFFFF;
   \                     TextColor:
   \   00000000   0x0000             DC16 0
   \   00000002   0xFFFF             DC16 65535
   \   00000004   0x00009320         DC32 37664
    433          static vu32 LCDType = LCD_ILI9320;
    434          
    435          /* Private function prototypes -----------------------------------------------*/
    436          static void LCD_WriteRegHX8312(u8 LCD_Reg, u8 LCD_RegValue);
    437          static void LCD_WriteRegILI9320(u8 LCD_Reg, u16 LCD_RegValue);
    438          
    439          /* Private functions ---------------------------------------------------------*/
    440          
    441          /*******************************************************************************
    442          * Function Name  : LCD_Setup
    443          * Description    : Setups the LCD.
    444          * Input          : None
    445          * Output         : None
    446          * Return         : None
    447          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    448          void LCD_Setup(void)
    449          { 
   \                     LCD_Setup:
   \   00000000   0xB580             PUSH     {R7,LR}
    450          /* Configure the LCD Control pins --------------------------------------------*/
    451            LCD_CtrlLinesConfig();
   \   00000002   0x.... 0x....      BL       LCD_CtrlLinesConfig
    452            
    453          /* Configure the SPI2 interface ----------------------------------------------*/
    454            LCD_SPIConfig();
   \   00000006   0x.... 0x....      BL       LCD_SPIConfig
    455          
    456            if(LCDType == LCD_ILI9320)
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable23
   \   0000000E   0x6841             LDR      R1,[R0, #+4]
   \   00000010   0xF249 0x3220      MOVW     R2,#+37664
   \   00000014   0x4291             CMP      R1,R2
   \   00000016   0xF040 0x80FC      BNE.W    ??LCD_Setup_0
    457            {
    458              TB_Wait(100); /* Delay 50 ms */
   \   0000001A   0x2064             MOVS     R0,#+100
   \   0000001C   0x.... 0x....      BL       TB_Wait
    459              /* Start Initial Sequence ------------------------------------------------*/
    460              LCD_WriteReg(R229, 0x8000); /* Set the internal vcore voltage */
   \   00000020   0xF44F 0x4100      MOV      R1,#+32768
   \   00000024   0x20E5             MOVS     R0,#+229
   \   00000026   0x.... 0x....      BL       LCD_WriteReg
    461              LCD_WriteReg(R0,  0x0001); /* Start internal OSC. */
   \   0000002A   0x2101             MOVS     R1,#+1
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       LCD_WriteReg
    462              LCD_WriteReg(R1,  0x0100); /* set SS and SM bit */
   \   00000032   0xF44F 0x7180      MOV      R1,#+256
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       LCD_WriteReg
    463              LCD_WriteReg(R2,  0x0700); /* set 1 line inversion */
   \   0000003C   0xF44F 0x61E0      MOV      R1,#+1792
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0x.... 0x....      BL       LCD_WriteReg
    464              LCD_WriteReg(R3,  0x1030); /* set GRAM write direction and BGR=1. */
   \   00000046   0xF241 0x0130      MOVW     R1,#+4144
   \   0000004A   0x2003             MOVS     R0,#+3
   \   0000004C   0x.... 0x....      BL       LCD_WriteReg
    465              LCD_WriteReg(R4,  0x0000); /* Resize register */
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x2004             MOVS     R0,#+4
   \   00000054   0x.... 0x....      BL       LCD_WriteReg
    466              LCD_WriteReg(R8,  0x0202); /* set the back porch and front porch */
   \   00000058   0xF240 0x2102      MOVW     R1,#+514
   \   0000005C   0x2008             MOVS     R0,#+8
   \   0000005E   0x.... 0x....      BL       LCD_WriteReg
    467              LCD_WriteReg(R9,  0x0000); /* set non-display area refresh cycle ISC[3:0] */
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x2009             MOVS     R0,#+9
   \   00000066   0x.... 0x....      BL       LCD_WriteReg
    468              LCD_WriteReg(R10, 0x0000); /* FMARK function */
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x200A             MOVS     R0,#+10
   \   0000006E   0x.... 0x....      BL       LCD_WriteReg
    469              LCD_WriteReg(R12, 0x0000); /* RGB interface setting */
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0x200C             MOVS     R0,#+12
   \   00000076   0x.... 0x....      BL       LCD_WriteReg
    470              LCD_WriteReg(R13, 0x0000); /* Frame marker Position */
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x200D             MOVS     R0,#+13
   \   0000007E   0x.... 0x....      BL       LCD_WriteReg
    471              LCD_WriteReg(R15, 0x0000); /* RGB interface polarity */
   \   00000082   0x2100             MOVS     R1,#+0
   \   00000084   0x200F             MOVS     R0,#+15
   \   00000086   0x.... 0x....      BL       LCD_WriteReg
    472          
    473              /* Power On sequence -----------------------------------------------------*/
    474              LCD_WriteReg(R16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   0000008A   0x2100             MOVS     R1,#+0
   \   0000008C   0x2010             MOVS     R0,#+16
   \   0000008E   0x.... 0x....      BL       LCD_WriteReg
    475              LCD_WriteReg(R17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0x2011             MOVS     R0,#+17
   \   00000096   0x.... 0x....      BL       LCD_WriteReg
    476              LCD_WriteReg(R18, 0x0000); /* VREG1OUT voltage */
   \   0000009A   0x2100             MOVS     R1,#+0
   \   0000009C   0x2012             MOVS     R0,#+18
   \   0000009E   0x.... 0x....      BL       LCD_WriteReg
    477              LCD_WriteReg(R19, 0x0000); /* VDV[4:0] for VCOM amplitude */
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0x2013             MOVS     R0,#+19
   \   000000A6   0x.... 0x....      BL       LCD_WriteReg
    478              TB_Wait(400);             /* Dis-charge capacitor power voltage (200ms) */
   \   000000AA   0xF44F 0x70C8      MOV      R0,#+400
   \   000000AE   0x.... 0x....      BL       TB_Wait
    479              LCD_WriteReg(R16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   000000B2   0xF241 0x71B0      MOVW     R1,#+6064
   \   000000B6   0x2010             MOVS     R0,#+16
   \   000000B8   0x.... 0x....      BL       LCD_WriteReg
    480              LCD_WriteReg(R17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   000000BC   0xF240 0x1137      MOVW     R1,#+311
   \   000000C0   0x2011             MOVS     R0,#+17
   \   000000C2   0x.... 0x....      BL       LCD_WriteReg
    481              TB_Wait(100);                /* Delay 50 ms */
   \   000000C6   0x2064             MOVS     R0,#+100
   \   000000C8   0x.... 0x....      BL       TB_Wait
    482              LCD_WriteReg(R18, 0x0139); /* VREG1OUT voltage */
   \   000000CC   0xF240 0x1139      MOVW     R1,#+313
   \   000000D0   0x2012             MOVS     R0,#+18
   \   000000D2   0x.... 0x....      BL       LCD_WriteReg
    483              TB_Wait(100);                /* Delay 50 ms */
   \   000000D6   0x2064             MOVS     R0,#+100
   \   000000D8   0x.... 0x....      BL       TB_Wait
    484              LCD_WriteReg(R19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
   \   000000DC   0xF44F 0x51E8      MOV      R1,#+7424
   \   000000E0   0x2013             MOVS     R0,#+19
   \   000000E2   0x.... 0x....      BL       LCD_WriteReg
    485              LCD_WriteReg(R41, 0x0013); /* VCM[4:0] for VCOMH */
   \   000000E6   0x2113             MOVS     R1,#+19
   \   000000E8   0x2029             MOVS     R0,#+41
   \   000000EA   0x.... 0x....      BL       LCD_WriteReg
    486              TB_Wait(100);                /* Delay 50 ms */
   \   000000EE   0x2064             MOVS     R0,#+100
   \   000000F0   0x.... 0x....      BL       TB_Wait
    487              LCD_WriteReg(R32, 0x0000); /* GRAM horizontal Address */
   \   000000F4   0x2100             MOVS     R1,#+0
   \   000000F6   0x2020             MOVS     R0,#+32
   \   000000F8   0x.... 0x....      BL       LCD_WriteReg
    488              LCD_WriteReg(R33, 0x0000); /* GRAM Vertical Address */
   \   000000FC   0x2100             MOVS     R1,#+0
   \   000000FE   0x2021             MOVS     R0,#+33
   \   00000100   0x.... 0x....      BL       LCD_WriteReg
    489          
    490              /* Adjust the Gamma Curve ------------------------------------------------*/
    491              LCD_WriteReg(R48, 0x0006);
   \   00000104   0x2106             MOVS     R1,#+6
   \   00000106   0x2030             MOVS     R0,#+48
   \   00000108   0x.... 0x....      BL       LCD_WriteReg
    492              LCD_WriteReg(R49, 0x0101);
   \   0000010C   0xF240 0x1101      MOVW     R1,#+257
   \   00000110   0x2031             MOVS     R0,#+49
   \   00000112   0x.... 0x....      BL       LCD_WriteReg
    493              LCD_WriteReg(R50, 0x0003);
   \   00000116   0x2103             MOVS     R1,#+3
   \   00000118   0x2032             MOVS     R0,#+50
   \   0000011A   0x.... 0x....      BL       LCD_WriteReg
    494              LCD_WriteReg(R53, 0x0106);
   \   0000011E   0xF44F 0x7183      MOV      R1,#+262
   \   00000122   0x2035             MOVS     R0,#+53
   \   00000124   0x.... 0x....      BL       LCD_WriteReg
    495              LCD_WriteReg(R54, 0x0b02);
   \   00000128   0xF640 0x3102      MOVW     R1,#+2818
   \   0000012C   0x2036             MOVS     R0,#+54
   \   0000012E   0x.... 0x....      BL       LCD_WriteReg
    496              LCD_WriteReg(R55, 0x0302);
   \   00000132   0xF240 0x3102      MOVW     R1,#+770
   \   00000136   0x2037             MOVS     R0,#+55
   \   00000138   0x.... 0x....      BL       LCD_WriteReg
    497              LCD_WriteReg(R56, 0x0707);
   \   0000013C   0xF240 0x7107      MOVW     R1,#+1799
   \   00000140   0x2038             MOVS     R0,#+56
   \   00000142   0x.... 0x....      BL       LCD_WriteReg
    498              LCD_WriteReg(R57, 0x0007);
   \   00000146   0x2107             MOVS     R1,#+7
   \   00000148   0x2039             MOVS     R0,#+57
   \   0000014A   0x.... 0x....      BL       LCD_WriteReg
    499              LCD_WriteReg(R60, 0x0600);
   \   0000014E   0xF44F 0x61C0      MOV      R1,#+1536
   \   00000152   0x203C             MOVS     R0,#+60
   \   00000154   0x.... 0x....      BL       LCD_WriteReg
    500              LCD_WriteReg(R61, 0x020b);
   \   00000158   0xF240 0x210B      MOVW     R1,#+523
   \   0000015C   0x203D             MOVS     R0,#+61
   \   0000015E   0x.... 0x....      BL       LCD_WriteReg
    501            
    502              /* Set GRAM area ---------------------------------------------------------*/
    503              LCD_WriteReg(R80, 0x0000); /* Horizontal GRAM Start Address */
   \   00000162   0x2100             MOVS     R1,#+0
   \   00000164   0x2050             MOVS     R0,#+80
   \   00000166   0x.... 0x....      BL       LCD_WriteReg
    504              LCD_WriteReg(R81, 0x00EF); /* Horizontal GRAM End Address */
   \   0000016A   0x21EF             MOVS     R1,#+239
   \   0000016C   0x2051             MOVS     R0,#+81
   \   0000016E   0x.... 0x....      BL       LCD_WriteReg
    505              LCD_WriteReg(R82, 0x0000); /* Vertical GRAM Start Address */
   \   00000172   0x2100             MOVS     R1,#+0
   \   00000174   0x2052             MOVS     R0,#+82
   \   00000176   0x.... 0x....      BL       LCD_WriteReg
    506              LCD_WriteReg(R83, 0x013F); /* Vertical GRAM End Address */
   \   0000017A   0xF240 0x113F      MOVW     R1,#+319
   \   0000017E   0x2053             MOVS     R0,#+83
   \   00000180   0x.... 0x....      BL       LCD_WriteReg
    507          
    508              LCD_WriteReg(R96,  0x2700); /* Gate Scan Line */
   \   00000184   0xF44F 0x511C      MOV      R1,#+9984
   \   00000188   0x2060             MOVS     R0,#+96
   \   0000018A   0x.... 0x....      BL       LCD_WriteReg
    509              LCD_WriteReg(R97,  0x0001); /* NDL,VLE, REV */
   \   0000018E   0x2101             MOVS     R1,#+1
   \   00000190   0x2061             MOVS     R0,#+97
   \   00000192   0x.... 0x....      BL       LCD_WriteReg
    510              LCD_WriteReg(R106, 0x0000); /* set scrolling line */
   \   00000196   0x2100             MOVS     R1,#+0
   \   00000198   0x206A             MOVS     R0,#+106
   \   0000019A   0x.... 0x....      BL       LCD_WriteReg
    511          
    512              /* Partial Display Control -----------------------------------------------*/
    513              LCD_WriteReg(R128, 0x0000);
   \   0000019E   0x2100             MOVS     R1,#+0
   \   000001A0   0x2080             MOVS     R0,#+128
   \   000001A2   0x.... 0x....      BL       LCD_WriteReg
    514              LCD_WriteReg(R129, 0x0000);
   \   000001A6   0x2100             MOVS     R1,#+0
   \   000001A8   0x2081             MOVS     R0,#+129
   \   000001AA   0x.... 0x....      BL       LCD_WriteReg
    515              LCD_WriteReg(R130, 0x0000);
   \   000001AE   0x2100             MOVS     R1,#+0
   \   000001B0   0x2082             MOVS     R0,#+130
   \   000001B2   0x.... 0x....      BL       LCD_WriteReg
    516              LCD_WriteReg(R131, 0x0000);
   \   000001B6   0x2100             MOVS     R1,#+0
   \   000001B8   0x2083             MOVS     R0,#+131
   \   000001BA   0x.... 0x....      BL       LCD_WriteReg
    517              LCD_WriteReg(R132, 0x0000);
   \   000001BE   0x2100             MOVS     R1,#+0
   \   000001C0   0x2084             MOVS     R0,#+132
   \   000001C2   0x.... 0x....      BL       LCD_WriteReg
    518              LCD_WriteReg(R133, 0x0000);
   \   000001C6   0x2100             MOVS     R1,#+0
   \   000001C8   0x2085             MOVS     R0,#+133
   \   000001CA   0x.... 0x....      BL       LCD_WriteReg
    519          
    520              /* Panel Control ---------------------------------------------------------*/
    521              LCD_WriteReg(R144, 0x0010);
   \   000001CE   0x2110             MOVS     R1,#+16
   \   000001D0   0x2090             MOVS     R0,#+144
   \   000001D2   0x.... 0x....      BL       LCD_WriteReg
    522              LCD_WriteReg(R146, 0x0000);
   \   000001D6   0x2100             MOVS     R1,#+0
   \   000001D8   0x2092             MOVS     R0,#+146
   \   000001DA   0x.... 0x....      BL       LCD_WriteReg
    523              LCD_WriteReg(R147, 0x0003);
   \   000001DE   0x2103             MOVS     R1,#+3
   \   000001E0   0x2093             MOVS     R0,#+147
   \   000001E2   0x.... 0x....      BL       LCD_WriteReg
    524              LCD_WriteReg(R149, 0x0110);
   \   000001E6   0xF44F 0x7188      MOV      R1,#+272
   \   000001EA   0x2095             MOVS     R0,#+149
   \   000001EC   0x.... 0x....      BL       LCD_WriteReg
    525              LCD_WriteReg(R151, 0x0000);
   \   000001F0   0x2100             MOVS     R1,#+0
   \   000001F2   0x2097             MOVS     R0,#+151
   \   000001F4   0x.... 0x....      BL       LCD_WriteReg
    526              LCD_WriteReg(R152, 0x0000);
   \   000001F8   0x2100             MOVS     R1,#+0
   \   000001FA   0x2098             MOVS     R0,#+152
   \   000001FC   0x.... 0x....      BL       LCD_WriteReg
    527          
    528              /* Set GRAM write direction and BGR = 1 */
    529              /* I/D=01 (Horizontal : increment, Vertical : decrement) */
    530              /* AM=1 (address is updated in vertical writing direction) */
    531              LCD_WriteReg(R3, 0x1018);
   \   00000200   0xF241 0x0118      MOVW     R1,#+4120
   \   00000204   0x2003             MOVS     R0,#+3
   \   00000206   0x.... 0x....      BL       LCD_WriteReg
    532          
    533              LCD_WriteReg(R7, 0x0173); /* 262K color and display ON */
   \   0000020A   0xF240 0x1173      MOVW     R1,#+371
   \   0000020E   0x2007             MOVS     R0,#+7
   \   00000210   0x....             B.N      ?Subroutine0
    534            }
    535            else if(LCDType == LCD_HX8312)
   \                     ??LCD_Setup_0:
   \   00000212   0x6840             LDR      R0,[R0, #+4]
   \   00000214   0xF248 0x3112      MOVW     R1,#+33554
   \   00000218   0x4288             CMP      R0,R1
   \   0000021A   0xF040 0x8159      BNE.W    ??LCD_Setup_1
    536            {
    537              /* Enable the LCD Oscillator ---------------------------------------------*/
    538              LCD_WriteReg(R1, 0x10);
   \   0000021E   0x2110             MOVS     R1,#+16
   \   00000220   0x2001             MOVS     R0,#+1
   \   00000222   0x.... 0x....      BL       LCD_WriteReg
    539              LCD_WriteReg(R0, 0xA0);
   \   00000226   0x21A0             MOVS     R1,#+160
   \   00000228   0x2000             MOVS     R0,#+0
   \   0000022A   0x.... 0x....      BL       LCD_WriteReg
    540              LCD_WriteReg(R3, 0x01);
   \   0000022E   0x2101             MOVS     R1,#+1
   \   00000230   0x2003             MOVS     R0,#+3
   \   00000232   0x.... 0x....      BL       LCD_WriteReg
    541              TB_Wait(20); /* Delay 10 ms */
   \   00000236   0x2014             MOVS     R0,#+20
   \   00000238   0x.... 0x....      BL       TB_Wait
    542              LCD_WriteReg(R3, 0x00);
   \   0000023C   0x2100             MOVS     R1,#+0
   \   0000023E   0x2003             MOVS     R0,#+3
   \   00000240   0x.... 0x....      BL       LCD_WriteReg
    543              LCD_WriteReg(R43, 0x04);
   \   00000244   0x2104             MOVS     R1,#+4
   \   00000246   0x202B             MOVS     R0,#+43
   \   00000248   0x.... 0x....      BL       LCD_WriteReg
    544            
    545              LCD_WriteReg(R40, 0x18);
   \   0000024C   0x2118             MOVS     R1,#+24
   \   0000024E   0x2028             MOVS     R0,#+40
   \   00000250   0x.... 0x....      BL       LCD_WriteReg
    546              LCD_WriteReg(R26, 0x05);
   \   00000254   0x2105             MOVS     R1,#+5
   \   00000256   0x201A             MOVS     R0,#+26
   \   00000258   0x.... 0x....      BL       LCD_WriteReg
    547              LCD_WriteReg(R37, 0x05);
   \   0000025C   0x2105             MOVS     R1,#+5
   \   0000025E   0x2025             MOVS     R0,#+37
   \   00000260   0x.... 0x....      BL       LCD_WriteReg
    548              LCD_WriteReg(R25, 0x00);
   \   00000264   0x2100             MOVS     R1,#+0
   \   00000266   0x2019             MOVS     R0,#+25
   \   00000268   0x.... 0x....      BL       LCD_WriteReg
    549              
    550          /* LCD Power On --------------------------------------------------------------*/
    551              LCD_WriteReg(R28, 0x73);
   \   0000026C   0x2173             MOVS     R1,#+115
   \   0000026E   0x201C             MOVS     R0,#+28
   \   00000270   0x.... 0x....      BL       LCD_WriteReg
    552              LCD_WriteReg(R36, 0x74);
   \   00000274   0x2174             MOVS     R1,#+116
   \   00000276   0x2024             MOVS     R0,#+36
   \   00000278   0x.... 0x....      BL       LCD_WriteReg
    553              LCD_WriteReg(R30, 0x01);
   \   0000027C   0x2101             MOVS     R1,#+1
   \   0000027E   0x201E             MOVS     R0,#+30
   \   00000280   0x.... 0x....      BL       LCD_WriteReg
    554              LCD_WriteReg(R24, 0xC1);
   \   00000284   0x21C1             MOVS     R1,#+193
   \   00000286   0x2018             MOVS     R0,#+24
   \   00000288   0x.... 0x....      BL       LCD_WriteReg
    555              TB_Wait(20); /* Delay 10 ms */
   \   0000028C   0x2014             MOVS     R0,#+20
   \   0000028E   0x.... 0x....      BL       TB_Wait
    556              LCD_WriteReg(R24, 0xE1);
   \   00000292   0x21E1             MOVS     R1,#+225
   \   00000294   0x2018             MOVS     R0,#+24
   \   00000296   0x.... 0x....      BL       LCD_WriteReg
    557              LCD_WriteReg(R24, 0xF1);
   \   0000029A   0x21F1             MOVS     R1,#+241
   \   0000029C   0x2018             MOVS     R0,#+24
   \   0000029E   0x.... 0x....      BL       LCD_WriteReg
    558              TB_Wait(120); /* Delay 60 ms */
   \   000002A2   0x2078             MOVS     R0,#+120
   \   000002A4   0x.... 0x....      BL       TB_Wait
    559              LCD_WriteReg(R24, 0xF5);
   \   000002A8   0x21F5             MOVS     R1,#+245
   \   000002AA   0x2018             MOVS     R0,#+24
   \   000002AC   0x.... 0x....      BL       LCD_WriteReg
    560              TB_Wait(120); /* Delay 60 ms */
   \   000002B0   0x2078             MOVS     R0,#+120
   \   000002B2   0x.... 0x....      BL       TB_Wait
    561              LCD_WriteReg(R27, 0x09);
   \   000002B6   0x2109             MOVS     R1,#+9
   \   000002B8   0x201B             MOVS     R0,#+27
   \   000002BA   0x.... 0x....      BL       LCD_WriteReg
    562              TB_Wait(620); /* Delay 10 ms */
   \   000002BE   0xF44F 0x701B      MOV      R0,#+620
   \   000002C2   0x.... 0x....      BL       TB_Wait
    563              LCD_WriteReg(R31, 0x11);
   \   000002C6   0x2111             MOVS     R1,#+17
   \   000002C8   0x201F             MOVS     R0,#+31
   \   000002CA   0x.... 0x....      BL       LCD_WriteReg
    564              LCD_WriteReg(R32, 0x0E);
   \   000002CE   0x210E             MOVS     R1,#+14
   \   000002D0   0x2020             MOVS     R0,#+32
   \   000002D2   0x.... 0x....      BL       LCD_WriteReg
    565              LCD_WriteReg(R30, 0x81);
   \   000002D6   0x2181             MOVS     R1,#+129
   \   000002D8   0x201E             MOVS     R0,#+30
   \   000002DA   0x.... 0x....      BL       LCD_WriteReg
    566              TB_Wait(20); /* Delay 10 ms */
   \   000002DE   0x2014             MOVS     R0,#+20
   \   000002E0   0x.... 0x....      BL       TB_Wait
    567              
    568              /* Chip Set --------------------------------------------------------------*/
    569              LCD_WriteReg(R157, 0x00);
   \   000002E4   0x2100             MOVS     R1,#+0
   \   000002E6   0x209D             MOVS     R0,#+157
   \   000002E8   0x.... 0x....      BL       LCD_WriteReg
    570              LCD_WriteReg(R192, 0x00);
   \   000002EC   0x2100             MOVS     R1,#+0
   \   000002EE   0x20C0             MOVS     R0,#+192
   \   000002F0   0x.... 0x....      BL       LCD_WriteReg
    571             
    572              LCD_WriteReg(R14, 0x00);
   \   000002F4   0x2100             MOVS     R1,#+0
   \   000002F6   0x200E             MOVS     R0,#+14
   \   000002F8   0x.... 0x....      BL       LCD_WriteReg
    573              LCD_WriteReg(R15, 0x00);
   \   000002FC   0x2100             MOVS     R1,#+0
   \   000002FE   0x200F             MOVS     R0,#+15
   \   00000300   0x.... 0x....      BL       LCD_WriteReg
    574              LCD_WriteReg(R16, 0x00);
   \   00000304   0x2100             MOVS     R1,#+0
   \   00000306   0x2010             MOVS     R0,#+16
   \   00000308   0x.... 0x....      BL       LCD_WriteReg
    575              LCD_WriteReg(R17, 0x00);
   \   0000030C   0x2100             MOVS     R1,#+0
   \   0000030E   0x2011             MOVS     R0,#+17
   \   00000310   0x.... 0x....      BL       LCD_WriteReg
    576              LCD_WriteReg(R18, 0x00);
   \   00000314   0x2100             MOVS     R1,#+0
   \   00000316   0x2012             MOVS     R0,#+18
   \   00000318   0x.... 0x....      BL       LCD_WriteReg
    577              LCD_WriteReg(R19, 0x00);
   \   0000031C   0x2100             MOVS     R1,#+0
   \   0000031E   0x2013             MOVS     R0,#+19
   \   00000320   0x.... 0x....      BL       LCD_WriteReg
    578              LCD_WriteReg(R20, 0x00);
   \   00000324   0x2100             MOVS     R1,#+0
   \   00000326   0x2014             MOVS     R0,#+20
   \   00000328   0x.... 0x....      BL       LCD_WriteReg
    579              LCD_WriteReg(R21, 0x00);
   \   0000032C   0x2100             MOVS     R1,#+0
   \   0000032E   0x2015             MOVS     R0,#+21
   \   00000330   0x.... 0x....      BL       LCD_WriteReg
    580              LCD_WriteReg(R22, 0x00);
   \   00000334   0x2100             MOVS     R1,#+0
   \   00000336   0x2016             MOVS     R0,#+22
   \   00000338   0x.... 0x....      BL       LCD_WriteReg
    581              LCD_WriteReg(R23, 0x00);
   \   0000033C   0x2100             MOVS     R1,#+0
   \   0000033E   0x2017             MOVS     R0,#+23
   \   00000340   0x.... 0x....      BL       LCD_WriteReg
    582             
    583              LCD_WriteReg(R52, 0x01);
   \   00000344   0x2101             MOVS     R1,#+1
   \   00000346   0x2034             MOVS     R0,#+52
   \   00000348   0x.... 0x....      BL       LCD_WriteReg
    584              LCD_WriteReg(R53, 0x00);
   \   0000034C   0x2100             MOVS     R1,#+0
   \   0000034E   0x2035             MOVS     R0,#+53
   \   00000350   0x.... 0x....      BL       LCD_WriteReg
    585          
    586              LCD_WriteReg(R75, 0x00);
   \   00000354   0x2100             MOVS     R1,#+0
   \   00000356   0x204B             MOVS     R0,#+75
   \   00000358   0x.... 0x....      BL       LCD_WriteReg
    587              LCD_WriteReg(R76, 0x00);
   \   0000035C   0x2100             MOVS     R1,#+0
   \   0000035E   0x204C             MOVS     R0,#+76
   \   00000360   0x.... 0x....      BL       LCD_WriteReg
    588              LCD_WriteReg(R78, 0x00);
   \   00000364   0x2100             MOVS     R1,#+0
   \   00000366   0x204E             MOVS     R0,#+78
   \   00000368   0x.... 0x....      BL       LCD_WriteReg
    589              LCD_WriteReg(R79, 0x00);
   \   0000036C   0x2100             MOVS     R1,#+0
   \   0000036E   0x204F             MOVS     R0,#+79
   \   00000370   0x.... 0x....      BL       LCD_WriteReg
    590              LCD_WriteReg(R80, 0x00);
   \   00000374   0x2100             MOVS     R1,#+0
   \   00000376   0x2050             MOVS     R0,#+80
   \   00000378   0x.... 0x....      BL       LCD_WriteReg
    591            
    592              LCD_WriteReg(R60, 0x00);
   \   0000037C   0x2100             MOVS     R1,#+0
   \   0000037E   0x203C             MOVS     R0,#+60
   \   00000380   0x.... 0x....      BL       LCD_WriteReg
    593              LCD_WriteReg(R61, 0x00);
   \   00000384   0x2100             MOVS     R1,#+0
   \   00000386   0x203D             MOVS     R0,#+61
   \   00000388   0x.... 0x....      BL       LCD_WriteReg
    594              LCD_WriteReg(R62, 0x01);
   \   0000038C   0x2101             MOVS     R1,#+1
   \   0000038E   0x203E             MOVS     R0,#+62
   \   00000390   0x.... 0x....      BL       LCD_WriteReg
    595              LCD_WriteReg(R63, 0x3F);
   \   00000394   0x213F             MOVS     R1,#+63
   \   00000396   0x203F             MOVS     R0,#+63
   \   00000398   0x.... 0x....      BL       LCD_WriteReg
    596              LCD_WriteReg(R64, 0x02);
   \   0000039C   0x2102             MOVS     R1,#+2
   \   0000039E   0x2040             MOVS     R0,#+64
   \   000003A0   0x.... 0x....      BL       LCD_WriteReg
    597              LCD_WriteReg(R65, 0x02);
   \   000003A4   0x2102             MOVS     R1,#+2
   \   000003A6   0x2041             MOVS     R0,#+65
   \   000003A8   0x.... 0x....      BL       LCD_WriteReg
    598              LCD_WriteReg(R66, 0x00);
   \   000003AC   0x2100             MOVS     R1,#+0
   \   000003AE   0x2042             MOVS     R0,#+66
   \   000003B0   0x.... 0x....      BL       LCD_WriteReg
    599              LCD_WriteReg(R67, 0x00);
   \   000003B4   0x2100             MOVS     R1,#+0
   \   000003B6   0x2043             MOVS     R0,#+67
   \   000003B8   0x.... 0x....      BL       LCD_WriteReg
    600              LCD_WriteReg(R68, 0x00);
   \   000003BC   0x2100             MOVS     R1,#+0
   \   000003BE   0x2044             MOVS     R0,#+68
   \   000003C0   0x.... 0x....      BL       LCD_WriteReg
    601              LCD_WriteReg(R69, 0x00);
   \   000003C4   0x2100             MOVS     R1,#+0
   \   000003C6   0x2045             MOVS     R0,#+69
   \   000003C8   0x.... 0x....      BL       LCD_WriteReg
    602              LCD_WriteReg(R70, 0xEF);
   \   000003CC   0x21EF             MOVS     R1,#+239
   \   000003CE   0x2046             MOVS     R0,#+70
   \   000003D0   0x.... 0x....      BL       LCD_WriteReg
    603              LCD_WriteReg(R71, 0x00);
   \   000003D4   0x2100             MOVS     R1,#+0
   \   000003D6   0x2047             MOVS     R0,#+71
   \   000003D8   0x.... 0x....      BL       LCD_WriteReg
    604              LCD_WriteReg(R72, 0x00);
   \   000003DC   0x2100             MOVS     R1,#+0
   \   000003DE   0x2048             MOVS     R0,#+72
   \   000003E0   0x.... 0x....      BL       LCD_WriteReg
    605              LCD_WriteReg(R73, 0x01);
   \   000003E4   0x2101             MOVS     R1,#+1
   \   000003E6   0x2049             MOVS     R0,#+73
   \   000003E8   0x.... 0x....      BL       LCD_WriteReg
    606              LCD_WriteReg(R74, 0x3F);
   \   000003EC   0x213F             MOVS     R1,#+63
   \   000003EE   0x204A             MOVS     R0,#+74
   \   000003F0   0x.... 0x....      BL       LCD_WriteReg
    607            
    608              LCD_WriteReg(R29, 0x08);  /* R29:Gate scan direction setting */
   \   000003F4   0x2108             MOVS     R1,#+8
   \   000003F6   0x201D             MOVS     R0,#+29
   \   000003F8   0x.... 0x....      BL       LCD_WriteReg
    609            
    610              LCD_WriteReg(R134, 0x00);
   \   000003FC   0x2100             MOVS     R1,#+0
   \   000003FE   0x2086             MOVS     R0,#+134
   \   00000400   0x.... 0x....      BL       LCD_WriteReg
    611              LCD_WriteReg(R135, 0x30);
   \   00000404   0x2130             MOVS     R1,#+48
   \   00000406   0x2087             MOVS     R0,#+135
   \   00000408   0x.... 0x....      BL       LCD_WriteReg
    612              LCD_WriteReg(R136, 0x02);
   \   0000040C   0x2102             MOVS     R1,#+2
   \   0000040E   0x2088             MOVS     R0,#+136
   \   00000410   0x.... 0x....      BL       LCD_WriteReg
    613              LCD_WriteReg(R137, 0x05);
   \   00000414   0x2105             MOVS     R1,#+5
   \   00000416   0x2089             MOVS     R0,#+137
   \   00000418   0x.... 0x....      BL       LCD_WriteReg
    614            
    615              LCD_WriteReg(R141, 0x01);  /* R141:Register set-up mode for one line clock */
   \   0000041C   0x2101             MOVS     R1,#+1
   \   0000041E   0x208D             MOVS     R0,#+141
   \   00000420   0x.... 0x....      BL       LCD_WriteReg
    616              LCD_WriteReg(R139, 0x20);  /* R139:One line SYSCLK number in one-line */
   \   00000424   0x2120             MOVS     R1,#+32
   \   00000426   0x208B             MOVS     R0,#+139
   \   00000428   0x.... 0x....      BL       LCD_WriteReg
    617              LCD_WriteReg(R51, 0x01);  /* R51:N line inversion setting */
   \   0000042C   0x2101             MOVS     R1,#+1
   \   0000042E   0x2033             MOVS     R0,#+51
   \   00000430   0x.... 0x....      BL       LCD_WriteReg
    618              LCD_WriteReg(R55, 0x01);  /* R55:Scanning method setting */
   \   00000434   0x2101             MOVS     R1,#+1
   \   00000436   0x2037             MOVS     R0,#+55
   \   00000438   0x.... 0x....      BL       LCD_WriteReg
    619              LCD_WriteReg(R118, 0x00);
   \   0000043C   0x2100             MOVS     R1,#+0
   \   0000043E   0x2076             MOVS     R0,#+118
   \   00000440   0x.... 0x....      BL       LCD_WriteReg
    620             
    621              /* Gamma Set -------------------------------------------------------------*/
    622              LCD_WriteReg(R143, 0x10);
   \   00000444   0x2110             MOVS     R1,#+16
   \   00000446   0x208F             MOVS     R0,#+143
   \   00000448   0x.... 0x....      BL       LCD_WriteReg
    623              LCD_WriteReg(R144, 0x67);
   \   0000044C   0x2167             MOVS     R1,#+103
   \   0000044E   0x2090             MOVS     R0,#+144
   \   00000450   0x.... 0x....      BL       LCD_WriteReg
    624              LCD_WriteReg(R145, 0x07);
   \   00000454   0x2107             MOVS     R1,#+7
   \   00000456   0x2091             MOVS     R0,#+145
   \   00000458   0x.... 0x....      BL       LCD_WriteReg
    625              LCD_WriteReg(R146, 0x65);
   \   0000045C   0x2165             MOVS     R1,#+101
   \   0000045E   0x2092             MOVS     R0,#+146
   \   00000460   0x.... 0x....      BL       LCD_WriteReg
    626              LCD_WriteReg(R147, 0x07);
   \   00000464   0x2107             MOVS     R1,#+7
   \   00000466   0x2093             MOVS     R0,#+147
   \   00000468   0x.... 0x....      BL       LCD_WriteReg
    627              LCD_WriteReg(R148, 0x01);
   \   0000046C   0x2101             MOVS     R1,#+1
   \   0000046E   0x2094             MOVS     R0,#+148
   \   00000470   0x.... 0x....      BL       LCD_WriteReg
    628              LCD_WriteReg(R149, 0x76);
   \   00000474   0x2176             MOVS     R1,#+118
   \   00000476   0x2095             MOVS     R0,#+149
   \   00000478   0x.... 0x....      BL       LCD_WriteReg
    629              LCD_WriteReg(R150, 0x56);
   \   0000047C   0x2156             MOVS     R1,#+86
   \   0000047E   0x2096             MOVS     R0,#+150
   \   00000480   0x.... 0x....      BL       LCD_WriteReg
    630              LCD_WriteReg(R151, 0x00);
   \   00000484   0x2100             MOVS     R1,#+0
   \   00000486   0x2097             MOVS     R0,#+151
   \   00000488   0x.... 0x....      BL       LCD_WriteReg
    631              LCD_WriteReg(R152, 0x06);
   \   0000048C   0x2106             MOVS     R1,#+6
   \   0000048E   0x2098             MOVS     R0,#+152
   \   00000490   0x.... 0x....      BL       LCD_WriteReg
    632              LCD_WriteReg(R153, 0x03);
   \   00000494   0x2103             MOVS     R1,#+3
   \   00000496   0x2099             MOVS     R0,#+153
   \   00000498   0x.... 0x....      BL       LCD_WriteReg
    633              LCD_WriteReg(R154, 0x00);
   \   0000049C   0x2100             MOVS     R1,#+0
   \   0000049E   0x209A             MOVS     R0,#+154
   \   000004A0   0x.... 0x....      BL       LCD_WriteReg
    634            
    635              /* Display On ------------------------------------------------------------*/
    636              LCD_WriteReg(R1, 0x50);
   \   000004A4   0x2150             MOVS     R1,#+80
   \   000004A6   0x2001             MOVS     R0,#+1
   \   000004A8   0x.... 0x....      BL       LCD_WriteReg
    637              LCD_WriteReg(R5, 0x04);
   \   000004AC   0x2104             MOVS     R1,#+4
   \   000004AE   0x2005             MOVS     R0,#+5
   \   000004B0   0x.... 0x....      BL       LCD_WriteReg
    638          
    639              LCD_WriteReg(R0, 0x80);
   \   000004B4   0x2180             MOVS     R1,#+128
   \   000004B6   0x2000             MOVS     R0,#+0
   \   000004B8   0x.... 0x....      BL       LCD_WriteReg
    640              LCD_WriteReg(R59, 0x01);
   \   000004BC   0x2101             MOVS     R1,#+1
   \   000004BE   0x203B             MOVS     R0,#+59
   \   000004C0   0x.... 0x....      BL       LCD_WriteReg
    641              TB_Wait(80);  /* Delay 40 ms */
   \   000004C4   0x2050             MOVS     R0,#+80
   \   000004C6   0x.... 0x....      BL       TB_Wait
    642              LCD_WriteReg(R0, 0x20);
   \   000004CA   0x2120             MOVS     R1,#+32
   \   000004CC   0x2000             MOVS     R0,#+0
   \   000004CE   0x....             B.N      ?Subroutine0
    643            }  
    644          }
   \                     ??LCD_Setup_1:
   \   000004D0   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xE8BD 0x4004      POP      {R2,LR}
   \   00000004   0x....             B.N      LCD_WriteReg
    645          
    646          /*******************************************************************************
    647          * Function Name  : LCD_Init
    648          * Description    : Initializes the LCD.
    649          * Input          : None
    650          * Output         : None
    651          * Return         : None
    652          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    653          void LCD_Init(void)
    654          {
   \                     LCD_Init:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    655            /* Setups the LCD */
    656            LCD_Setup();
   \   00000002   0x.... 0x....      BL       LCD_Setup
    657          
    658            /* Try to read new LCD controller ID 0x9320 */
    659            if (LCD_ReadReg(R0) == LCD_ILI9320)
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable23
   \   0000000A   0xF249 0x3520      MOVW     R5,#+37664
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       LCD_ReadReg
   \   00000014   0x42A8             CMP      R0,R5
   \   00000016   0xD101             BNE.N    ??LCD_Init_0
    660            {
    661              LCDType = LCD_ILI9320;
   \   00000018   0x6065             STR      R5,[R4, #+4]
   \   0000001A   0xBD31             POP      {R0,R4,R5,PC}
    662            }
    663            else
    664            {
    665              LCDType = LCD_HX8312;
   \                     ??LCD_Init_0:
   \   0000001C   0xF248 0x3012      MOVW     R0,#+33554
   \   00000020   0x6060             STR      R0,[R4, #+4]
    666              /* Setups the LCD */
    667              LCD_Setup();
   \   00000022   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   00000026   0x....             B.N      LCD_Setup
    668            } 
    669          }
    670          
    671          /*******************************************************************************
    672          * Function Name  : LCD_SetTextColor
    673          * Description    : Sets the Text color.
    674          * Input          : - Color: specifies the Text color code RGB(5-6-5).
    675          * Output         : - TextColor: Text color global variable used by LCD_DrawChar
    676          *                  and LCD_DrawPicture functions.
    677          * Return         : None
    678          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    679          void LCD_SetTextColor(vu16 Color)
    680          {
   \                     LCD_SetTextColor:
   \   00000000   0xB401             PUSH     {R0}
    681            TextColor = Color;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable25
   \   00000006   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000000A   0x8001             STRH     R1,[R0, #+0]
    682          }
   \   0000000C   0xB001             ADD      SP,SP,#+4
   \   0000000E   0x4770             BX       LR               ;; return
    683          
    684          /*******************************************************************************
    685          * Function Name  : LCD_SetBackColor
    686          * Description    : Sets the Background color.
    687          * Input          : - Color: specifies the Background color code RGB(5-6-5).
    688          * Output         : - BackColor: Background color global variable used by 
    689          *                  LCD_DrawChar and LCD_DrawPicture functions.
    690          * Return         : None
    691          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    692          void LCD_SetBackColor(vu16 Color)
    693          {
   \                     LCD_SetBackColor:
   \   00000000   0xB401             PUSH     {R0}
    694            BackColor = Color;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable25
   \   00000006   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000000A   0x8041             STRH     R1,[R0, #+2]
    695          }
   \   0000000C   0xB001             ADD      SP,SP,#+4
   \   0000000E   0x4770             BX       LR               ;; return
    696          
    697          /*******************************************************************************
    698          * Function Name  : LCD_ClearLine
    699          * Description    : Clears the selected line.
    700          * Input          : - Line: the Line to be cleared.
    701          *                    This parameter can be one of the following values:
    702          *                       - Linex: where x can be 0..9
    703          * Output         : None
    704          * Return         : None
    705          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    706          void LCD_ClearLine(u8 Line)
    707          {
    708            LCD_DisplayStringLine(Line, "                    ");
   \                     LCD_ClearLine:
   \   00000000   0x.... 0x....      ADR.W    R1,`?<Constant "                    ">`
   \   00000004   0x....             B.N      LCD_DisplayStringLine
    709          }
    710          
    711          /*******************************************************************************
    712          * Function Name  : LCD_Clear
    713          * Description    : Clears the hole LCD.
    714          * Input          : Color: the color of the background.
    715          * Output         : None
    716          * Return         : None
    717          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    718          void LCD_Clear(u16 Color)
    719          {
   \                     LCD_Clear:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
    720            u32 index = 0;
   \   00000004   0x2500             MOVS     R5,#+0
    721            
    722            LCD_SetCursor(0x00, 0x013F); 
   \   00000006   0xF240 0x113F      MOVW     R1,#+319
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x.... 0x....      BL       LCD_SetCursor
    723          
    724            if(LCDType == LCD_ILI9320)
   \   00000010   0xF249 0x3620      MOVW     R6,#+37664
   \   00000014   0x.... 0x....      LDR.W    R7,??DataTable25
   \   00000018   0x6878             LDR      R0,[R7, #+4]
   \   0000001A   0x42B0             CMP      R0,R6
   \   0000001C   0xBF08             IT       EQ 
   \   0000001E   0x.... 0x....      BLEQ     LCD_WriteRAM_Prepare
    725            {
    726              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    727            }
    728          
    729            for(index = 0; index < 76800; index++)
    730            {
    731              LCD_WriteRAM(Color);
   \                     ??LCD_Clear_0:
   \   00000022   0x4620             MOV      R0,R4
   \   00000024   0x.... 0x....      BL       LCD_WriteRAM
    732            }
   \   00000028   0x1C6D             ADDS     R5,R5,#+1
   \   0000002A   0xF5B5 0x3F96      CMP      R5,#+76800
   \   0000002E   0xD3F8             BCC.N    ??LCD_Clear_0
    733          
    734            if(LCDType == LCD_ILI9320)
   \   00000030   0x6878             LDR      R0,[R7, #+4]
   \   00000032   0x42B0             CMP      R0,R6
   \   00000034   0xD107             BNE.N    ??LCD_Clear_1
    735            {
    736              LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET); 
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0x2104             MOVS     R1,#+4
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable25_1  ;; 0x40010c00
   \   0000003E   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   00000042   0x.... 0x....      B.W      GPIO_WriteBit
    737            }  
    738          }
   \                     ??LCD_Clear_1:
   \   00000046   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    739          
    740          /*******************************************************************************
    741          * Function Name  : LCD_SetCursor
    742          * Description    : Sets the cursor position.
    743          * Input          : - Xpos: specifies the X position.
    744          *                  - Ypos: specifies the Y position. 
    745          * Output         : None
    746          * Return         : None
    747          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    748          void LCD_SetCursor(u8 Xpos, u16 Ypos)
    749          {
   \                     LCD_SetCursor:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
    750            if(LCDType == LCD_ILI9320)
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable25
   \   00000008   0x684A             LDR      R2,[R1, #+4]
   \   0000000A   0xF249 0x3320      MOVW     R3,#+37664
   \   0000000E   0x429A             CMP      R2,R3
   \   00000010   0xD106             BNE.N    ??LCD_SetCursor_0
    751            {
    752              LCD_WriteReg(R32, Xpos);
   \   00000012   0x4601             MOV      R1,R0
   \   00000014   0x2020             MOVS     R0,#+32
   \   00000016   0x.... 0x....      BL       LCD_WriteReg
    753              LCD_WriteReg(R33, Ypos);
   \   0000001A   0x4621             MOV      R1,R4
   \   0000001C   0x2021             MOVS     R0,#+33
   \   0000001E   0x....             B.N      ?Subroutine1
    754            }
    755            else if(LCDType == LCD_HX8312)
   \                     ??LCD_SetCursor_0:
   \   00000020   0x6849             LDR      R1,[R1, #+4]
   \   00000022   0xF248 0x3212      MOVW     R2,#+33554
   \   00000026   0x4291             CMP      R1,R2
   \   00000028   0xD10B             BNE.N    ??LCD_SetCursor_1
    756            {
    757              LCD_WriteReg(R66, Xpos);
   \   0000002A   0x4601             MOV      R1,R0
   \   0000002C   0x2042             MOVS     R0,#+66
   \   0000002E   0x.... 0x....      BL       LCD_WriteReg
    758              LCD_WriteReg(R67, ((Ypos & 0x100)>> 8));
   \   00000032   0xF3C4 0x2100      UBFX     R1,R4,#+8,#+1
   \   00000036   0x2043             MOVS     R0,#+67
   \   00000038   0x.... 0x....      BL       LCD_WriteReg
    759              LCD_WriteReg(R68, (Ypos & 0xFF));
   \   0000003C   0xB2E1             UXTB     R1,R4
   \   0000003E   0x2044             MOVS     R0,#+68
   \   00000040   0x....             B.N      ?Subroutine1
    760            }
    761          }
   \                     ??LCD_SetCursor_1:
   \   00000042   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0xE8BD 0x4010      POP      {R4,LR}
   \   00000004   0x....             B.N      LCD_WriteReg
    762          
    763          /*******************************************************************************
    764          * Function Name  : LCD_DrawChar
    765          * Description    : Draws a character on LCD.
    766          * Input          : - Xpos: the Line where to display the character shape.
    767          *                    This parameter can be one of the following values:
    768          *                       - Linex: where x can be 0..9
    769          *                  - Ypos: start column address.
    770          *                  - c: pointer to the character data.
    771          * Output         : None
    772          * Return         : None
    773          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    774          void LCD_DrawChar(u8 Xpos, u16 Ypos, uc16 *c)
    775          {
   \                     LCD_DrawChar:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x468B             MOV      R11,R1
   \   00000006   0x4615             MOV      R5,R2
    776            u32 index = 0, i = 0;
    777            u8 Xaddress = 0;
    778             
    779            Xaddress = Xpos;
   \   00000008   0x4604             MOV      R4,R0
    780            
    781            LCD_SetCursor(Xaddress, Ypos);
   \   0000000A   0x.... 0x....      BL       LCD_SetCursor
    782            
    783            for(index = 0; index < 24; index++)
   \   0000000E   0xF04F 0x0918      MOV      R9,#+24
   \   00000012   0xF04F 0x0A01      MOV      R10,#+1
   \   00000016   0xF249 0x3820      MOVW     R8,#+37664
   \   0000001A   0x.... 0x....      LDR.W    R6,??DataTable23
    784            {
    785              if(LCDType == LCD_ILI9320)
   \                     ??LCD_DrawChar_0:
   \   0000001E   0x6870             LDR      R0,[R6, #+4]
   \   00000020   0x4540             CMP      R0,R8
   \   00000022   0xBF08             IT       EQ 
   \   00000024   0x.... 0x....      BLEQ     LCD_WriteRAM_Prepare
    786              {
    787                LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    788              }
    789              for(i = 0; i < 16; i++)
   \   00000028   0x2700             MOVS     R7,#+0
    790              {
    791                if((c[index] & (1 << i)) == 0x00)
   \                     ??LCD_DrawChar_1:
   \   0000002A   0x8828             LDRH     R0,[R5, #+0]
   \   0000002C   0xFA0A 0xF107      LSL      R1,R10,R7
   \   00000030   0x4208             TST      R0,R1
   \   00000032   0xBF0C             ITE      EQ 
   \   00000034   0x8870             LDRHEQ   R0,[R6, #+2]
   \   00000036   0x8830             LDRHNE   R0,[R6, #+0]
    792                {
    793                  LCD_WriteRAM(BackColor);
    794                }
    795                else
    796                {
    797                  LCD_WriteRAM(TextColor);
   \   00000038   0x.... 0x....      BL       LCD_WriteRAM
    798                }
    799              }
   \   0000003C   0x1C7F             ADDS     R7,R7,#+1
   \   0000003E   0x2F10             CMP      R7,#+16
   \   00000040   0xD3F3             BCC.N    ??LCD_DrawChar_1
    800              if(LCDType == LCD_ILI9320)
   \   00000042   0x6870             LDR      R0,[R6, #+4]
   \   00000044   0x4540             CMP      R0,R8
   \   00000046   0xD105             BNE.N    ??LCD_DrawChar_2
    801              {
    802                LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   00000048   0x2201             MOVS     R2,#+1
   \   0000004A   0x2104             MOVS     R1,#+4
   \   0000004C   0x.... 0x....      LDR.W    R0,??DataTable25_1  ;; 0x40010c00
   \   00000050   0x.... 0x....      BL       GPIO_WriteBit
    803              }  
    804              Xaddress++;
   \                     ??LCD_DrawChar_2:
   \   00000054   0x1C64             ADDS     R4,R4,#+1
    805              LCD_SetCursor(Xaddress, Ypos);
   \   00000056   0x4659             MOV      R1,R11
   \   00000058   0xB2E0             UXTB     R0,R4
   \   0000005A   0x.... 0x....      BL       LCD_SetCursor
    806            }
   \   0000005E   0x1CAD             ADDS     R5,R5,#+2
   \   00000060   0xF1B9 0x0901      SUBS     R9,R9,#+1
   \   00000064   0xD1DB             BNE.N    ??LCD_DrawChar_0
    807          }
   \   00000066   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
    808          
    809          /*******************************************************************************
    810          * Function Name  : LCD_DisplayChar
    811          * Description    : Displays one character (16dots width, 24dots height).
    812          * Input          : - Line: the Line where to display the character shape .
    813          *                    This parameter can be one of the following values:
    814          *                       - Linex: where x can be 0..9
    815          *                  - Column: start column address.
    816          *                  - Ascii: character ascii code, must be between 0x20 and 0x7E.
    817          * Output         : None
    818          * Return         : None
    819          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    820          void LCD_DisplayChar(u8 Line, u16 Column, u8 Ascii)
    821          {
    822            Ascii -= 32;
    823            LCD_DrawChar(Line, Column, &ASCII_Table[Ascii * 24]);
   \                     LCD_DisplayChar:
   \   00000000   0x3A20             SUBS     R2,R2,#+32
   \   00000002   0xB2D2             UXTB     R2,R2
   \   00000004   0xEB02 0x0342      ADD      R3,R2,R2, LSL #+1
   \   00000008   0x.... 0x....      ADR.W    R2,ASCII_Table
   \   0000000C   0xEB02 0x1203      ADD      R2,R2,R3, LSL #+4
   \   00000010   0x....             B.N      LCD_DrawChar
    824          }
    825          
    826          /*******************************************************************************
    827          * Function Name  : LCD_DisplayStringLine
    828          * Description    : Displays a maximum of 20 char on the LCD.
    829          * Input          : - Line: the Line where to display the character shape .
    830          *                    This parameter can be one of the following values:
    831          *                       - Linex: where x can be 0..9
    832          *                  - *ptr: pointer to string to display on LCD.
    833          * Output         : None
    834          * Return         : None
    835          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    836          void LCD_DisplayStringLine(u8 Line, u8 *ptr)
    837          {
   \                     LCD_DisplayStringLine:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    838            u32 i = 0;
   \   00000008   0x2600             MOVS     R6,#+0
    839            u16 refcolumn = 319;
   \   0000000A   0xF240 0x173F      MOVW     R7,#+319
   \   0000000E   0x.... 0x....      ADR.W    R8,ASCII_Table
   \   00000012   0xE00D             B.N      ??LCD_DisplayStringLine_0
    840          
    841            /* Send the string character by character on lCD */
    842            while ((*ptr != 0) & (i < 20))
    843            {
    844              /* Display one character on LCD */
    845              LCD_DisplayChar(Line, refcolumn, *ptr);
   \                     ??LCD_DisplayStringLine_1:
   \   00000014   0xF815 0x0B01      LDRB     R0,[R5], #+1
   \   00000018   0x3820             SUBS     R0,R0,#+32
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   00000020   0xEB08 0x1201      ADD      R2,R8,R1, LSL #+4
   \   00000024   0xB2B9             UXTH     R1,R7
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       LCD_DrawChar
    846              /* Decrement the column position by 16 */
    847              refcolumn -= 16;
   \   0000002C   0x3F10             SUBS     R7,R7,#+16
    848              /* Point on the next character */
    849              ptr++;
    850              /* Increment the character counter */
    851              i++;
   \   0000002E   0x1C76             ADDS     R6,R6,#+1
    852            }
   \                     ??LCD_DisplayStringLine_0:
   \   00000030   0x7828             LDRB     R0,[R5, #+0]
   \   00000032   0xB108             CBZ.N    R0,??LCD_DisplayStringLine_2
   \   00000034   0x2E14             CMP      R6,#+20
   \   00000036   0xD3ED             BCC.N    ??LCD_DisplayStringLine_1
    853          }
   \                     ??LCD_DisplayStringLine_2:
   \   00000038   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    854          
    855          /*******************************************************************************
    856          * Function Name  : LCD_SetDisplayWindow
    857          * Description    : Sets a display window
    858          * Input          : - Xpos: specifies the X buttom left position.
    859          *                  - Ypos: specifies the Y buttom left position.
    860          *                  - Height: display window height.
    861          *                  - Width: display window width.
    862          * Output         : None
    863          * Return         : None
    864          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    865          void LCD_SetDisplayWindow(u8 Xpos, u16 Ypos, u8 Height, u16 Width)
    866          {
   \                     LCD_SetDisplayWindow:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4617             MOV      R7,R2
   \   00000008   0x461E             MOV      R6,R3
    867            if(LCDType == LCD_ILI9320)
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable25
   \   0000000E   0x6841             LDR      R1,[R0, #+4]
   \   00000010   0xF249 0x3220      MOVW     R2,#+37664
   \   00000014   0x4291             CMP      R1,R2
   \   00000016   0xD118             BNE.N    ??LCD_SetDisplayWindow_0
    868            {
    869              /* Horizontal GRAM Start Address */
    870              if(Xpos >= Height)
   \   00000018   0x42BC             CMP      R4,R7
   \   0000001A   0xBF23             ITTTE    CS 
   \   0000001C   0x1BE0             SUBCS    R0,R4,R7
   \   0000001E   0x1C41             ADDCS    R1,R0,#+1
   \   00000020   0xB289             UXTHCS   R1,R1
   \   00000022   0x2100             MOVCC    R1,#+0
    871              {
    872                LCD_WriteReg(R80, (Xpos - Height + 1));
    873              }
    874              else
    875              {
    876                LCD_WriteReg(R80, 0);
   \   00000024   0x2050             MOVS     R0,#+80
   \   00000026   0x.... 0x....      BL       LCD_WriteReg
    877              }
    878              /* Horizontal GRAM End Address */
    879              LCD_WriteReg(R81, Xpos);
   \   0000002A   0x4621             MOV      R1,R4
   \   0000002C   0x2051             MOVS     R0,#+81
   \   0000002E   0x.... 0x....      BL       LCD_WriteReg
    880              /* Vertical GRAM Start Address */
    881              if(Ypos >= Width)
   \   00000032   0x42B5             CMP      R5,R6
   \   00000034   0xBF23             ITTTE    CS 
   \   00000036   0x1BA8             SUBCS    R0,R5,R6
   \   00000038   0x1C41             ADDCS    R1,R0,#+1
   \   0000003A   0xB289             UXTHCS   R1,R1
   \   0000003C   0x2100             MOVCC    R1,#+0
    882              {
    883                LCD_WriteReg(R82, (Ypos - Width + 1));
    884              }  
    885              else
    886              {
    887                LCD_WriteReg(R82, 0);
   \   0000003E   0x2052             MOVS     R0,#+82
   \   00000040   0x.... 0x....      BL       LCD_WriteReg
    888              }
    889              /* Vertical GRAM End Address */
    890              LCD_WriteReg(R83, Ypos);
   \   00000044   0x4629             MOV      R1,R5
   \   00000046   0x2053             MOVS     R0,#+83
   \   00000048   0xE02B             B.N      ??LCD_SetDisplayWindow_1
    891            }
    892            else if(LCDType == LCD_HX8312)
   \                     ??LCD_SetDisplayWindow_0:
   \   0000004A   0x6840             LDR      R0,[R0, #+4]
   \   0000004C   0xF248 0x3112      MOVW     R1,#+33554
   \   00000050   0x4288             CMP      R0,R1
   \   00000052   0xD128             BNE.N    ??LCD_SetDisplayWindow_2
    893            {  
    894              LCD_WriteReg(R1, 0xD0);
   \   00000054   0x21D0             MOVS     R1,#+208
   \   00000056   0x2001             MOVS     R0,#+1
   \   00000058   0x.... 0x....      BL       LCD_WriteReg
    895              LCD_WriteReg(R5, 0x14);
   \   0000005C   0x2114             MOVS     R1,#+20
   \   0000005E   0x2005             MOVS     R0,#+5
   \   00000060   0x.... 0x....      BL       LCD_WriteReg
    896            
    897              LCD_WriteReg(R69, (Xpos - Height + 1));
   \   00000064   0x1BE0             SUBS     R0,R4,R7
   \   00000066   0x1C41             ADDS     R1,R0,#+1
   \   00000068   0xB289             UXTH     R1,R1
   \   0000006A   0x2045             MOVS     R0,#+69
   \   0000006C   0x.... 0x....      BL       LCD_WriteReg
    898              LCD_WriteReg(R70, Xpos);
   \   00000070   0x4621             MOV      R1,R4
   \   00000072   0x2046             MOVS     R0,#+70
   \   00000074   0x.... 0x....      BL       LCD_WriteReg
    899           
    900              LCD_WriteReg(R71, (((Ypos - Width + 1) & 0x100)>> 8));
   \   00000078   0x1BA8             SUBS     R0,R5,R6
   \   0000007A   0x1C40             ADDS     R0,R0,#+1
   \   0000007C   0x1200             ASRS     R0,R0,#+8
   \   0000007E   0xF000 0x0101      AND      R1,R0,#0x1
   \   00000082   0x2047             MOVS     R0,#+71
   \   00000084   0x.... 0x....      BL       LCD_WriteReg
    901              LCD_WriteReg(R72, ((Ypos - Width + 1) & 0xFF));
   \   00000088   0x1BA8             SUBS     R0,R5,R6
   \   0000008A   0x1C40             ADDS     R0,R0,#+1
   \   0000008C   0xB2C1             UXTB     R1,R0
   \   0000008E   0x2048             MOVS     R0,#+72
   \   00000090   0x.... 0x....      BL       LCD_WriteReg
    902          
    903              LCD_WriteReg(R73, ((Ypos & 0x100)>> 8));
   \   00000094   0xF3C5 0x2100      UBFX     R1,R5,#+8,#+1
   \   00000098   0x2049             MOVS     R0,#+73
   \   0000009A   0x.... 0x....      BL       LCD_WriteReg
    904              LCD_WriteReg(R74, (Ypos & 0xFF));
   \   0000009E   0xB2E9             UXTB     R1,R5
   \   000000A0   0x204A             MOVS     R0,#+74
   \                     ??LCD_SetDisplayWindow_1:
   \   000000A2   0x.... 0x....      BL       LCD_WriteReg
    905            }
    906          
    907            LCD_SetCursor(Xpos, Ypos);
   \                     ??LCD_SetDisplayWindow_2:
   \   000000A6   0x4629             MOV      R1,R5
   \   000000A8   0x4620             MOV      R0,R4
   \   000000AA   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \   000000AE   0x....             B.N      LCD_SetCursor
    908          }
    909          
    910          /*******************************************************************************
    911          * Function Name  : LCD_WindowModeDisable
    912          * Description    : Disables LCD Window mode.
    913          * Input          : None
    914          * Output         : None
    915          * Return         : None
    916          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    917          void LCD_WindowModeDisable(void)
    918          {
   \                     LCD_WindowModeDisable:
   \   00000000   0xB580             PUSH     {R7,LR}
    919            if(LCDType == LCD_ILI9320)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable25
   \   00000006   0x6841             LDR      R1,[R0, #+4]
   \   00000008   0xF249 0x3220      MOVW     R2,#+37664
   \   0000000C   0x4291             CMP      R1,R2
   \   0000000E   0xD10B             BNE.N    ??LCD_WindowModeDisable_0
    920            {
    921              LCD_SetDisplayWindow(239, 0x13F, 240, 320);
   \   00000010   0xF44F 0x73A0      MOV      R3,#+320
   \   00000014   0x22F0             MOVS     R2,#+240
   \   00000016   0xF240 0x113F      MOVW     R1,#+319
   \   0000001A   0x20EF             MOVS     R0,#+239
   \   0000001C   0x.... 0x....      BL       LCD_SetDisplayWindow
    922              LCD_WriteReg(R3, 0x1018);
   \   00000020   0xF241 0x0118      MOVW     R1,#+4120
   \   00000024   0x2003             MOVS     R0,#+3
   \   00000026   0x....             B.N      ?Subroutine0
    923            }
    924            else if(LCDType == LCD_HX8312)
   \                     ??LCD_WindowModeDisable_0:
   \   00000028   0x6840             LDR      R0,[R0, #+4]
   \   0000002A   0xF248 0x3112      MOVW     R1,#+33554
   \   0000002E   0x4288             CMP      R0,R1
   \   00000030   0xD106             BNE.N    ??LCD_WindowModeDisable_1
    925            {
    926              LCD_WriteReg(R1, 0x50);
   \   00000032   0x2150             MOVS     R1,#+80
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x.... 0x....      BL       LCD_WriteReg
    927              LCD_WriteReg(R5, 0x04); 
   \   0000003A   0x2104             MOVS     R1,#+4
   \   0000003C   0x2005             MOVS     R0,#+5
   \   0000003E   0x....             B.N      ?Subroutine0
    928            }
    929              
    930          }
   \                     ??LCD_WindowModeDisable_1:
   \   00000040   0xBD01             POP      {R0,PC}          ;; return
    931          /*******************************************************************************
    932          * Function Name  : LCD_DrawLine
    933          * Description    : Displays a line.
    934          * Input          : - Xpos: specifies the X position.
    935          *                  - Ypos: specifies the Y position.
    936          *                  - Length: line length.
    937          *                  - Direction: line direction.
    938          *                    This parameter can be one of the following values: Vertical 
    939          *                    or Horizontal.
    940          * Output         : None
    941          * Return         : None
    942          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    943          void LCD_DrawLine(u8 Xpos, u16 Ypos, u16 Length, u8 Direction)
    944          {
   \                     LCD_DrawLine:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4688             MOV      R8,R1
   \   00000008   0x4616             MOV      R6,R2
   \   0000000A   0x461D             MOV      R5,R3
    945            u32 i = 0;
   \   0000000C   0x2700             MOVS     R7,#+0
    946            
    947            LCD_SetCursor(Xpos, Ypos);
   \   0000000E   0x.... 0x....      BL       LCD_SetCursor
    948          
    949            if(Direction == Horizontal)
   \   00000012   0x2D00             CMP      R5,#+0
   \   00000014   0xD00D             BEQ.N    ??LCD_DrawLine_0
   \   00000016   0xB36E             CBZ.N    R6,??LCD_DrawLine_1
   \   00000018   0xF248 0x3712      MOVW     R7,#+33554
   \   0000001C   0xF249 0x3920      MOVW     R9,#+37664
   \   00000020   0x.... 0x....      LDR.W    R5,??DataTable25
    950            { 
    951              if(LCDType == LCD_ILI9320)
    952              {
    953                LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    954              }
    955              for(i = 0; i < Length; i++)
    956              {
    957                LCD_WriteRAM(TextColor);
    958              }
    959              if(LCDType == LCD_ILI9320)
    960              {
    961                LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
    962              }
    963            }
    964            else
    965            {
    966             for(i = 0; i < Length; i++)
    967              {
    968                if(LCDType == LCD_ILI9320)
   \                     ??LCD_DrawLine_2:
   \   00000024   0x6868             LDR      R0,[R5, #+4]
   \   00000026   0x4548             CMP      R0,R9
   \   00000028   0xD117             BNE.N    ??LCD_DrawLine_3
    969                {
    970                  LCD_WriteRAMWord(TextColor);
   \   0000002A   0x8828             LDRH     R0,[R5, #+0]
   \   0000002C   0x.... 0x....      BL       LCD_WriteRAMWord
   \   00000030   0xE019             B.N      ??LCD_DrawLine_4
    971                }
   \                     ??LCD_DrawLine_0:
   \   00000032   0xF249 0x3520      MOVW     R5,#+37664
   \   00000036   0x.... 0x....      LDR.W    R4,??DataTable25
   \   0000003A   0x6860             LDR      R0,[R4, #+4]
   \   0000003C   0x42A8             CMP      R0,R5
   \   0000003E   0xBF08             IT       EQ 
   \   00000040   0x.... 0x....      BLEQ     LCD_WriteRAM_Prepare
   \   00000044   0xB12E             CBZ.N    R6,??LCD_DrawLine_5
   \                     ??LCD_DrawLine_6:
   \   00000046   0x8820             LDRH     R0,[R4, #+0]
   \   00000048   0x.... 0x....      BL       LCD_WriteRAM
   \   0000004C   0x1C7F             ADDS     R7,R7,#+1
   \   0000004E   0x42B7             CMP      R7,R6
   \   00000050   0xD3F9             BCC.N    ??LCD_DrawLine_6
   \                     ??LCD_DrawLine_5:
   \   00000052   0x6860             LDR      R0,[R4, #+4]
   \   00000054   0x42A8             CMP      R0,R5
   \   00000056   0xD10D             BNE.N    ??LCD_DrawLine_1
   \   00000058   0x....             B.N      ?Subroutine2
    972                else  if(LCDType == LCD_HX8312)
   \                     ??LCD_DrawLine_3:
   \   0000005A   0x6868             LDR      R0,[R5, #+4]
   \   0000005C   0x42B8             CMP      R0,R7
   \   0000005E   0xBF04             ITT      EQ 
   \   00000060   0x8828             LDRHEQ   R0,[R5, #+0]
   \   00000062   0x.... 0x....      BLEQ     LCD_WriteRAM
    973                {
    974                  LCD_WriteRAM(TextColor);
    975                }
    976                Xpos++;
   \                     ??LCD_DrawLine_4:
   \   00000066   0x1C64             ADDS     R4,R4,#+1
    977                LCD_SetCursor(Xpos, Ypos);
   \   00000068   0x4641             MOV      R1,R8
   \   0000006A   0xB2E0             UXTB     R0,R4
   \   0000006C   0x.... 0x....      BL       LCD_SetCursor
    978              }
   \   00000070   0x1E76             SUBS     R6,R6,#+1
   \   00000072   0xD1D7             BNE.N    ??LCD_DrawLine_2
    979            }
    980          }
   \                     ??LCD_DrawLine_1:
   \   00000074   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    981          
    982          /*******************************************************************************
    983          * Function Name  : LCD_DrawRect
    984          * Description    : Displays a rectangle.
    985          * Input          : - Xpos: specifies the X position.
    986          *                  - Ypos: specifies the Y position.
    987          *                  - Height: display rectangle height.
    988          *                  - Width: display rectangle width.
    989          * Output         : None
    990          * Return         : None
    991          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    992          void LCD_DrawRect(u8 Xpos, u16 Ypos, u8 Height, u16 Width)
    993          {
   \                     LCD_DrawRect:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x4616             MOV      R6,R2
   \   00000008   0x461F             MOV      R7,R3
    994            LCD_DrawLine(Xpos, Ypos, Width, Horizontal);
   \   0000000A   0x2300             MOVS     R3,#+0
   \   0000000C   0x463A             MOV      R2,R7
   \   0000000E   0x.... 0x....      BL       LCD_DrawLine
    995            LCD_DrawLine((Xpos + Height), Ypos, Width, Horizontal);
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0x463A             MOV      R2,R7
   \   00000016   0x4629             MOV      R1,R5
   \   00000018   0x1930             ADDS     R0,R6,R4
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0x.... 0x....      BL       LCD_DrawLine
    996            
    997            LCD_DrawLine(Xpos, Ypos, Height, Vertical);
   \   00000020   0x2301             MOVS     R3,#+1
   \   00000022   0x4632             MOV      R2,R6
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       LCD_DrawLine
    998            LCD_DrawLine(Xpos, (Ypos - Width + 1), Height, Vertical);
   \   0000002C   0x2301             MOVS     R3,#+1
   \   0000002E   0x4632             MOV      R2,R6
   \   00000030   0x1BE8             SUBS     R0,R5,R7
   \   00000032   0x1C41             ADDS     R1,R0,#+1
   \   00000034   0xB289             UXTH     R1,R1
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0xB001             ADD      SP,SP,#+4
   \   0000003A   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   0000003E   0x....             B.N      LCD_DrawLine
    999          }
   1000          
   1001          /*******************************************************************************
   1002          * Function Name  : LCD_DrawCircle
   1003          * Description    : Displays a circle.
   1004          * Input          : - Xpos: specifies the X position.
   1005          *                  - Ypos: specifies the Y position.
   1006          *                  - Height: display rectangle height.
   1007          *                  - Width: display rectangle width.
   1008          * Output         : None
   1009          * Return         : None
   1010          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1011          void LCD_DrawCircle(u8 Xpos, u16 Ypos, u16 Radius)
   1012          {
   \                     LCD_DrawCircle:
   \   00000000   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   1013            s32  D;/* Decision Variable */ 
   1014            u32  CurX;/* Current X Value */
   1015            u32  CurY;/* Current Y Value */ 
   1016            
   1017            D = 3 - (Radius << 1);
   \   00000006   0x0050             LSLS     R0,R2,#+1
   \   00000008   0xF1C0 0x0A03      RSB      R10,R0,#+3
   1018            CurX = 0;
   \   0000000C   0x2500             MOVS     R5,#+0
   1019            CurY = Radius;
   \   0000000E   0x4616             MOV      R6,R2
   \   00000010   0xF04F 0x0B06      MOV      R11,#+6
   \   00000014   0xF248 0x3812      MOVW     R8,#+33554
   \   00000018   0xF249 0x3920      MOVW     R9,#+37664
   \   0000001C   0x.... 0x....      LDR.W    R4,??DataTable25
   1020            
   1021            while (CurX <= CurY)
   1022            {
   1023              LCD_SetCursor(Xpos + CurX, Ypos + CurY);
   \                     ??LCD_DrawCircle_0:
   \   00000020   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000024   0x182F             ADDS     R7,R5,R0
   \   00000026   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \   0000002A   0x1830             ADDS     R0,R6,R0
   \   0000002C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000030   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000034   0xB2F8             UXTB     R0,R7
   \   00000036   0x.... 0x....      BL       LCD_SetCursor
   1024              if(LCDType == LCD_ILI9320)
   \   0000003A   0x6860             LDR      R0,[R4, #+4]
   \   0000003C   0x4548             CMP      R0,R9
   \   0000003E   0xD103             BNE.N    ??LCD_DrawCircle_1
   1025              {
   1026                LCD_WriteRAMWord(TextColor);
   \   00000040   0x8820             LDRH     R0,[R4, #+0]
   \   00000042   0x.... 0x....      BL       LCD_WriteRAMWord
   \   00000046   0xE005             B.N      ??LCD_DrawCircle_2
   1027              }
   1028              else if(LCDType == LCD_HX8312)
   \                     ??LCD_DrawCircle_1:
   \   00000048   0x6860             LDR      R0,[R4, #+4]
   \   0000004A   0x4540             CMP      R0,R8
   \   0000004C   0xBF04             ITT      EQ 
   \   0000004E   0x8820             LDRHEQ   R0,[R4, #+0]
   \   00000050   0x.... 0x....      BLEQ     LCD_WriteRAM
   1029              {
   1030                LCD_WriteRAM(TextColor);
   1031              }
   1032              LCD_SetCursor(Xpos + CurX, Ypos - CurY);
   \                     ??LCD_DrawCircle_2:
   \   00000054   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \   00000058   0x1B80             SUBS     R0,R0,R6
   \   0000005A   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   \   0000005E   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   00000062   0xB2F8             UXTB     R0,R7
   \   00000064   0x.... 0x....      BL       LCD_SetCursor
   1033              if(LCDType == LCD_ILI9320)
   \   00000068   0x6860             LDR      R0,[R4, #+4]
   \   0000006A   0x4548             CMP      R0,R9
   \   0000006C   0xD103             BNE.N    ??LCD_DrawCircle_3
   1034              {
   1035                LCD_WriteRAMWord(TextColor);
   \   0000006E   0x8820             LDRH     R0,[R4, #+0]
   \   00000070   0x.... 0x....      BL       LCD_WriteRAMWord
   \   00000074   0xE005             B.N      ??LCD_DrawCircle_4
   1036              }
   1037              else if(LCDType == LCD_HX8312)
   \                     ??LCD_DrawCircle_3:
   \   00000076   0x6860             LDR      R0,[R4, #+4]
   \   00000078   0x4540             CMP      R0,R8
   \   0000007A   0xBF04             ITT      EQ 
   \   0000007C   0x8820             LDRHEQ   R0,[R4, #+0]
   \   0000007E   0x.... 0x....      BLEQ     LCD_WriteRAM
   1038              {
   1039                LCD_WriteRAM(TextColor);
   1040              }
   1041              LCD_SetCursor(Xpos - CurX, Ypos + CurY);
   \                     ??LCD_DrawCircle_4:
   \   00000082   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000086   0x1B47             SUBS     R7,R0,R5
   \   00000088   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000008C   0xB2F8             UXTB     R0,R7
   \   0000008E   0x.... 0x....      BL       LCD_SetCursor
   1042              if(LCDType == LCD_ILI9320)
   \   00000092   0x6860             LDR      R0,[R4, #+4]
   \   00000094   0x4548             CMP      R0,R9
   \   00000096   0xD103             BNE.N    ??LCD_DrawCircle_5
   1043              {
   1044                LCD_WriteRAMWord(TextColor);
   \   00000098   0x8820             LDRH     R0,[R4, #+0]
   \   0000009A   0x.... 0x....      BL       LCD_WriteRAMWord
   \   0000009E   0xE005             B.N      ??LCD_DrawCircle_6
   1045              }
   1046              else if(LCDType == LCD_HX8312)
   \                     ??LCD_DrawCircle_5:
   \   000000A0   0x6860             LDR      R0,[R4, #+4]
   \   000000A2   0x4540             CMP      R0,R8
   \   000000A4   0xBF04             ITT      EQ 
   \   000000A6   0x8820             LDRHEQ   R0,[R4, #+0]
   \   000000A8   0x.... 0x....      BLEQ     LCD_WriteRAM
   1047              {
   1048                LCD_WriteRAM(TextColor);
   1049              }
   1050              LCD_SetCursor(Xpos - CurX, Ypos - CurY);
   \                     ??LCD_DrawCircle_6:
   \   000000AC   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   000000B0   0xB2F8             UXTB     R0,R7
   \   000000B2   0x.... 0x....      BL       LCD_SetCursor
   1051              if(LCDType == LCD_ILI9320)
   \   000000B6   0x6860             LDR      R0,[R4, #+4]
   \   000000B8   0x4548             CMP      R0,R9
   \   000000BA   0xD103             BNE.N    ??LCD_DrawCircle_7
   1052              {
   1053                LCD_WriteRAMWord(TextColor);
   \   000000BC   0x8820             LDRH     R0,[R4, #+0]
   \   000000BE   0x.... 0x....      BL       LCD_WriteRAMWord
   \   000000C2   0xE005             B.N      ??LCD_DrawCircle_8
   1054              }
   1055              else if(LCDType == LCD_HX8312)
   \                     ??LCD_DrawCircle_7:
   \   000000C4   0x6860             LDR      R0,[R4, #+4]
   \   000000C6   0x4540             CMP      R0,R8
   \   000000C8   0xBF04             ITT      EQ 
   \   000000CA   0x8820             LDRHEQ   R0,[R4, #+0]
   \   000000CC   0x.... 0x....      BLEQ     LCD_WriteRAM
   1056              {
   1057                LCD_WriteRAM(TextColor);
   1058              }
   1059              LCD_SetCursor(Xpos + CurY, Ypos + CurX);
   \                     ??LCD_DrawCircle_8:
   \   000000D0   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   000000D4   0x1837             ADDS     R7,R6,R0
   \   000000D6   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \   000000DA   0x1828             ADDS     R0,R5,R0
   \   000000DC   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   \   000000E0   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   000000E4   0xB2F8             UXTB     R0,R7
   \   000000E6   0x.... 0x....      BL       LCD_SetCursor
   1060              if(LCDType == LCD_ILI9320)
   \   000000EA   0x6860             LDR      R0,[R4, #+4]
   \   000000EC   0x4548             CMP      R0,R9
   \   000000EE   0xD103             BNE.N    ??LCD_DrawCircle_9
   1061              {
   1062                LCD_WriteRAMWord(TextColor);
   \   000000F0   0x8820             LDRH     R0,[R4, #+0]
   \   000000F2   0x.... 0x....      BL       LCD_WriteRAMWord
   \   000000F6   0xE005             B.N      ??LCD_DrawCircle_10
   1063              }
   1064              else if(LCDType == LCD_HX8312)
   \                     ??LCD_DrawCircle_9:
   \   000000F8   0x6860             LDR      R0,[R4, #+4]
   \   000000FA   0x4540             CMP      R0,R8
   \   000000FC   0xBF04             ITT      EQ 
   \   000000FE   0x8820             LDRHEQ   R0,[R4, #+0]
   \   00000100   0x.... 0x....      BLEQ     LCD_WriteRAM
   1065              {
   1066                LCD_WriteRAM(TextColor);
   1067              }
   1068              LCD_SetCursor(Xpos + CurY, Ypos - CurX);
   \                     ??LCD_DrawCircle_10:
   \   00000104   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \   00000108   0x1B40             SUBS     R0,R0,R5
   \   0000010A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   0000010E   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000112   0xB2F8             UXTB     R0,R7
   \   00000114   0x.... 0x....      BL       LCD_SetCursor
   1069              if(LCDType == LCD_ILI9320)
   \   00000118   0x6860             LDR      R0,[R4, #+4]
   \   0000011A   0x4548             CMP      R0,R9
   \   0000011C   0xD103             BNE.N    ??LCD_DrawCircle_11
   1070              {
   1071                LCD_WriteRAMWord(TextColor);
   \   0000011E   0x8820             LDRH     R0,[R4, #+0]
   \   00000120   0x.... 0x....      BL       LCD_WriteRAMWord
   \   00000124   0xE005             B.N      ??LCD_DrawCircle_12
   1072              }
   1073              else if(LCDType == LCD_HX8312)
   \                     ??LCD_DrawCircle_11:
   \   00000126   0x6860             LDR      R0,[R4, #+4]
   \   00000128   0x4540             CMP      R0,R8
   \   0000012A   0xBF04             ITT      EQ 
   \   0000012C   0x8820             LDRHEQ   R0,[R4, #+0]
   \   0000012E   0x.... 0x....      BLEQ     LCD_WriteRAM
   1074              {
   1075                LCD_WriteRAM(TextColor);
   1076              }
   1077              LCD_SetCursor(Xpos - CurY, Ypos + CurX);
   \                     ??LCD_DrawCircle_12:
   \   00000132   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000136   0x1B87             SUBS     R7,R0,R6
   \   00000138   0xF8BD 0x1002      LDRH     R1,[SP, #+2]
   \   0000013C   0xB2F8             UXTB     R0,R7
   \   0000013E   0x.... 0x....      BL       LCD_SetCursor
   1078              if(LCDType == LCD_ILI9320)
   \   00000142   0x6860             LDR      R0,[R4, #+4]
   \   00000144   0x4548             CMP      R0,R9
   \   00000146   0xD103             BNE.N    ??LCD_DrawCircle_13
   1079              {
   1080                LCD_WriteRAMWord(TextColor);
   \   00000148   0x8820             LDRH     R0,[R4, #+0]
   \   0000014A   0x.... 0x....      BL       LCD_WriteRAMWord
   \   0000014E   0xE005             B.N      ??LCD_DrawCircle_14
   1081              }
   1082              else if(LCDType == LCD_HX8312)
   \                     ??LCD_DrawCircle_13:
   \   00000150   0x6860             LDR      R0,[R4, #+4]
   \   00000152   0x4540             CMP      R0,R8
   \   00000154   0xBF04             ITT      EQ 
   \   00000156   0x8820             LDRHEQ   R0,[R4, #+0]
   \   00000158   0x.... 0x....      BLEQ     LCD_WriteRAM
   1083              {
   1084                LCD_WriteRAM(TextColor);
   1085              }
   1086              LCD_SetCursor(Xpos - CurY, Ypos - CurX);
   \                     ??LCD_DrawCircle_14:
   \   0000015C   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   00000160   0xB2F8             UXTB     R0,R7
   \   00000162   0x.... 0x....      BL       LCD_SetCursor
   1087              if(LCDType == LCD_ILI9320)
   \   00000166   0x6860             LDR      R0,[R4, #+4]
   \   00000168   0x4548             CMP      R0,R9
   \   0000016A   0xD103             BNE.N    ??LCD_DrawCircle_15
   1088              {
   1089                LCD_WriteRAMWord(TextColor);
   \   0000016C   0x8820             LDRH     R0,[R4, #+0]
   \   0000016E   0x.... 0x....      BL       LCD_WriteRAMWord
   \   00000172   0xE005             B.N      ??LCD_DrawCircle_16
   1090              }
   1091              else if(LCDType == LCD_HX8312)
   \                     ??LCD_DrawCircle_15:
   \   00000174   0x6860             LDR      R0,[R4, #+4]
   \   00000176   0x4540             CMP      R0,R8
   \   00000178   0xBF04             ITT      EQ 
   \   0000017A   0x8820             LDRHEQ   R0,[R4, #+0]
   \   0000017C   0x.... 0x....      BLEQ     LCD_WriteRAM
   1092              {
   1093                LCD_WriteRAM(TextColor);
   1094              }
   1095          
   1096              if (D < 0)
   \                     ??LCD_DrawCircle_16:
   \   00000180   0xF1BA 0x0F00      CMP      R10,#+0
   \   00000184   0xBF48             IT       MI 
   \   00000186   0x44DA             ADDMI    R10,R11,R10
   1097              { 
   1098                D += (CurX << 2) + 6;
   \   00000188   0xD405             BMI.N    ??LCD_DrawCircle_17
   1099              }
   1100              else
   1101              {
   1102                D += ((CurX - CurY) << 2) + 10;
   \   0000018A   0x1BA8             SUBS     R0,R5,R6
   \   0000018C   0xEB0A 0x0080      ADD      R0,R10,R0, LSL #+2
   \   00000190   0xF100 0x0A0A      ADD      R10,R0,#+10
   1103                CurY--;
   \   00000194   0x1E76             SUBS     R6,R6,#+1
   1104              }
   1105              CurX++;
   \                     ??LCD_DrawCircle_17:
   \   00000196   0x1C6D             ADDS     R5,R5,#+1
   \   00000198   0xF10B 0x0B04      ADD      R11,R11,#+4
   \   0000019C   0x42AE             CMP      R6,R5
   \   0000019E   0xF4BF 0xAF3F      BCS.W    ??LCD_DrawCircle_0
   1106            }
   1107          }
   \   000001A2   0xB005             ADD      SP,SP,#+20
   \   000001A4   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1108          
   1109          /*******************************************************************************
   1110          * Function Name  : LCD_DrawMonoPict
   1111          * Description    : Displays a monocolor picture.
   1112          * Input          : - Pict: pointer to the picture array.
   1113          * Output         : None
   1114          * Return         : None
   1115          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1116          void LCD_DrawMonoPict(uc32 *Pict)
   1117          {
   \                     LCD_DrawMonoPict:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4680             MOV      R8,R0
   1118            u32 index = 0, i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
   1119          
   1120            LCD_SetCursor(0, 319); 
   \   00000008   0xF240 0x113F      MOVW     R1,#+319
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       LCD_SetCursor
   1121            if(LCDType == LCD_ILI9320)
   \   00000012   0xF249 0x3920      MOVW     R9,#+37664
   \   00000016   0x.... 0x....      LDR.W    R7,??DataTable25
   \   0000001A   0x6878             LDR      R0,[R7, #+4]
   \   0000001C   0x4548             CMP      R0,R9
   \   0000001E   0xBF08             IT       EQ 
   \   00000020   0x.... 0x....      BLEQ     LCD_WriteRAM_Prepare
   1122            {
   1123              LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
   1124            }
   1125            for(index = 0; index < 2400; index++)
   1126            {
   1127              for(i = 0; i < 32; i++)
   \                     ??LCD_DrawMonoPict_0:
   \   00000024   0x2400             MOVS     R4,#+0
   \   00000026   0x2601             MOVS     R6,#+1
   1128              {
   1129                if((Pict[index] & (1 << i)) == 0x00)
   \                     ??LCD_DrawMonoPict_1:
   \   00000028   0xF858 0x0025      LDR      R0,[R8, R5, LSL #+2]
   \   0000002C   0xFA06 0xF104      LSL      R1,R6,R4
   \   00000030   0x4208             TST      R0,R1
   \   00000032   0xBF0C             ITE      EQ 
   \   00000034   0x8878             LDRHEQ   R0,[R7, #+2]
   \   00000036   0x8838             LDRHNE   R0,[R7, #+0]
   1130                {
   1131                  LCD_WriteRAM(BackColor);
   1132                }
   1133                else
   1134                {
   1135                  LCD_WriteRAM(TextColor);
   \   00000038   0x.... 0x....      BL       LCD_WriteRAM
   1136                }
   1137              }
   \   0000003C   0x1C64             ADDS     R4,R4,#+1
   \   0000003E   0x2C20             CMP      R4,#+32
   \   00000040   0xD3F2             BCC.N    ??LCD_DrawMonoPict_1
   1138            }
   \   00000042   0x1C6D             ADDS     R5,R5,#+1
   \   00000044   0xF5B5 0x6F16      CMP      R5,#+2400
   \   00000048   0xD3EC             BCC.N    ??LCD_DrawMonoPict_0
   1139            if(LCDType == LCD_ILI9320)
   \   0000004A   0x6878             LDR      R0,[R7, #+4]
   \   0000004C   0x4548             CMP      R0,R9
   \   0000004E   0xD100             BNE.N    ??LCD_DrawMonoPict_2
   1140            {
   1141              LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   00000050   0x....             B.N      ?Subroutine2
   1142            }
   1143          }
   \                     ??LCD_DrawMonoPict_2:
   \   00000052   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
   1144          
   1145          
   1146          /*******************************************************************************
   1147          * Function Name  : LCD_nCS_StartByte
   1148          * Description    : Reset LCD control line(/CS) and Send Start-Byte
   1149          * Input          : - Start_Byte: the Start-Byte to be sent
   1150          * Output         : None
   1151          * Return         : None
   1152          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1153          void LCD_nCS_StartByte(u8 Start_Byte)
   1154          {
   \                     LCD_nCS_StartByte:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   1155            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_RESET);
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x2104             MOVS     R1,#+4
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable25_1  ;; 0x40010c00
   \   0000000C   0x.... 0x....      BL       GPIO_WriteBit
   1156          
   1157            SPI_I2S_SendData(SPI2, Start_Byte);
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable25_2  ;; 0x40003800
   \   00000014   0x4621             MOV      R1,R4
   \   00000016   0x4628             MOV      R0,R5
   \   00000018   0x.... 0x....      BL       SPI_I2S_SendData
   1158            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_nCS_StartByte_0:
   \   0000001C   0x2180             MOVS     R1,#+128
   \   0000001E   0x4628             MOV      R0,R5
   \   00000020   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD1F9             BNE.N    ??LCD_nCS_StartByte_0
   1159            {
   1160            }
   1161          }
   \   00000028   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   1162          
   1163          /*******************************************************************************
   1164          * Function Name  : LCD_WriteRegIndex
   1165          * Description    : Writes index to select the LCD register.
   1166          * Input          : - LCD_Reg: address of the selected register.
   1167          * Output         : None
   1168          * Return         : None
   1169          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1170          void LCD_WriteRegIndex(u8 LCD_Reg)
   1171          {
   \                     LCD_WriteRegIndex:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   1172            /* Reset LCD control line(/CS) and Send Start-Byte */
   1173            LCD_nCS_StartByte(START_BYTE | SET_INDEX);
   \   00000004   0x2070             MOVS     R0,#+112
   \   00000006   0x.... 0x....      BL       LCD_nCS_StartByte
   1174          
   1175            /* Write 16-bit Reg Index (High Byte is 0) */
   1176            SPI_I2S_SendData(SPI2, 0x00);
   \   0000000A   0x.... 0x....      LDR.W    R5,??DataTable25_2  ;; 0x40003800
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x4628             MOV      R0,R5
   \   00000012   0x.... 0x....      BL       SPI_I2S_SendData
   1177            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_WriteRegIndex_0:
   \   00000016   0x2180             MOVS     R1,#+128
   \   00000018   0x4628             MOV      R0,R5
   \   0000001A   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD1F9             BNE.N    ??LCD_WriteRegIndex_0
   1178            {
   1179            }
   1180            SPI_I2S_SendData(SPI2, LCD_Reg);
   \   00000022   0x4621             MOV      R1,R4
   \   00000024   0x4628             MOV      R0,R5
   \   00000026   0x.... 0x....      BL       SPI_I2S_SendData
   1181            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_WriteRegIndex_1:
   \   0000002A   0x2180             MOVS     R1,#+128
   \   0000002C   0x4628             MOV      R0,R5
   \   0000002E   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD1F9             BNE.N    ??LCD_WriteRegIndex_1
   1182            {
   1183            }
   1184          
   1185            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0x2104             MOVS     R1,#+4
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable25_1  ;; 0x40010c00
   \   0000003E   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   00000042   0x.... 0x....      B.W      GPIO_WriteBit
   1186          }
   1187          
   1188          /*******************************************************************************
   1189          * Function Name  : LCD_WriteRegILI9320
   1190          * Description    : Writes to the selected LCD ILI9320 register.
   1191          * Input          : - LCD_Reg: address of the selected register.
   1192          *                  - LCD_RegValue: value to write to the selected register.
   1193          * Output         : None
   1194          * Return         : None
   1195          *******************************************************************************/
   1196          static void LCD_WriteRegILI9320(u8 LCD_Reg, u16 LCD_RegValue)
   1197          {
   1198            /* Write 16-bit Index (then Write Reg) */
   1199            LCD_WriteRegIndex(LCD_Reg);
   1200          
   1201            /* Write 16-bit Reg */
   1202            /* Reset LCD control line(/CS) and Send Start-Byte */
   1203            LCD_nCS_StartByte(START_BYTE | WRITE_REG);
   1204          
   1205            SPI_I2S_SendData(SPI2, LCD_RegValue>>8);
   1206            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   1207            {
   1208            }
   1209            SPI_I2S_SendData(SPI2, (LCD_RegValue & 0xFF));
   1210            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   1211            {
   1212            }
   1213          
   1214            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   1215          }
   1216          
   1217          /*******************************************************************************
   1218          * Function Name  : LCD_ReadReg
   1219          * Description    : Reads the selected LCD Register.
   1220          * Input          : None
   1221          * Output         : None
   1222          * Return         : LCD Register Value.
   1223          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1224          u16 LCD_ReadReg(u8 LCD_Reg)
   1225          {
   \                     LCD_ReadReg:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   1226            u16 tmp = 0;
   1227            u8 i = 0;
   1228            
   1229            /* SPI2 prescaler: 4 */
   1230            SPI2->CR1 &= 0xFFC7;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable25_2  ;; 0x40003800
   \   00000006   0x8821             LDRH     R1,[R4, #+0]
   \   00000008   0xF64F 0x72C7      MOVW     R2,#+65479
   \   0000000C   0x4011             ANDS     R1,R2,R1
   \   0000000E   0x8021             STRH     R1,[R4, #+0]
   1231            SPI2->CR1 |= 0x0008;
   \   00000010   0x8821             LDRH     R1,[R4, #+0]
   \   00000012   0xF041 0x0108      ORR      R1,R1,#0x8
   \   00000016   0x8021             STRH     R1,[R4, #+0]
   1232          
   1233            /* Write 16-bit Index (then Read Reg) */
   1234            LCD_WriteRegIndex(LCD_Reg);
   \   00000018   0x.... 0x....      BL       LCD_WriteRegIndex
   1235          
   1236            /* Read 16-bit Reg */
   1237            /* Reset LCD control line(/CS) and Send Start-Byte */
   1238            LCD_nCS_StartByte(START_BYTE | READ_REG);
   \   0000001C   0x2073             MOVS     R0,#+115
   \   0000001E   0x.... 0x....      BL       LCD_nCS_StartByte
   1239            
   1240            for(i = 0; i < 5; i++)
   \   00000022   0x2505             MOVS     R5,#+5
   1241            {
   1242              SPI_I2S_SendData(SPI2, 0xFF);
   \                     ??LCD_ReadReg_0:
   \   00000024   0x21FF             MOVS     R1,#+255
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       SPI_I2S_SendData
   1243              while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_ReadReg_1:
   \   0000002C   0x2180             MOVS     R1,#+128
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD1F9             BNE.N    ??LCD_ReadReg_1
   1244              {
   1245              }
   1246              /* One byte of invalid dummy data read after the start byte */
   1247              while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
   \                     ??LCD_ReadReg_2:
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD0F9             BEQ.N    ??LCD_ReadReg_2
   1248              {    
   1249              }
   1250              SPI_I2S_ReceiveData(SPI2); 
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       SPI_I2S_ReceiveData
   1251            }
   \   0000004A   0x1E6D             SUBS     R5,R5,#+1
   \   0000004C   0xD1EA             BNE.N    ??LCD_ReadReg_0
   1252          
   1253            SPI_I2S_SendData(SPI2, 0xFF);
   \   0000004E   0x21FF             MOVS     R1,#+255
   \   00000050   0x4620             MOV      R0,R4
   \   00000052   0x.... 0x....      BL       SPI_I2S_SendData
   1254            /* Read upper byte */
   1255            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_ReadReg_3:
   \   00000056   0x2180             MOVS     R1,#+128
   \   00000058   0x4620             MOV      R0,R4
   \   0000005A   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000005E   0x2800             CMP      R0,#+0
   \   00000060   0xD1F9             BNE.N    ??LCD_ReadReg_3
   1256            {
   1257            }
   1258            /* Read lower byte */
   1259            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
   \                     ??LCD_ReadReg_4:
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0x4620             MOV      R0,R4
   \   00000066   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD0F9             BEQ.N    ??LCD_ReadReg_4
   1260            {
   1261            }
   1262            tmp = SPI_I2S_ReceiveData(SPI2);
   \   0000006E   0x4620             MOV      R0,R4
   \   00000070   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   00000074   0x4605             MOV      R5,R0
   1263            
   1264            
   1265            SPI_I2S_SendData(SPI2, 0xFF);
   \   00000076   0x21FF             MOVS     R1,#+255
   \   00000078   0x4620             MOV      R0,R4
   \   0000007A   0x.... 0x....      BL       SPI_I2S_SendData
   1266            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_ReadReg_5:
   \   0000007E   0x2180             MOVS     R1,#+128
   \   00000080   0x4620             MOV      R0,R4
   \   00000082   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD1F9             BNE.N    ??LCD_ReadReg_5
   1267            {
   1268            }
   1269            /* Read lower byte */
   1270            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_RXNE) == RESET)
   \                     ??LCD_ReadReg_6:
   \   0000008A   0x2101             MOVS     R1,#+1
   \   0000008C   0x4620             MOV      R0,R4
   \   0000008E   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD0F9             BEQ.N    ??LCD_ReadReg_6
   1271            {
   1272            }
   1273            tmp = ((tmp & 0xFF) << 8) | SPI_I2S_ReceiveData(SPI2);
   \   00000096   0x4620             MOV      R0,R4
   \   00000098   0x.... 0x....      BL       SPI_I2S_ReceiveData
   \   0000009C   0x4606             MOV      R6,R0
   1274          
   1275            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   0000009E   0x2201             MOVS     R2,#+1
   \   000000A0   0x2104             MOVS     R1,#+4
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable25_1  ;; 0x40010c00
   \   000000A6   0x.... 0x....      BL       GPIO_WriteBit
   1276          
   1277            /* SPI2 prescaler: 2 */
   1278            SPI2->CR1 &= 0xFFC7;
   \   000000AA   0x8820             LDRH     R0,[R4, #+0]
   \   000000AC   0xF64F 0x71C7      MOVW     R1,#+65479
   \   000000B0   0x4008             ANDS     R0,R1,R0
   \   000000B2   0x8020             STRH     R0,[R4, #+0]
   1279          
   1280            return tmp;
   \   000000B4   0xEA46 0x2005      ORR      R0,R6,R5, LSL #+8
   \   000000B8   0xB280             UXTH     R0,R0
   \   000000BA   0xBD70             POP      {R4-R6,PC}       ;; return
   1281          }
   1282          
   1283          /*******************************************************************************
   1284          * Function Name  : LCD_WriteRAM_Prepare
   1285          * Description    : Prepare to write to the LCD RAM.
   1286          * Input          : None
   1287          * Output         : None
   1288          * Return         : None
   1289          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1290          void LCD_WriteRAM_Prepare(void)
   1291          {
   \                     LCD_WriteRAM_Prepare:
   \   00000000   0xB580             PUSH     {R7,LR}
   1292            LCD_WriteRegIndex(R34); /* Select GRAM Reg */
   \   00000002   0x2022             MOVS     R0,#+34
   \   00000004   0x.... 0x....      BL       LCD_WriteRegIndex
   1293          
   1294            /* Reset LCD control line(/CS) and Send Start-Byte */
   1295            LCD_nCS_StartByte(START_BYTE | WRITE_REG);
   \   00000008   0x2072             MOVS     R0,#+114
   \   0000000A   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000E   0x....             B.N      LCD_nCS_StartByte
   1296          }
   1297          
   1298          /*******************************************************************************
   1299          * Function Name  : LCD_WriteRAMWord
   1300          * Description    : Writes 1 word to the LCD RAM.
   1301          * Input          : - RGB_Code: the pixel color in RGB mode (5-6-5).
   1302          * Output         : None
   1303          * Return         : None
   1304          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1305          void LCD_WriteRAMWord(u16 RGB_Code)
   1306          {
   \                     LCD_WriteRAMWord:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   1307            LCD_WriteRAM_Prepare();
   \   00000004   0x.... 0x....      BL       LCD_WriteRAM_Prepare
   1308          
   1309            LCD_WriteRAM(RGB_Code);
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0x.... 0x....      BL       LCD_WriteRAM
   1310          
   1311            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x2104             MOVS     R1,#+4
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable25_1  ;; 0x40010c00
   \   00000016   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001A   0x.... 0x....      B.W      GPIO_WriteBit
   1312          }
   1313          
   1314          /*******************************************************************************
   1315          * Function Name  : LCD_WriteRegHX8312
   1316          * Description    : Writes to the selected LCD HX8312 register.
   1317          * Input          : - LCD_Reg: address of the selected register.
   1318          *                  - LCD_RegValue: value to write to the selected register.
   1319          * Output         : None
   1320          * Return         : None
   1321          *******************************************************************************/
   1322          static void LCD_WriteRegHX8312(u8 LCD_Reg, u8 LCD_RegValue)
   1323          {
   1324            u16 tmp = 0;
   1325            
   1326            LCD_CtrlLinesWrite(GPIOD, CtrlPin_NWR, Bit_RESET);
   1327            LCD_CtrlLinesWrite(GPIOD, CtrlPin_RS, Bit_RESET);
   1328            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_RESET);
   1329            
   1330            tmp = LCD_Reg << 8;
   1331            tmp |= LCD_RegValue;
   1332          
   1333            SPI_I2S_SendData(SPI2, tmp);
   1334            while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   1335            {
   1336            }
   1337            
   1338            LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   1339          }
   1340          
   1341          /*******************************************************************************
   1342          * Function Name  : LCD_WriteReg
   1343          * Description    : Writes to the selected LCD register.
   1344          * Input          : - LCD_Reg: address of the selected register.
   1345          *                  - LCD_RegValue: value to write to the selected register.
   1346          * Output         : None
   1347          * Return         : None
   1348          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1349          void LCD_WriteReg(u8 LCD_Reg, u16 LCD_RegValue)
   1350          {
   \                     LCD_WriteReg:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   1351            if(LCDType == LCD_ILI9320)
   \   00000006   0x....             LDR.N    R0,??DataTable23
   \   00000008   0x6841             LDR      R1,[R0, #+4]
   \   0000000A   0xF249 0x3220      MOVW     R2,#+37664
   \   0000000E   0x4291             CMP      R1,R2
   \   00000010   0xD120             BNE.N    ??LCD_WriteReg_0
   1352            {
   1353              LCD_WriteRegILI9320(LCD_Reg, LCD_RegValue);
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       LCD_WriteRegIndex
   \   00000018   0x2072             MOVS     R0,#+114
   \   0000001A   0x.... 0x....      BL       LCD_nCS_StartByte
   \   0000001E   0x.... 0x....      LDR.W    R6,??DataTable25_2  ;; 0x40003800
   \   00000022   0x0A29             LSRS     R1,R5,#+8
   \   00000024   0x4630             MOV      R0,R6
   \   00000026   0x.... 0x....      BL       SPI_I2S_SendData
   \                     ??LCD_WriteReg_1:
   \   0000002A   0x2180             MOVS     R1,#+128
   \   0000002C   0x4630             MOV      R0,R6
   \   0000002E   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD1F9             BNE.N    ??LCD_WriteReg_1
   \   00000036   0xB2E9             UXTB     R1,R5
   \   00000038   0x4630             MOV      R0,R6
   \   0000003A   0x.... 0x....      BL       SPI_I2S_SendData
   \                     ??LCD_WriteReg_2:
   \   0000003E   0x2180             MOVS     R1,#+128
   \   00000040   0x4630             MOV      R0,R6
   \   00000042   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD1F9             BNE.N    ??LCD_WriteReg_2
   \                     ??LCD_WriteReg_3:
   \   0000004A   0x2201             MOVS     R2,#+1
   \   0000004C   0x2104             MOVS     R1,#+4
   \   0000004E   0x....             LDR.N    R0,??DataTable25_1  ;; 0x40010c00
   \   00000050   0x....             B.N      ?Subroutine3
   1354            }
   1355            else if(LCDType == LCD_HX8312)
   1356            {
   1357              LCD_WriteRegHX8312(LCD_Reg, ((u8)LCD_RegValue));
   1358            }
   1359          }
   \                     ??LCD_WriteReg_4:
   \   00000052   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??LCD_WriteReg_0:
   \   00000054   0x6840             LDR      R0,[R0, #+4]
   \   00000056   0xF248 0x3112      MOVW     R1,#+33554
   \   0000005A   0x4288             CMP      R0,R1
   \   0000005C   0xD1F9             BNE.N    ??LCD_WriteReg_4
   \   0000005E   0x....             LDR.N    R6,??DataTable25_3  ;; 0x40011400
   \   00000060   0x2200             MOVS     R2,#+0
   \   00000062   0xF44F 0x4100      MOV      R1,#+32768
   \   00000066   0x4630             MOV      R0,R6
   \   00000068   0x.... 0x....      BL       GPIO_WriteBit
   \   0000006C   0x2200             MOVS     R2,#+0
   \   0000006E   0x2180             MOVS     R1,#+128
   \   00000070   0x4630             MOV      R0,R6
   \   00000072   0x.... 0x....      BL       GPIO_WriteBit
   \   00000076   0x2200             MOVS     R2,#+0
   \   00000078   0x2104             MOVS     R1,#+4
   \   0000007A   0x....             LDR.N    R0,??DataTable25_1  ;; 0x40010c00
   \   0000007C   0x.... 0x....      BL       GPIO_WriteBit
   \   00000080   0x....             LDR.N    R6,??DataTable25_2  ;; 0x40003800
   \   00000082   0xB2ED             UXTB     R5,R5
   \   00000084   0xEA45 0x2104      ORR      R1,R5,R4, LSL #+8
   \   00000088   0x4630             MOV      R0,R6
   \   0000008A   0x.... 0x....      BL       SPI_I2S_SendData
   \                     ??LCD_WriteReg_5:
   \   0000008E   0x2180             MOVS     R1,#+128
   \   00000090   0x4630             MOV      R0,R6
   \   00000092   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD1F9             BNE.N    ??LCD_WriteReg_5
   \   0000009A   0xE7D6             B.N      ??LCD_WriteReg_3
   1360          
   1361          
   1362          /*******************************************************************************
   1363          * Function Name  : LCD_WriteRAM
   1364          * Description    : Writes to the LCD RAM.
   1365          * Input          : - RGB_Code: the pixel color in RGB mode (5-6-5).
   1366          * Output         : None
   1367          * Return         : None
   1368          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1369          void LCD_WriteRAM(u16 RGB_Code)
   1370          {
   \                     LCD_WriteRAM:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   1371            if(LCDType == LCD_ILI9320)
   \   00000004   0x....             LDR.N    R5,??DataTable23
   \   00000006   0x6868             LDR      R0,[R5, #+4]
   \   00000008   0xF249 0x3120      MOVW     R1,#+37664
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD114             BNE.N    ??LCD_WriteRAM_0
   1372            {
   1373              SPI_I2S_SendData(SPI2, RGB_Code >> 8);
   \   00000010   0x....             LDR.N    R6,??DataTable25_2  ;; 0x40003800
   \   00000012   0x0A21             LSRS     R1,R4,#+8
   \   00000014   0x4630             MOV      R0,R6
   \   00000016   0x.... 0x....      BL       SPI_I2S_SendData
   1374              while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_WriteRAM_1:
   \   0000001A   0x2180             MOVS     R1,#+128
   \   0000001C   0x4630             MOV      R0,R6
   \   0000001E   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD1F9             BNE.N    ??LCD_WriteRAM_1
   1375              {
   1376              }
   1377              SPI_I2S_SendData(SPI2, RGB_Code & 0xFF);
   \   00000026   0xB2E1             UXTB     R1,R4
   \   00000028   0x4630             MOV      R0,R6
   \   0000002A   0x.... 0x....      BL       SPI_I2S_SendData
   1378              while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_WriteRAM_2:
   \   0000002E   0x2180             MOVS     R1,#+128
   \   00000030   0x4630             MOV      R0,R6
   \   00000032   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD1F9             BNE.N    ??LCD_WriteRAM_2
   1379              {
   1380              }
   1381            }
   1382            if(LCDType == LCD_HX8312)
   \                     ??LCD_WriteRAM_0:
   \   0000003A   0x6868             LDR      R0,[R5, #+4]
   \   0000003C   0xF248 0x3112      MOVW     R1,#+33554
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xD120             BNE.N    ??LCD_WriteRAM_3
   1383            {
   1384              LCD_CtrlLinesWrite(GPIOD, CtrlPin_NWR, Bit_RESET);
   \   00000044   0x....             LDR.N    R5,??DataTable25_3  ;; 0x40011400
   \   00000046   0x2200             MOVS     R2,#+0
   \   00000048   0xF44F 0x4100      MOV      R1,#+32768
   \   0000004C   0x4628             MOV      R0,R5
   \   0000004E   0x.... 0x....      BL       GPIO_WriteBit
   1385              LCD_CtrlLinesWrite(GPIOD, CtrlPin_RS, Bit_SET);
   \   00000052   0x2201             MOVS     R2,#+1
   \   00000054   0x2180             MOVS     R1,#+128
   \   00000056   0x4628             MOV      R0,R5
   \   00000058   0x.... 0x....      BL       GPIO_WriteBit
   1386              LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_RESET);
   \   0000005C   0x....             LDR.N    R5,??DataTable25_1  ;; 0x40010c00
   \   0000005E   0x2200             MOVS     R2,#+0
   \   00000060   0x2104             MOVS     R1,#+4
   \   00000062   0x4628             MOV      R0,R5
   \   00000064   0x.... 0x....      BL       GPIO_WriteBit
   1387          
   1388              SPI_I2S_SendData(SPI2, RGB_Code);
   \   00000068   0x....             LDR.N    R6,??DataTable25_2  ;; 0x40003800
   \   0000006A   0x4621             MOV      R1,R4
   \   0000006C   0x4630             MOV      R0,R6
   \   0000006E   0x.... 0x....      BL       SPI_I2S_SendData
   1389              while(SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY) != RESET)
   \                     ??LCD_WriteRAM_4:
   \   00000072   0x2180             MOVS     R1,#+128
   \   00000074   0x4630             MOV      R0,R6
   \   00000076   0x.... 0x....      BL       SPI_I2S_GetFlagStatus
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD1F9             BNE.N    ??LCD_WriteRAM_4
   1390              {
   1391              }
   1392            
   1393              LCD_CtrlLinesWrite(GPIOB, CtrlPin_NCS, Bit_SET);
   \   0000007E   0x2201             MOVS     R2,#+1
   \   00000080   0x2104             MOVS     R1,#+4
   \   00000082   0x4628             MOV      R0,R5
   \   00000084   0x....             B.N      ?Subroutine3
   1394            }
   1395          }
   \                     ??LCD_WriteRAM_3:
   \   00000086   0xBD70             POP      {R4-R6,PC}       ;; return
   1396          
   1397          /*******************************************************************************
   1398          * Function Name  : LCD_PowerOn
   1399          * Description    : Power on the LCD.
   1400          * Input          : None
   1401          * Output         : None
   1402          * Return         : None
   1403          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1404          void LCD_PowerOn(void)
   1405          {
   \                     LCD_PowerOn:
   \   00000000   0xB580             PUSH     {R7,LR}
   1406            if(LCDType == LCD_ILI9320)
   \   00000002   0x....             LDR.N    R0,??DataTable25
   \   00000004   0x6841             LDR      R1,[R0, #+4]
   \   00000006   0xF249 0x3220      MOVW     R2,#+37664
   \   0000000A   0x4291             CMP      R1,R2
   \   0000000C   0xD138             BNE.N    ??LCD_PowerOn_0
   1407            {
   1408              /* Power On sequence ---------------------------------------------------------*/
   1409              LCD_WriteReg(R16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x2010             MOVS     R0,#+16
   \   00000012   0x.... 0x....      BL       LCD_WriteReg
   1410              LCD_WriteReg(R17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x2011             MOVS     R0,#+17
   \   0000001A   0x.... 0x....      BL       LCD_WriteReg
   1411              LCD_WriteReg(R18, 0x0000); /* VREG1OUT voltage */
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x2012             MOVS     R0,#+18
   \   00000022   0x.... 0x....      BL       LCD_WriteReg
   1412              LCD_WriteReg(R19, 0x0000); /* VDV[4:0] for VCOM amplitude */
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x2013             MOVS     R0,#+19
   \   0000002A   0x.... 0x....      BL       LCD_WriteReg
   1413              TB_Wait(400);                 /* Dis-charge capacitor power voltage (200ms) */
   \   0000002E   0xF44F 0x70C8      MOV      R0,#+400
   \   00000032   0x.... 0x....      BL       TB_Wait
   1414              LCD_WriteReg(R16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
   \   00000036   0xF241 0x71B0      MOVW     R1,#+6064
   \   0000003A   0x2010             MOVS     R0,#+16
   \   0000003C   0x.... 0x....      BL       LCD_WriteReg
   1415              LCD_WriteReg(R17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
   \   00000040   0xF240 0x1137      MOVW     R1,#+311
   \   00000044   0x2011             MOVS     R0,#+17
   \   00000046   0x.... 0x....      BL       LCD_WriteReg
   1416              TB_Wait(100);                  /* Delay 50 ms */
   \   0000004A   0x2064             MOVS     R0,#+100
   \   0000004C   0x.... 0x....      BL       TB_Wait
   1417              LCD_WriteReg(R18, 0x0139); /* VREG1OUT voltage */
   \   00000050   0xF240 0x1139      MOVW     R1,#+313
   \   00000054   0x2012             MOVS     R0,#+18
   \   00000056   0x.... 0x....      BL       LCD_WriteReg
   1418              TB_Wait(100);                  /* delay 50 ms */
   \   0000005A   0x2064             MOVS     R0,#+100
   \   0000005C   0x.... 0x....      BL       TB_Wait
   1419              LCD_WriteReg(R19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
   \   00000060   0xF44F 0x51E8      MOV      R1,#+7424
   \   00000064   0x2013             MOVS     R0,#+19
   \   00000066   0x.... 0x....      BL       LCD_WriteReg
   1420              LCD_WriteReg(R41, 0x0013); /* VCM[4:0] for VCOMH */
   \   0000006A   0x2113             MOVS     R1,#+19
   \   0000006C   0x2029             MOVS     R0,#+41
   \   0000006E   0x.... 0x....      BL       LCD_WriteReg
   1421              TB_Wait(100);                  /* delay 50 ms */
   \   00000072   0x2064             MOVS     R0,#+100
   \   00000074   0x.... 0x....      BL       TB_Wait
   1422              LCD_WriteReg(R7, 0x0173);  /* 262K color and display ON */
   \   00000078   0xF240 0x1173      MOVW     R1,#+371
   \   0000007C   0x2007             MOVS     R0,#+7
   \   0000007E   0x....             B.N      ?Subroutine4
   1423            }
   1424            else if(LCDType == LCD_HX8312)
   \                     ??LCD_PowerOn_0:
   \   00000080   0x6840             LDR      R0,[R0, #+4]
   \   00000082   0xF248 0x3112      MOVW     R1,#+33554
   \   00000086   0x4288             CMP      R0,R1
   \   00000088   0xD13C             BNE.N    ??LCD_PowerOn_1
   1425            {  
   1426              /* Power On Set */
   1427              LCD_WriteReg(R28, 0x73);
   \   0000008A   0x2173             MOVS     R1,#+115
   \   0000008C   0x201C             MOVS     R0,#+28
   \   0000008E   0x.... 0x....      BL       LCD_WriteReg
   1428              LCD_WriteReg(R36, 0x74);
   \   00000092   0x2174             MOVS     R1,#+116
   \   00000094   0x2024             MOVS     R0,#+36
   \   00000096   0x.... 0x....      BL       LCD_WriteReg
   1429              LCD_WriteReg(R30, 0x01);
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0x201E             MOVS     R0,#+30
   \   0000009E   0x.... 0x....      BL       LCD_WriteReg
   1430              LCD_WriteReg(R24, 0xC1);
   \   000000A2   0x21C1             MOVS     R1,#+193
   \   000000A4   0x2018             MOVS     R0,#+24
   \   000000A6   0x.... 0x....      BL       LCD_WriteReg
   1431              TB_Wait(20); /* Delay 10 ms */
   \   000000AA   0x2014             MOVS     R0,#+20
   \   000000AC   0x.... 0x....      BL       TB_Wait
   1432              LCD_WriteReg(R24, 0xE1);
   \   000000B0   0x21E1             MOVS     R1,#+225
   \   000000B2   0x2018             MOVS     R0,#+24
   \   000000B4   0x.... 0x....      BL       LCD_WriteReg
   1433              LCD_WriteReg(R24, 0xF1);
   \   000000B8   0x21F1             MOVS     R1,#+241
   \   000000BA   0x2018             MOVS     R0,#+24
   \   000000BC   0x.... 0x....      BL       LCD_WriteReg
   1434              TB_Wait(120); /* Delay 60 ms */
   \   000000C0   0x2078             MOVS     R0,#+120
   \   000000C2   0x.... 0x....      BL       TB_Wait
   1435              LCD_WriteReg(R24, 0xF5);
   \   000000C6   0x21F5             MOVS     R1,#+245
   \   000000C8   0x2018             MOVS     R0,#+24
   \   000000CA   0x.... 0x....      BL       LCD_WriteReg
   1436              TB_Wait(120); /* Delay 60 ms */
   \   000000CE   0x2078             MOVS     R0,#+120
   \   000000D0   0x.... 0x....      BL       TB_Wait
   1437              LCD_WriteReg(R27, 0x09);
   \   000000D4   0x2109             MOVS     R1,#+9
   \   000000D6   0x201B             MOVS     R0,#+27
   \   000000D8   0x.... 0x....      BL       LCD_WriteReg
   1438              TB_Wait(20); /* Delay 10 ms */
   \   000000DC   0x2014             MOVS     R0,#+20
   \   000000DE   0x.... 0x....      BL       TB_Wait
   1439              LCD_WriteReg(R31, 0x11);
   \   000000E2   0x2111             MOVS     R1,#+17
   \   000000E4   0x201F             MOVS     R0,#+31
   \   000000E6   0x.... 0x....      BL       LCD_WriteReg
   1440              LCD_WriteReg(R32, 0x0E);
   \   000000EA   0x210E             MOVS     R1,#+14
   \   000000EC   0x2020             MOVS     R0,#+32
   \   000000EE   0x.... 0x....      BL       LCD_WriteReg
   1441              LCD_WriteReg(R30, 0x81);
   \   000000F2   0x2181             MOVS     R1,#+129
   \   000000F4   0x201E             MOVS     R0,#+30
   \   000000F6   0x.... 0x....      BL       LCD_WriteReg
   1442              TB_Wait(20); /* Delay 10 ms */
   \   000000FA   0x2014             MOVS     R0,#+20
   \   000000FC   0xE8BD 0x4002      POP      {R1,LR}
   \   00000100   0x.... 0x....      B.W      TB_Wait
   1443            }
   1444          }
   \                     ??LCD_PowerOn_1:
   \   00000104   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0xE8BD 0x4004      POP      {R2,LR}
   \   00000004   0x....             B.N      LCD_WriteReg
   1445          
   1446          /*******************************************************************************
   1447          * Function Name  : LCD_DisplayOn
   1448          * Description    : Enables the Display.
   1449          * Input          : None
   1450          * Output         : None
   1451          * Return         : None
   1452          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1453          void LCD_DisplayOn(void)
   1454          {
   \                     LCD_DisplayOn:
   \   00000000   0xB580             PUSH     {R7,LR}
   1455            if(LCDType == LCD_ILI9320)
   \   00000002   0x....             LDR.N    R0,??DataTable25
   \   00000004   0x6841             LDR      R1,[R0, #+4]
   \   00000006   0xF249 0x3220      MOVW     R2,#+37664
   \   0000000A   0x4291             CMP      R1,R2
   \   0000000C   0xBF04             ITT      EQ 
   \   0000000E   0xF240 0x1173      MOVWEQ   R1,#+371
   \   00000012   0x2007             MOVEQ    R0,#+7
   1456            {
   1457              /* Display On */
   1458              LCD_WriteReg(R7, 0x0173); /* 262K color and display ON */
   \   00000014   0xD019             BEQ.N    ??LCD_DisplayOn_0
   1459            }
   1460            else if(LCDType == LCD_HX8312)
   \   00000016   0x6840             LDR      R0,[R0, #+4]
   \   00000018   0xF248 0x3112      MOVW     R1,#+33554
   \   0000001C   0x4288             CMP      R0,R1
   \   0000001E   0xD115             BNE.N    ??LCD_DisplayOn_1
   1461            {  
   1462              LCD_WriteReg(R1, 0x50);
   \   00000020   0x2150             MOVS     R1,#+80
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      BL       LCD_WriteReg
   1463              LCD_WriteReg(R5, 0x04);
   \   00000028   0x2104             MOVS     R1,#+4
   \   0000002A   0x2005             MOVS     R0,#+5
   \   0000002C   0x.... 0x....      BL       LCD_WriteReg
   1464          
   1465              /* Display On */
   1466              LCD_WriteReg(R0, 0x80);
   \   00000030   0x2180             MOVS     R1,#+128
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       LCD_WriteReg
   1467              LCD_WriteReg(R59, 0x01);
   \   00000038   0x2101             MOVS     R1,#+1
   \   0000003A   0x203B             MOVS     R0,#+59
   \   0000003C   0x.... 0x....      BL       LCD_WriteReg
   1468              TB_Wait(80);                 /* Delay 40 ms */
   \   00000040   0x2050             MOVS     R0,#+80
   \   00000042   0x.... 0x....      BL       TB_Wait
   1469              LCD_WriteReg(R0, 0x20);
   \   00000046   0x2120             MOVS     R1,#+32
   \   00000048   0x2000             MOVS     R0,#+0
   1470            }  
   \                     ??LCD_DisplayOn_0:
   \   0000004A   0x....             B.N      ?Subroutine4
   1471          }
   \                     ??LCD_DisplayOn_1:
   \   0000004C   0xBD01             POP      {R0,PC}          ;; return
   1472          
   1473          /*******************************************************************************
   1474          * Function Name  : LCD_DisplayOff
   1475          * Description    : Disables the Display.
   1476          * Input          : None
   1477          * Output         : None
   1478          * Return         : None
   1479          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1480          void LCD_DisplayOff(void)
   1481          {
   \                     LCD_DisplayOff:
   \   00000000   0xB580             PUSH     {R7,LR}
   1482            if(LCDType == LCD_ILI9320)
   \   00000002   0x....             LDR.N    R0,??DataTable25
   \   00000004   0x6841             LDR      R1,[R0, #+4]
   \   00000006   0xF249 0x3220      MOVW     R2,#+37664
   \   0000000A   0x4291             CMP      R1,R2
   \   0000000C   0xBF04             ITT      EQ 
   \   0000000E   0x2100             MOVEQ    R1,#+0
   \   00000010   0x2007             MOVEQ    R0,#+7
   1483            {
   1484              /* Display Off */
   1485              LCD_WriteReg(R7, 0x0);
   \   00000012   0xD00D             BEQ.N    ??LCD_DisplayOff_0
   1486            }
   1487            else if(LCDType == LCD_HX8312)
   \   00000014   0x6840             LDR      R0,[R0, #+4]
   \   00000016   0xF248 0x3112      MOVW     R1,#+33554
   \   0000001A   0x4288             CMP      R0,R1
   \   0000001C   0xD109             BNE.N    ??LCD_DisplayOff_1
   1488            { 
   1489              /* Display Off */
   1490              LCD_WriteReg(R0, 0xA0);
   \   0000001E   0x21A0             MOVS     R1,#+160
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       LCD_WriteReg
   1491              TB_Wait(80);                 /* Delay 40 ms */
   \   00000026   0x2050             MOVS     R0,#+80
   \   00000028   0x.... 0x....      BL       TB_Wait
   1492              LCD_WriteReg(R59, 0x00);
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x203B             MOVS     R0,#+59
   1493            } 
   \                     ??LCD_DisplayOff_0:
   \   00000030   0x....             B.N      ?Subroutine4
   1494          }
   \                     ??LCD_DisplayOff_1:
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
   1495          
   1496          /*******************************************************************************
   1497          * Function Name  : LCD_CtrlLinesConfig
   1498          * Description    : Configures LCD control lines in Output Push-Pull mode.
   1499          * Input          : None
   1500          * Output         : None
   1501          * Return         : None
   1502          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1503          void LCD_CtrlLinesConfig(void)
   1504          {
   \                     LCD_CtrlLinesConfig:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   1505            GPIO_InitTypeDef GPIO_InitStructure;
   1506          
   1507            /* Configure NCS (PB.02) in Output Push-Pull mode */
   1508            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
   \   00000004   0x2004             MOVS     R0,#+4
   \   00000006   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   1509            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000000A   0x2003             MOVS     R0,#+3
   \   0000000C   0xF88D 0x0002      STRB     R0,[SP, #+2]
   1510            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
   \   00000010   0x2010             MOVS     R0,#+16
   \   00000012   0xF88D 0x0003      STRB     R0,[SP, #+3]
   1511            GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   00000016   0xA900             ADD      R1,SP,#+0
   \   00000018   0x....             LDR.N    R0,??DataTable25_1  ;; 0x40010c00
   \   0000001A   0x.... 0x....      BL       GPIO_Init
   1512            
   1513            /* Configure NWR(RNW), RS (PD.15, PD.07) in Output Push-Pull mode */
   1514            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_15;
   \   0000001E   0xF248 0x0080      MOVW     R0,#+32896
   \   00000022   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   1515            GPIO_Init(GPIOD, &GPIO_InitStructure);
   \   00000026   0x....             LDR.N    R4,??DataTable25_3  ;; 0x40011400
   \   00000028   0xA900             ADD      R1,SP,#+0
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x.... 0x....      BL       GPIO_Init
   1516            
   1517            LCD_CtrlLinesWrite(GPIOD, CtrlPin_NWR, Bit_SET);
   \   00000030   0x2201             MOVS     R2,#+1
   \   00000032   0xF44F 0x4100      MOV      R1,#+32768
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0x.... 0x....      BL       GPIO_WriteBit
   1518            LCD_CtrlLinesWrite(GPIOD, CtrlPin_RS, Bit_SET);
   \   0000003C   0x2201             MOVS     R2,#+1
   \   0000003E   0x2180             MOVS     R1,#+128
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       GPIO_WriteBit
   1519          }
   \   00000046   0xBD13             POP      {R0,R1,R4,PC}    ;; return
   1520          
   1521          /*******************************************************************************
   1522          * Function Name  : LCD_CtrlLinesWrite
   1523          * Description    : Sets or reset LCD control lines.
   1524          * Input          : - GPIOx: where x can be B or D to select the GPIO peripheral.
   1525          *                  - CtrlPins: the Control line. This parameter can be:
   1526          *                       - CtrlPin_NCS: Chip Select pin (PB.02)
   1527          *                       - CtrlPin_NWR: Read/Write Selection pin (PD.15)
   1528          *                       - CtrlPin_RS: Register/RAM Selection pin (PD.07)
   1529          *                  - BitVal: specifies the value to be written to the selected bit.
   1530          *                    This parameter can be:
   1531          *                       - Bit_RESET: to clear the port pin
   1532          *                       - Bit_SET: to set the port pin
   1533          * Output         : None
   1534          * Return         : None
   1535          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1536          void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, u16 CtrlPins, BitAction BitVal)
   1537          {
   1538            /* Set or Reset the control line */
   1539            GPIO_WriteBit(GPIOx, CtrlPins, BitVal);
   \                     LCD_CtrlLinesWrite:
   \   00000000   0x.... 0x....      B.W      GPIO_WriteBit
   1540          }
   1541          
   1542          /*******************************************************************************
   1543          * Function Name  : LCD_SPIConfig
   1544          * Description    : Configures the SPI2 interface.
   1545          * Input          : None
   1546          * Output         : None
   1547          * Return         : None
   1548          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1549          void LCD_SPIConfig(void)
   1550          {
   \                     LCD_SPIConfig:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   1551            SPI_InitTypeDef    SPI_InitStructure;
   1552            GPIO_InitTypeDef   GPIO_InitStructure;
   1553          
   1554            /* Enable GPIOB clock */
   1555            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
   \   00000004   0x2101             MOVS     R1,#+1
   \   00000006   0x2008             MOVS     R0,#+8
   \   00000008   0x.... 0x....      BL       RCC_APB2PeriphClockCmd
   1556          
   1557            /* Enable SPI2 clock  */
   1558            RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0xF44F 0x4080      MOV      R0,#+16384
   \   00000012   0x.... 0x....      BL       RCC_APB1PeriphClockCmd
   1559          
   1560            /* Configure SPI2 pins: NSS, SCK, MISO and MOSI */
   1561            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
   \   00000016   0xF44F 0x4070      MOV      R0,#+61440
   \   0000001A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   1562            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0xF88D 0x0002      STRB     R0,[SP, #+2]
   1563            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
   \   00000024   0x2018             MOVS     R0,#+24
   \   00000026   0xF88D 0x0003      STRB     R0,[SP, #+3]
   1564            GPIO_Init(GPIOB, &GPIO_InitStructure);
   \   0000002A   0xA900             ADD      R1,SP,#+0
   \   0000002C   0x....             LDR.N    R0,??DataTable25_1  ;; 0x40010c00
   \   0000002E   0x.... 0x....      BL       GPIO_Init
   1565          
   1566            SPI_I2S_DeInit(SPI2);
   \   00000032   0x....             LDR.N    R4,??DataTable25_2  ;; 0x40003800
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       SPI_I2S_DeInit
   1567            
   1568            /* SPI2 Config */
   1569            SPI_StructInit(&SPI_InitStructure);
   \   0000003A   0xA801             ADD      R0,SP,#+4
   \   0000003C   0x.... 0x....      BL       SPI_StructInit
   1570            SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1571            SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
   \   00000046   0xF44F 0x7082      MOV      R0,#+260
   \   0000004A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1572            if(LCDType == LCD_ILI9320)
   \   0000004E   0x....             LDR.N    R0,??DataTable25
   \   00000050   0x6841             LDR      R1,[R0, #+4]
   \   00000052   0xF249 0x3220      MOVW     R2,#+37664
   \   00000056   0x4291             CMP      R1,R2
   \   00000058   0xD107             BNE.N    ??LCD_SPIConfig_0
   1573            {
   1574              SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   1575              SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
   \   00000060   0x2002             MOVS     R0,#+2
   \   00000062   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   1576              SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
   \   00000066   0x2001             MOVS     R0,#+1
   \   00000068   0xE00B             B.N      ??LCD_SPIConfig_1
   1577            }
   1578            else if(LCDType == LCD_HX8312)
   \                     ??LCD_SPIConfig_0:
   \   0000006A   0x6840             LDR      R0,[R0, #+4]
   \   0000006C   0xF248 0x3112      MOVW     R1,#+33554
   \   00000070   0x4288             CMP      R0,R1
   \   00000072   0xD108             BNE.N    ??LCD_SPIConfig_2
   1579            {
   1580              SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;
   \   00000074   0xF44F 0x6000      MOV      R0,#+2048
   \   00000078   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   1581              SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   1582              SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
   \                     ??LCD_SPIConfig_1:
   \   00000082   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   1583            }
   1584            SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
   \                     ??LCD_SPIConfig_2:
   \   00000086   0xF44F 0x7000      MOV      R0,#+512
   \   0000008A   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   1585            SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x9004             STR      R0,[SP, #+16]
   1586            SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
   1587            SPI_Init(SPI2, &SPI_InitStructure);
   \   00000092   0xA901             ADD      R1,SP,#+4
   \   00000094   0x4620             MOV      R0,R4
   \   00000096   0x.... 0x....      BL       SPI_Init
   1588          
   1589            /* SPI2 enable */
   1590            SPI_Cmd(SPI2, ENABLE);
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0x4620             MOV      R0,R4
   \   0000009E   0x.... 0x....      BL       SPI_Cmd
   1591          }
   \   000000A2   0xB006             ADD      SP,SP,#+24
   \   000000A4   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x2201             MOVS     R2,#+1
   \   00000002   0x2104             MOVS     R1,#+4
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable25_1  ;; 0x40010c00
   \   00000008   0xE8BD 0x43F8      POP      {R3-R9,LR}
   \   0000000C   0x.... 0x....      B.W      GPIO_WriteBit

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000004   0x.... 0x....      B.W      GPIO_WriteBit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   0x........         DC32     TextColor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   0x........         DC32     TextColor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \   00000000   0x40010C00         DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_2:
   \   00000000   0x40003800         DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_3:
   \   00000000   0x40011400         DC32     0x40011400

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "                    ">`:
   \   00000000   0x20 0x20          DC8 "                    "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   1592          
   1593          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  LCD_Clear
              0 -> GPIO_WriteBit
             24 -> LCD_SetCursor
             24 -> LCD_WriteRAM
             24 -> LCD_WriteRAM_Prepare
        0  LCD_ClearLine
              0 -> LCD_DisplayStringLine
       16  LCD_CtrlLinesConfig
             16 -> GPIO_Init
             16 -> GPIO_WriteBit
        0  LCD_CtrlLinesWrite
              0 -> GPIO_WriteBit
        0  LCD_DisplayChar
              0 -> LCD_DrawChar
        8  LCD_DisplayOff
              0 -> LCD_WriteReg
              8 -> LCD_WriteReg
              8 -> TB_Wait
        8  LCD_DisplayOn
              0 -> LCD_WriteReg
              8 -> LCD_WriteReg
              8 -> TB_Wait
       24  LCD_DisplayStringLine
             24 -> LCD_DrawChar
       40  LCD_DrawChar
             40 -> GPIO_WriteBit
             40 -> LCD_SetCursor
             40 -> LCD_WriteRAM
             40 -> LCD_WriteRAM_Prepare
       56  LCD_DrawCircle
             56 -> LCD_SetCursor
             56 -> LCD_WriteRAM
             56 -> LCD_WriteRAMWord
       32  LCD_DrawLine
              0 -> GPIO_WriteBit
             32 -> LCD_SetCursor
             32 -> LCD_WriteRAM
             32 -> LCD_WriteRAMWord
             32 -> LCD_WriteRAM_Prepare
       32  LCD_DrawMonoPict
              0 -> GPIO_WriteBit
             32 -> LCD_SetCursor
             32 -> LCD_WriteRAM
             32 -> LCD_WriteRAM_Prepare
       24  LCD_DrawRect
              0 -> LCD_DrawLine
             24 -> LCD_DrawLine
       16  LCD_Init
             16 -> LCD_ReadReg
              0 -> LCD_Setup
             16 -> LCD_Setup
        8  LCD_PowerOn
              0 -> LCD_WriteReg
              8 -> LCD_WriteReg
              0 -> TB_Wait
              8 -> TB_Wait
       16  LCD_ReadReg
             16 -> GPIO_WriteBit
             16 -> LCD_WriteRegIndex
             16 -> LCD_nCS_StartByte
             16 -> SPI_I2S_GetFlagStatus
             16 -> SPI_I2S_ReceiveData
             16 -> SPI_I2S_SendData
       32  LCD_SPIConfig
             32 -> GPIO_Init
             32 -> RCC_APB1PeriphClockCmd
             32 -> RCC_APB2PeriphClockCmd
             32 -> SPI_Cmd
             32 -> SPI_I2S_DeInit
             32 -> SPI_Init
             32 -> SPI_StructInit
        4  LCD_SetBackColor
        8  LCD_SetCursor
              0 -> LCD_WriteReg
              8 -> LCD_WriteReg
       24  LCD_SetDisplayWindow
              0 -> LCD_SetCursor
             24 -> LCD_WriteReg
        4  LCD_SetTextColor
        8  LCD_Setup
              8 -> LCD_CtrlLinesConfig
              8 -> LCD_SPIConfig
              0 -> LCD_WriteReg
              8 -> LCD_WriteReg
              8 -> TB_Wait
        8  LCD_WindowModeDisable
              8 -> LCD_SetDisplayWindow
              0 -> LCD_WriteReg
              8 -> LCD_WriteReg
       16  LCD_WriteRAM
              0 -> GPIO_WriteBit
             16 -> GPIO_WriteBit
             16 -> SPI_I2S_GetFlagStatus
             16 -> SPI_I2S_SendData
        8  LCD_WriteRAMWord
              0 -> GPIO_WriteBit
              8 -> LCD_WriteRAM
              8 -> LCD_WriteRAM_Prepare
        8  LCD_WriteRAM_Prepare
              8 -> LCD_WriteRegIndex
              0 -> LCD_nCS_StartByte
       16  LCD_WriteReg
              0 -> GPIO_WriteBit
             16 -> GPIO_WriteBit
             16 -> LCD_WriteRegIndex
             16 -> LCD_nCS_StartByte
             16 -> SPI_I2S_GetFlagStatus
             16 -> SPI_I2S_SendData
       16  LCD_WriteRegIndex
              0 -> GPIO_WriteBit
             16 -> LCD_nCS_StartByte
             16 -> SPI_I2S_GetFlagStatus
             16 -> SPI_I2S_SendData
       16  LCD_nCS_StartByte
             16 -> GPIO_WriteBit
             16 -> SPI_I2S_GetFlagStatus
             16 -> SPI_I2S_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "                    ">
       4  ??DataTable23
       4  ??DataTable25
       4  ??DataTable25_1
       4  ??DataTable25_2
       4  ??DataTable25_3
       6  ?Subroutine0
       6  ?Subroutine1
      16  ?Subroutine2
       8  ?Subroutine3
       6  ?Subroutine4
    4560  ASCII_Table
      72  LCD_Clear
       6  LCD_ClearLine
      72  LCD_CtrlLinesConfig
       4  LCD_CtrlLinesWrite
      18  LCD_DisplayChar
      52  LCD_DisplayOff
      78  LCD_DisplayOn
      60  LCD_DisplayStringLine
     106  LCD_DrawChar
     424  LCD_DrawCircle
     120  LCD_DrawLine
      86  LCD_DrawMonoPict
      64  LCD_DrawRect
      40  LCD_Init
     262  LCD_PowerOn
     188  LCD_ReadReg
     166  LCD_SPIConfig
      16  LCD_SetBackColor
      68  LCD_SetCursor
     176  LCD_SetDisplayWindow
      16  LCD_SetTextColor
    1234  LCD_Setup
      66  LCD_WindowModeDisable
     136  LCD_WriteRAM
      30  LCD_WriteRAMWord
      16  LCD_WriteRAM_Prepare
     156  LCD_WriteReg
      70  LCD_WriteRegIndex
      42  LCD_nCS_StartByte
       8  TextColor
          BackColor
          LCDType

 
     8 bytes in section .data
 8 490 bytes in section .text
 
 8 490 bytes of CODE memory
     8 bytes of DATA memory

Errors: none
Warnings: none
