###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     04/Nov/2013  13:19:55 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\st\stm32 foc firwmare libraries                       #
#                    v2.0\STM32_FOC_PMSM\src\MC_Display.c                     #
#    Command line =  "D:\st\stm32 foc firwmare libraries                      #
#                    v2.0\STM32_FOC_PMSM\src\MC_Display.c" -D VECT_TAB_FLASH  #
#                    -lCN "D:\st\stm32 foc firwmare libraries                 #
#                    v2.0\STM32_FOC_PMSM\EWARM\Debug\List\" --diag_error      #
#                    Pe068,Pe069 -o "D:\st\stm32 foc firwmare libraries       #
#                    v2.0\STM32_FOC_PMSM\EWARM\Debug\Obj\" --no_scheduling    #
#                    --debug --endian=little --cpu=Cortex-M3 --fpu=None       #
#                    --dlib_config D:\IAR\arm\INC\c\DLib_Config_Normal.h -I   #
#                    "D:\st\stm32 foc firwmare libraries                      #
#                    v2.0\STM32_FOC_PMSM\EWARM\..\" -I "D:\st\stm32 foc       #
#                    firwmare libraries v2.0\STM32_FOC_PMSM\EWARM\..\..\STM32 #
#                    F10XFWLIB\inc\" -I "D:\st\stm32 foc firwmare libraries   #
#                    v2.0\STM32_FOC_PMSM\EWARM\..\inc\" -Oh --use_c++_inline  #
#                    --require_prototypes                                     #
#    List file    =  D:\st\stm32 foc firwmare libraries                       #
#                    v2.0\STM32_FOC_PMSM\EWARM\Debug\List\MC_Display.lst      #
#    Object file  =  D:\st\stm32 foc firwmare libraries                       #
#                    v2.0\STM32_FOC_PMSM\EWARM\Debug\Obj\MC_Display.o         #
#                                                                             #
#                                                                             #
###############################################################################

D:\st\stm32 foc firwmare libraries v2.0\STM32_FOC_PMSM\src\MC_Display.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : MC_Display.c
      3          * Author             : IMS Systems Lab 
      4          * Date First Issued  : 21/11/07
      5          * Description        : This file contains the software implementation of the
      6          *                      display routines
      7          ********************************************************************************
      8          * History:
      9          * 21/11/07 v1.0
     10          * 29/05/08 v2.0
     11          * 14/07/08 v2.0.1
     12          ********************************************************************************
     13          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     15          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     16          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     17          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     18          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19          *
     20          * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     21          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     22          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     23          *******************************************************************************/
     24          /* Standard include ----------------------------------------------------------*/
     25          #include "stm32f10x_lib.h"  
     26          
     27          /* Include of other module interface headers ---------------------------------*/
     28          /* Local includes ------------------------------------------------------------*/
     29          
     30          #include "stm32f10x_MClib.h"
     31          #include "MC_Globals.h"
     32          
     33          extern u8 bMenu_index;
     34          
     35          /* Private typedef -----------------------------------------------------------*/
     36          /* Private define ------------------------------------------------------------*/
     37          #define BLINKING_TIME   5  // 5 * timebase_display_5 ms
     38          
     39          #define VISUALIZATION_1   (u8)1
     40          #define VISUALIZATION_2   (u8)2
     41          #define VISUALIZATION_3   (u8)3
     42          #define VISUALIZATION_4   (u8)4
     43          #define VISUALIZATION_5   (u8)5
     44          #define VISUALIZATION_6   (u8)6
     45          #define VISUALIZATION_7   (u8)7
     46          #define VISUALIZATION_8   (u8)8
     47          #define VISUALIZATION_9   (u8)9
     48          #define VISUALIZATION_10  (u8)10
     49          #ifdef FLUX_WEAKENING
     50          #define VISUALIZATION_11  (u8)11
     51          #endif
     52          
     53          #define CHAR_0            (u8)0 //First character of the line starting from the left
     54          #define CHAR_1            (u8)1 
     55          #define CHAR_2            (u8)2
     56          #define CHAR_3            (u8)3
     57          #define CHAR_4            (u8)4
     58          #define CHAR_5            (u8)5
     59          #define CHAR_6            (u8)6
     60          #define CHAR_7            (u8)7
     61          #define CHAR_8            (u8)8
     62          #define CHAR_9            (u8)9
     63          #define CHAR_10           (u8)10
     64          #define CHAR_11           (u8)11
     65          #define CHAR_12           (u8)12
     66          #define CHAR_13           (u8)13
     67          #define CHAR_14           (u8)14
     68          #define CHAR_15           (u8)15
     69          #define CHAR_16           (u8)16
     70          #define CHAR_17           (u8)17
     71          
     72          #ifdef OBSERVER_GAIN_TUNING 
     73          #define CHAR_18           (u8)18
     74          #endif
     75          
     76          #ifdef DAC_FUNCTIONALITY
     77          #define CHAR_19           (u8)19
     78          #endif
     79          
     80          /* Private macro -------------------------------------------------------------*/
     81          /* Private functions ---------------------------------------------------------*/
     82          void Display_5DigitSignedNumber(u8, u8, s16);
     83          u8 ComputeVisualization(u8 );
     84          
     85          /* Private variables ---------------------------------------------------------*/
     86          volatile static u16 hTimebase_Blinking;

   \                                 In section .bss, align 1
     87          static u8 bPrevious_Visualization = 0;
   \                     bPrevious_Visualization:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
     88          static u8 bPresent_Visualization;
     89          
     90          #ifdef FLUX_WEAKENING
     91          extern s16 hFW_V_Ref;
     92          extern s16 hFW_P_Gain;
     93          extern s16 hFW_I_Gain;
     94          extern s16 hVMagn;
     95          #endif
     96          
     97          #ifdef OBSERVER_GAIN_TUNING
     98          extern volatile s32 wK1_LO;
     99          extern volatile s32 wK2_LO;
    100          extern volatile s16 hPLL_P_Gain, hPLL_I_Gain;
    101          #endif
    102          
    103          /*******************************************************************************
    104          * Function Name  : Display_Welcome_Message
    105          * Description    : Welcome message on LCD after power-up
    106          * Input          : None
    107          * Output         : None
    108          * Return         : None
    109          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    110          void Display_Welcome_Message(void)
    111          {
   \                     Display_Welcome_Message:
   \   00000000   0xB580             PUSH     {R7,LR}
    112            u8 *ptr = " STM32 Motor Control";
    113            
    114            LCD_DisplayStringLine(Line0, ptr);
   \   00000002   0x.... 0x....      ADR.W    R1,`?<Constant " STM32 Motor Control">`
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       LCD_DisplayStringLine
    115            
    116            ptr = "  PMSM FOC ver 2.0  ";
    117            LCD_DisplayStringLine(Line1, ptr);
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable51
   \   00000010   0x2018             MOVS     R0,#+24
   \   00000012   0x.... 0x....      BL       LCD_DisplayStringLine
    118              
    119            ptr = " <> Move  ^| Change ";
    120            LCD_DisplayStringLine(Line9, ptr);            
   \   00000016   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   0000001A   0x20D8             MOVS     R0,#+216
   \   0000001C   0xE8BD 0x4004      POP      {R2,LR}
   \   00000020   0x.... 0x....      B.W      LCD_DisplayStringLine
    121          }  
    122          
    123          /*******************************************************************************
    124          * Function Name  : Display_LCD
    125          * Description    : Display routine for LCD management
    126          * Input          : None
    127          * Output         : None
    128          * Return         : None
    129          *******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    130          void Display_LCD(void)
    131          {          
   \                     Display_LCD:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    132            if (TB_DisplayDelay_IsElapsed() == TRUE) 
   \   00000002   0x.... 0x....      BL       TB_DisplayDelay_IsElapsed
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xF040 0x85EB      BNE.W    ??Display_LCD_1
    133            { 
    134              TB_Set_DisplayDelay_500us(500);  //  refresh LCD every 400*5 = 200 ms
   \   0000000C   0xF44F 0x70FA      MOV      R0,#+500
   \   00000010   0x.... 0x....      BL       TB_Set_DisplayDelay_500us
    135          
    136              bPrevious_Visualization = bPresent_Visualization;
   \   00000014   0x.... 0x....      LDR.W    R5,??DataTable51_1
   \   00000018   0x786E             LDRB     R6,[R5, #+1]
   \   0000001A   0x702E             STRB     R6,[R5, #+0]
    137          
    138              bPresent_Visualization = ComputeVisualization(bMenu_index);
   \   0000001C   0x.... 0x....      LDR.W    R4,??DataTable51_2
   \   00000020   0x7820             LDRB     R0,[R4, #+0]
   \   00000022   0x.... 0x....      BL       ComputeVisualization
   \   00000026   0x7068             STRB     R0,[R5, #+1]
    139            
    140              switch(bPresent_Visualization)
   \   00000028   0x1E40             SUBS     R0,R0,#+1
   \   0000002A   0x280A             CMP      R0,#+10
   \   0000002C   0xF200 0x85D9      BHI.W    ??Display_LCD_1
   \   00000030   0xE8DF 0xF010      TBH      [PC, R0, LSL #+1]
   \                     ??Display_LCD_0:
   \   00000034   0x000B 0x005A      DC16     0xB,0x5A,0xE8,0x16F
   \              0x00E8 0x016F
   \   0000003C   0x02C6 0x033C      DC16     0x2C6,0x33C,0x3CE,0x49F
   \              0x03CE 0x049F
   \   00000044   0x04C0 0x0586      DC16     0x4C0,0x586,0x1F6
   \              0x01F6       
    141              {
    142                u8 *ptr;
    143                s16 temp;
    144                      
    145                case(VISUALIZATION_1):
    146                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_2:
   \   0000004A   0x2E01             CMP      R6,#+1
   \   0000004C   0xD01F             BEQ.N    ??Display_LCD_3
    147                  { 
    148          #ifdef NO_SPEED_SENSORS          
    149                    ptr = "   Sensorless Demo  ";
    150                    LCD_DisplayStringLine(Line2,ptr);
   \   0000004E   0x.... 0x....      ADR.W    R1,`?<Constant "   Sensorless Demo  ">`
   \   00000052   0x2030             MOVS     R0,#+48
   \   00000054   0x.... 0x....      BL       LCD_DisplayStringLine
    151          #else          
    152                    LCD_ClearLine(Line2);
    153          #endif          
    154                    LCD_ClearLine(Line3); 
   \   00000058   0x2048             MOVS     R0,#+72
   \   0000005A   0x.... 0x....      BL       LCD_ClearLine
    155                    
    156                    LCD_ClearLine(Line4); 
   \   0000005E   0x2060             MOVS     R0,#+96
   \   00000060   0x.... 0x....      BL       LCD_ClearLine
    157                           
    158                    ptr = " Target     Measured";
    159                    LCD_DisplayStringLine(Line5,ptr); 
   \   00000064   0x.... 0x....      ADR.W    R1,`?<Constant " Target     Measured">`
   \   00000068   0x2078             MOVS     R0,#+120
   \   0000006A   0x.... 0x....      BL       LCD_DisplayStringLine
    160                    
    161                    ptr = "       (rpm)        ";
    162                    LCD_DisplayStringLine(Line7,ptr); 
   \   0000006E   0x.... 0x....      ADR.W    R1,`?<Constant "       (rpm)        ">`
   \   00000072   0x20A8             MOVS     R0,#+168
   \   00000074   0x.... 0x....      BL       LCD_DisplayStringLine
    163                    
    164                    LCD_ClearLine(Line6);        
   \   00000078   0x2090             MOVS     R0,#+144
   \   0000007A   0x.... 0x....      BL       LCD_ClearLine
    165                    
    166                    LCD_ClearLine(Line8);
   \   0000007E   0x20C0             MOVS     R0,#+192
   \   00000080   0x.... 0x....      BL       LCD_ClearLine
    167                    
    168                    ptr = " <> Move  ^| Change ";          
    169                    LCD_DisplayStringLine(Line9, ptr); 
   \   00000084   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   00000088   0x20D8             MOVS     R0,#+216
   \   0000008A   0x.... 0x....      BL       LCD_DisplayStringLine
    170                  }
    171                  
    172                  if(bMenu_index == CONTROL_MODE_MENU_1)
   \                     ??Display_LCD_3:
   \   0000008E   0x7820             LDRB     R0,[R4, #+0]
   \   00000090   0xB918             CBNZ.N   R0,??Display_LCD_4
    173                  {
    174                    LCD_SetTextColor(Red);
   \   00000092   0xF44F 0x4078      MOV      R0,#+63488
   \   00000096   0x.... 0x....      BL       LCD_SetTextColor
    175                  }        
    176                  
    177                  ptr = " Speed control mode";        
    178                  LCD_DisplayStringLine(Line3,ptr);
   \                     ??Display_LCD_4:
   \   0000009A   0x.... 0x....      ADR.W    R1,`?<Constant " Speed control mode">`
   \   0000009E   0x2048             MOVS     R0,#+72
   \   000000A0   0x.... 0x....      BL       LCD_DisplayStringLine
    179                  
    180                  if(bMenu_index == CONTROL_MODE_MENU_1)
   \   000000A4   0x7820             LDRB     R0,[R4, #+0]
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xBF0C             ITE      EQ 
   \   000000AA   0x201F             MOVEQ    R0,#+31
   \   000000AC   0xF44F 0x4078      MOVNE    R0,#+63488
    181                  {
    182                    LCD_SetTextColor(Blue);
    183                  }
    184                  else //REF_SPEED_MENU
    185                  {
    186                    LCD_SetTextColor(Red);
   \   000000B0   0x.... 0x....      BL       LCD_SetTextColor
    187                  }
    188                    
    189                  //Compute target speed in rpm
    190                  temp = (s16)(hSpeed_Reference * 6);                 
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable51_3
   \   000000B8   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
    191                  Display_5DigitSignedNumber(Line7, CHAR_0, temp);
   \   000000BC   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   000000C0   0x004A             LSLS     R2,R1,#+1
   \   000000C2   0xB212             SXTH     R2,R2
   \   000000C4   0x2100             MOVS     R1,#+0
   \   000000C6   0x20A8             MOVS     R0,#+168
   \   000000C8   0x.... 0x....      BL       Display_5DigitSignedNumber
    192                  
    193                  if(bMenu_index != CONTROL_MODE_MENU_1)
   \   000000CC   0x7820             LDRB     R0,[R4, #+0]
   \   000000CE   0xB110             CBZ.N    R0,??Display_LCD_5
    194                  {
    195                    LCD_SetTextColor(Blue);
   \   000000D0   0x201F             MOVS     R0,#+31
   \   000000D2   0x.... 0x....      BL       LCD_SetTextColor
    196                  }
    197                   
    198                  //Compute measured speed in rpm
    199          #ifdef ENCODER
    200                  temp = (s16)(ENC_Get_Mechanical_Speed() * 6);
    201          #endif        
    202          #if defined HALL_SENSORS
    203                  temp = (s16)(HALL_GetSpeed() * 6);
    204          #endif
    205          #if defined NO_SPEED_SENSORS        
    206                  temp = (s16)(STO_Get_Speed_Hz() * 6);
   \                     ??Display_LCD_5:
   \   000000D6   0x.... 0x....      BL       STO_Get_Speed_Hz
    207          #endif        
    208                  Display_5DigitSignedNumber(Line7, CHAR_13, temp); 
   \   000000DA   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   000000DE   0x004A             LSLS     R2,R1,#+1
   \   000000E0   0xB212             SXTH     R2,R2
   \   000000E2   0x210D             MOVS     R1,#+13
   \   000000E4   0xF000 0xBD01      B.W      ??Display_LCD_6
    209                
    210                break;
    211                    
    212                case(VISUALIZATION_2):
    213                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_7:
   \   000000E8   0x2E02             CMP      R6,#+2
   \   000000EA   0xD021             BEQ.N    ??Display_LCD_8
    214                  {           
    215                    ptr = "       Speed        ";
    216                    LCD_DisplayStringLine(Line2,ptr);
   \   000000EC   0x.... 0x....      ADR.W    R1,`?<Constant "       Speed        ">`
   \   000000F0   0x2030             MOVS     R0,#+48
   \   000000F2   0x.... 0x....      BL       LCD_DisplayStringLine
    217                    
    218                    ptr = "    P     I     D   ";
    219                    LCD_DisplayStringLine(Line3,ptr); 
   \   000000F6   0x.... 0x....      ADR.W    R1,`?<Constant "    P     I     D   ">`
   \   000000FA   0x2048             MOVS     R0,#+72
   \   000000FC   0x.... 0x....      BL       LCD_DisplayStringLine
    220                    
    221                    LCD_ClearLine(Line4);
   \   00000100   0x2060             MOVS     R0,#+96
   \   00000102   0x.... 0x....      BL       LCD_ClearLine
    222                    LCD_ClearLine(Line5);
   \   00000106   0x2078             MOVS     R0,#+120
   \   00000108   0x.... 0x....      BL       LCD_ClearLine
    223                     
    224                    ptr = " Target        (rpm)";
    225                    LCD_DisplayStringLine(Line6,ptr); 
   \   0000010C   0x.... 0x....      ADR.W    R1,`?<Constant " Target        (rpm)">`
   \   00000110   0x2090             MOVS     R0,#+144
   \   00000112   0x.... 0x....      BL       LCD_DisplayStringLine
    226                    
    227                    ptr = " Measured      (rpm)";
    228                    LCD_DisplayStringLine(Line7,ptr);
   \   00000116   0x.... 0x....      ADR.W    R1,`?<Constant " Measured      (rpm)">`
   \   0000011A   0x20A8             MOVS     R0,#+168
   \   0000011C   0x.... 0x....      BL       LCD_DisplayStringLine
    229                              
    230                    LCD_ClearLine(Line8);
   \   00000120   0x20C0             MOVS     R0,#+192
   \   00000122   0x.... 0x....      BL       LCD_ClearLine
    231                    
    232                    ptr = " <> Move  ^| Change ";          
    233                    LCD_DisplayStringLine(Line9, ptr); 
   \   00000126   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   0000012A   0x20D8             MOVS     R0,#+216
   \   0000012C   0x.... 0x....      BL       LCD_DisplayStringLine
    234                  }
    235                  
    236                  switch(bMenu_index)
   \                     ??Display_LCD_8:
   \   00000130   0x7820             LDRB     R0,[R4, #+0]
   \   00000132   0x2802             CMP      R0,#+2
   \   00000134   0xD004             BEQ.N    ??Display_LCD_9
   \   00000136   0xD350             BCC.N    ??Display_LCD_10
   \   00000138   0x2804             CMP      R0,#+4
   \   0000013A   0xD033             BEQ.N    ??Display_LCD_11
   \   0000013C   0xD316             BCC.N    ??Display_LCD_12
   \   0000013E   0xE04C             B.N      ??Display_LCD_10
    237                  {
    238                    case(P_SPEED_MENU):
    239                      LCD_SetTextColor(Red);            
   \                     ??Display_LCD_9:
   \   00000140   0xF44F 0x4078      MOV      R0,#+63488
   \   00000144   0x.... 0x....      BL       LCD_SetTextColor
    240                      temp = PID_Speed_InitStructure.hKp_Gain;
    241                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \   00000148   0x.... 0x....      LDR.W    R4,??DataTable51_4
   \   0000014C   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   00000150   0x2101             MOVS     R1,#+1
   \   00000152   0x2060             MOVS     R0,#+96
   \   00000154   0x.... 0x....      BL       Display_5DigitSignedNumber
    242                      LCD_SetTextColor(Blue);
   \   00000158   0x201F             MOVS     R0,#+31
   \   0000015A   0x.... 0x....      BL       LCD_SetTextColor
    243                      
    244                      temp = PID_Speed_InitStructure.hKi_Gain;
    245                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   0000015E   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   00000162   0x2107             MOVS     R1,#+7
   \   00000164   0x2060             MOVS     R0,#+96
   \   00000166   0x.... 0x....      BL       Display_5DigitSignedNumber
    246                      
    247          #ifdef DIFFERENTIAL_TERM_ENABLED            
    248                      temp = PID_Speed_InitStructure.hKd_Gain;
    249                      Display_5DigitSignedNumber(Line4, CHAR_13, temp);
   \   0000016A   0xE014             B.N      ??Display_LCD_13
    250          #else        
    251                      {
    252                        u32 i=0;
    253                        for( i=0; i<5; i++)
    254                        {
    255                          LCD_DisplayChar(Line4, (u16)(320 -(16*(18-i))),'-');
    256                        }
    257                      }
    258          #endif         
    259           
    260                   break;
    261                      
    262                    case(I_SPEED_MENU):                                 
    263                      temp = PID_Speed_InitStructure.hKp_Gain;
    264                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \                     ??Display_LCD_12:
   \   0000016C   0x.... 0x....      LDR.W    R4,??DataTable51_4
   \   00000170   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   00000174   0x2101             MOVS     R1,#+1
   \   00000176   0x2060             MOVS     R0,#+96
   \   00000178   0x.... 0x....      BL       Display_5DigitSignedNumber
    265                      
    266                      LCD_SetTextColor(Red);   
   \   0000017C   0xF44F 0x4078      MOV      R0,#+63488
   \   00000180   0x.... 0x....      BL       LCD_SetTextColor
    267                      temp = PID_Speed_InitStructure.hKi_Gain;
    268                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   00000184   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   00000188   0x2107             MOVS     R1,#+7
   \   0000018A   0x2060             MOVS     R0,#+96
   \   0000018C   0x.... 0x....      BL       Display_5DigitSignedNumber
    269                      LCD_SetTextColor(Blue);
   \   00000190   0x201F             MOVS     R0,#+31
   \   00000192   0x.... 0x....      BL       LCD_SetTextColor
    270                      
    271          #ifdef DIFFERENTIAL_TERM_ENABLED            
    272                      temp = PID_Speed_InitStructure.hKd_Gain;
    273                      Display_5DigitSignedNumber(Line4, CHAR_13, temp);
   \                     ??Display_LCD_13:
   \   00000196   0xF9B4 0x2018      LDRSH    R2,[R4, #+24]
   \   0000019A   0x210D             MOVS     R1,#+13
   \   0000019C   0x2060             MOVS     R0,#+96
   \   0000019E   0x.... 0x....      BL       Display_5DigitSignedNumber
    274          #else        
    275                      {
    276                        u32 i=0;
    277                        for( i=0; i<5; i++)
    278                        {
    279                          LCD_DisplayChar(Line4, (u16)(320 -(16*(18-i))),'-');
    280                        }
    281                      }
    282          #endif
    283          	      break;
   \   000001A2   0xE01A             B.N      ??Display_LCD_10
    284                    
    285          #ifdef DIFFERENTIAL_TERM_ENABLED
    286                      case(D_SPEED_MENU):
    287                        temp = PID_Speed_InitStructure.hKp_Gain;
    288                        Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \                     ??Display_LCD_11:
   \   000001A4   0x.... 0x....      LDR.W    R4,??DataTable51_4
   \   000001A8   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   000001AC   0x2101             MOVS     R1,#+1
   \   000001AE   0x2060             MOVS     R0,#+96
   \   000001B0   0x.... 0x....      BL       Display_5DigitSignedNumber
    289                        
    290                        temp = PID_Speed_InitStructure.hKi_Gain;
    291                        Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   000001B4   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   000001B8   0x2107             MOVS     R1,#+7
   \   000001BA   0x2060             MOVS     R0,#+96
   \   000001BC   0x.... 0x....      BL       Display_5DigitSignedNumber
    292                        
    293                        LCD_SetTextColor(Red);
   \   000001C0   0xF44F 0x4078      MOV      R0,#+63488
   \   000001C4   0x.... 0x....      BL       LCD_SetTextColor
    294                        temp = PID_Speed_InitStructure.hKd_Gain;
    295                        Display_5DigitSignedNumber(Line4, CHAR_13, temp);
   \   000001C8   0xF9B4 0x2018      LDRSH    R2,[R4, #+24]
   \   000001CC   0x210D             MOVS     R1,#+13
   \   000001CE   0x2060             MOVS     R0,#+96
   \   000001D0   0x.... 0x....      BL       Display_5DigitSignedNumber
    296                        LCD_SetTextColor(Blue);
   \   000001D4   0x201F             MOVS     R0,#+31
   \   000001D6   0x.... 0x....      BL       LCD_SetTextColor
    297                    
    298                      break;
    299          #endif
    300                  default:
    301                    break;
    302                  }
    303                  //Independently from the menu, this visualization must display current 
    304                  //and measured speeds
    305                  
    306                  //Display target speed in rpm
    307                  temp = (s16)(hSpeed_Reference * 6);          
   \                     ??Display_LCD_10:
   \   000001DA   0x.... 0x....      LDR.W    R0,??DataTable51_3
   \   000001DE   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
    308                  Display_5DigitSignedNumber(Line6, CHAR_9, temp);
   \   000001E2   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   000001E6   0x004A             LSLS     R2,R1,#+1
   \   000001E8   0xB212             SXTH     R2,R2
   \   000001EA   0x2109             MOVS     R1,#+9
   \   000001EC   0x2090             MOVS     R0,#+144
   \   000001EE   0x.... 0x....      BL       Display_5DigitSignedNumber
    309                  
    310                  //Compute measured speed in rpm
    311          #ifdef ENCODER
    312                  temp = (s16)(ENC_Get_Mechanical_Speed() * 6);
    313          #elif defined HALL_SENSORS
    314                  temp = (s16)(HALL_GetSpeed() * 6);
    315          #elif defined NO_SPEED_SENSORS        
    316                  temp = (s16)(STO_Get_Speed_Hz() * 6);
   \   000001F2   0x.... 0x....      BL       STO_Get_Speed_Hz
    317          #endif
    318                  Display_5DigitSignedNumber(Line7, CHAR_9, temp);         
   \   000001F6   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   000001FA   0x004A             LSLS     R2,R1,#+1
   \   000001FC   0xB212             SXTH     R2,R2
   \   000001FE   0x2109             MOVS     R1,#+9
   \   00000200   0xF000 0xBC73      B.W      ??Display_LCD_6
    319                break;
    320                
    321                case(VISUALIZATION_3):
    322                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_14:
   \   00000204   0x2E03             CMP      R6,#+3
   \   00000206   0xD021             BEQ.N    ??Display_LCD_15
    323                  {           
    324                    ptr = "       Torque       ";
    325                    LCD_DisplayStringLine(Line2,ptr);
   \   00000208   0x.... 0x....      ADR.W    R1,`?<Constant "       Torque       ">`
   \   0000020C   0x2030             MOVS     R0,#+48
   \   0000020E   0x.... 0x....      BL       LCD_DisplayStringLine
    326                    
    327                    ptr = "    P     I     D   ";
    328                    LCD_DisplayStringLine(Line3,ptr); 
   \   00000212   0x.... 0x....      ADR.W    R1,`?<Constant "    P     I     D   ">`
   \   00000216   0x2048             MOVS     R0,#+72
   \   00000218   0x.... 0x....      BL       LCD_DisplayStringLine
    329                    
    330                    LCD_ClearLine(Line4);
   \   0000021C   0x2060             MOVS     R0,#+96
   \   0000021E   0x.... 0x....      BL       LCD_ClearLine
    331                    LCD_ClearLine(Line5);
   \   00000222   0x2078             MOVS     R0,#+120
   \   00000224   0x.... 0x....      BL       LCD_ClearLine
    332                     
    333                    ptr = " Target         (Iq)";
    334                    LCD_DisplayStringLine(Line6,ptr); 
   \   00000228   0x.... 0x....      ADR.W    R1,`?<Constant " Target         (Iq)">`
   \   0000022C   0x2090             MOVS     R0,#+144
   \   0000022E   0x.... 0x....      BL       LCD_DisplayStringLine
    335                    
    336                    ptr = " Measured       (Iq)";
    337                    LCD_DisplayStringLine(Line7,ptr);
   \   00000232   0x.... 0x....      ADR.W    R1,`?<Constant " Measured       (Iq)">`
   \   00000236   0x20A8             MOVS     R0,#+168
   \   00000238   0x.... 0x....      BL       LCD_DisplayStringLine
    338                    
    339                    LCD_ClearLine(Line8);
   \   0000023C   0x20C0             MOVS     R0,#+192
   \   0000023E   0x.... 0x....      BL       LCD_ClearLine
    340                    
    341                    ptr = " <> Move  ^| Change ";          
    342                    LCD_DisplayStringLine(Line9, ptr); 
   \   00000242   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   00000246   0x20D8             MOVS     R0,#+216
   \   00000248   0x.... 0x....      BL       LCD_DisplayStringLine
    343                  }
    344                  
    345                  switch(bMenu_index)
   \                     ??Display_LCD_15:
   \   0000024C   0x7820             LDRB     R0,[R4, #+0]
   \   0000024E   0x2805             CMP      R0,#+5
   \   00000250   0xD004             BEQ.N    ??Display_LCD_16
   \   00000252   0xD350             BCC.N    ??Display_LCD_17
   \   00000254   0x2807             CMP      R0,#+7
   \   00000256   0xD033             BEQ.N    ??Display_LCD_18
   \   00000258   0xD316             BCC.N    ??Display_LCD_19
   \   0000025A   0xE04C             B.N      ??Display_LCD_17
    346                  {
    347                    case(P_TORQUE_MENU):
    348                      LCD_SetTextColor(Red);            
   \                     ??Display_LCD_16:
   \   0000025C   0xF44F 0x4078      MOV      R0,#+63488
   \   00000260   0x.... 0x....      BL       LCD_SetTextColor
    349                      temp = PID_Torque_InitStructure.hKp_Gain;
    350                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \   00000264   0x.... 0x....      LDR.W    R4,??DataTable51_5
   \   00000268   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   0000026C   0x2101             MOVS     R1,#+1
   \   0000026E   0x2060             MOVS     R0,#+96
   \   00000270   0x.... 0x....      BL       Display_5DigitSignedNumber
    351                      LCD_SetTextColor(Blue);
   \   00000274   0x201F             MOVS     R0,#+31
   \   00000276   0x.... 0x....      BL       LCD_SetTextColor
    352                      
    353                      temp = PID_Torque_InitStructure.hKi_Gain;
    354                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   0000027A   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   0000027E   0x2107             MOVS     R1,#+7
   \   00000280   0x2060             MOVS     R0,#+96
   \   00000282   0x.... 0x....      BL       Display_5DigitSignedNumber
    355                      
    356          #ifdef DIFFERENTIAL_TERM_ENABLED            
    357                      temp = PID_Torque_InitStructure.hKd_Gain;
    358                      Display_5DigitSignedNumber(Line4, CHAR_13, temp);
   \   00000286   0xE014             B.N      ??Display_LCD_20
    359          #else        
    360                      {
    361                        u32 i=0;
    362                        for( i=0; i<5; i++)
    363                        {
    364                          LCD_DisplayChar(Line4, (u16)(320 -(16*(18-i))),'-');
    365                        }
    366                      }
    367          #endif       
    368                   break;
    369                      
    370                    case(I_TORQUE_MENU):                                 
    371                      temp = PID_Torque_InitStructure.hKp_Gain;
    372                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \                     ??Display_LCD_19:
   \   00000288   0x.... 0x....      LDR.W    R4,??DataTable51_5
   \   0000028C   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   00000290   0x2101             MOVS     R1,#+1
   \   00000292   0x2060             MOVS     R0,#+96
   \   00000294   0x.... 0x....      BL       Display_5DigitSignedNumber
    373                      
    374                      LCD_SetTextColor(Red);   
   \   00000298   0xF44F 0x4078      MOV      R0,#+63488
   \   0000029C   0x.... 0x....      BL       LCD_SetTextColor
    375                      temp = PID_Torque_InitStructure.hKi_Gain;
    376                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   000002A0   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   000002A4   0x2107             MOVS     R1,#+7
   \   000002A6   0x2060             MOVS     R0,#+96
   \   000002A8   0x.... 0x....      BL       Display_5DigitSignedNumber
    377                      LCD_SetTextColor(Blue);
   \   000002AC   0x201F             MOVS     R0,#+31
   \   000002AE   0x.... 0x....      BL       LCD_SetTextColor
    378                      
    379          #ifdef DIFFERENTIAL_TERM_ENABLED             
    380                      temp = PID_Torque_InitStructure.hKd_Gain;
    381                      Display_5DigitSignedNumber(Line4, CHAR_13, temp);
   \                     ??Display_LCD_20:
   \   000002B2   0xF9B4 0x2018      LDRSH    R2,[R4, #+24]
   \   000002B6   0x210D             MOVS     R1,#+13
   \   000002B8   0x2060             MOVS     R0,#+96
   \   000002BA   0x.... 0x....      BL       Display_5DigitSignedNumber
    382          #else        
    383                      {
    384                        u32 i=0;
    385                        for( i=0; i<5; i++)
    386                        {
    387                          LCD_DisplayChar(Line4, (u16)(320 -(16*(18-i))),'-');
    388                        }
    389                      }
    390          #endif
    391                     break;
   \   000002BE   0xE01A             B.N      ??Display_LCD_17
    392                    
    393          #ifdef DIFFERENTIAL_TERM_ENABLED 
    394                      case(D_TORQUE_MENU):
    395                        temp = PID_Torque_InitStructure.hKp_Gain;
    396                        Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \                     ??Display_LCD_18:
   \   000002C0   0x.... 0x....      LDR.W    R4,??DataTable51_5
   \   000002C4   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   000002C8   0x2101             MOVS     R1,#+1
   \   000002CA   0x2060             MOVS     R0,#+96
   \   000002CC   0x.... 0x....      BL       Display_5DigitSignedNumber
    397                        
    398                        temp = PID_Torque_InitStructure.hKi_Gain;
    399                        Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   000002D0   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   000002D4   0x2107             MOVS     R1,#+7
   \   000002D6   0x2060             MOVS     R0,#+96
   \   000002D8   0x.... 0x....      BL       Display_5DigitSignedNumber
    400                        
    401                        LCD_SetTextColor(Red);
   \   000002DC   0xF44F 0x4078      MOV      R0,#+63488
   \   000002E0   0x.... 0x....      BL       LCD_SetTextColor
    402                        temp = PID_Torque_InitStructure.hKd_Gain;
    403                        Display_5DigitSignedNumber(Line4, CHAR_13, temp);
   \   000002E4   0xF9B4 0x2018      LDRSH    R2,[R4, #+24]
   \   000002E8   0x210D             MOVS     R1,#+13
   \   000002EA   0x2060             MOVS     R0,#+96
   \   000002EC   0x.... 0x....      BL       Display_5DigitSignedNumber
    404                        LCD_SetTextColor(Blue);
   \   000002F0   0x201F             MOVS     R0,#+31
   \   000002F2   0x.... 0x....      BL       LCD_SetTextColor
    405                        
    406                      break;
    407          #endif
    408                  default:
    409                    break;
    410                  }
    411                  //Independently from the menu, this visualization must display current 
    412                  //and measured Iq
    413                  
    414                  temp = hTorque_Reference;          
   \                     ??Display_LCD_17:
   \   000002F6   0x.... 0x....      LDR.W    R0,??DataTable51_6
   \   000002FA   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    415                  Display_5DigitSignedNumber(Line6, CHAR_9, temp);
   \   000002FE   0x2109             MOVS     R1,#+9
   \   00000300   0x2090             MOVS     R0,#+144
   \   00000302   0x.... 0x....      BL       Display_5DigitSignedNumber
    416          
    417                  temp = Stat_Curr_q_d.qI_Component1;
    418                  Display_5DigitSignedNumber(Line7, CHAR_9, temp);        
   \   00000306   0x.... 0x....      LDR.W    R0,??DataTable51_7
   \   0000030A   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   0000030E   0x2109             MOVS     R1,#+9
   \   00000310   0xE3EB             B.N      ??Display_LCD_6
    419                break;
    420               
    421                 case(VISUALIZATION_4):
    422                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_21:
   \   00000312   0x2E04             CMP      R6,#+4
   \   00000314   0xD021             BEQ.N    ??Display_LCD_22
    423                  {           
    424                    ptr = "        Flux        ";
    425                    LCD_DisplayStringLine(Line2,ptr);
   \   00000316   0x.... 0x....      ADR.W    R1,`?<Constant "        Flux        ">`
   \   0000031A   0x2030             MOVS     R0,#+48
   \   0000031C   0x.... 0x....      BL       LCD_DisplayStringLine
    426                    
    427                    ptr = "    P     I     D   ";
    428                    LCD_DisplayStringLine(Line3,ptr); 
   \   00000320   0x.... 0x....      ADR.W    R1,`?<Constant "    P     I     D   ">`
   \   00000324   0x2048             MOVS     R0,#+72
   \   00000326   0x.... 0x....      BL       LCD_DisplayStringLine
    429                    
    430                    LCD_ClearLine(Line4);
   \   0000032A   0x2060             MOVS     R0,#+96
   \   0000032C   0x.... 0x....      BL       LCD_ClearLine
    431                    LCD_ClearLine(Line5);
   \   00000330   0x2078             MOVS     R0,#+120
   \   00000332   0x.... 0x....      BL       LCD_ClearLine
    432                     
    433                    ptr = " Target         (Id)";
    434                    LCD_DisplayStringLine(Line6,ptr); 
   \   00000336   0x.... 0x....      ADR.W    R1,`?<Constant " Target         (Id)">`
   \   0000033A   0x2090             MOVS     R0,#+144
   \   0000033C   0x.... 0x....      BL       LCD_DisplayStringLine
    435                    
    436                    ptr = " Measured       (Id)";
    437                    LCD_DisplayStringLine(Line7,ptr);
   \   00000340   0x.... 0x....      ADR.W    R1,`?<Constant " Measured       (Id)">`
   \   00000344   0x20A8             MOVS     R0,#+168
   \   00000346   0x.... 0x....      BL       LCD_DisplayStringLine
    438                    
    439                    LCD_ClearLine(Line8);
   \   0000034A   0x20C0             MOVS     R0,#+192
   \   0000034C   0x.... 0x....      BL       LCD_ClearLine
    440                    
    441                    ptr = " <> Move  ^| Change ";          
    442                    LCD_DisplayStringLine(Line9, ptr); 
   \   00000350   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   00000354   0x20D8             MOVS     R0,#+216
   \   00000356   0x.... 0x....      BL       LCD_DisplayStringLine
    443                  }
    444                  
    445                  switch(bMenu_index)
   \                     ??Display_LCD_22:
   \   0000035A   0x7820             LDRB     R0,[R4, #+0]
   \   0000035C   0x2808             CMP      R0,#+8
   \   0000035E   0xD004             BEQ.N    ??Display_LCD_23
   \   00000360   0xD350             BCC.N    ??Display_LCD_24
   \   00000362   0x280A             CMP      R0,#+10
   \   00000364   0xD033             BEQ.N    ??Display_LCD_25
   \   00000366   0xD316             BCC.N    ??Display_LCD_26
   \   00000368   0xE04C             B.N      ??Display_LCD_24
    446                  {
    447                    case(P_FLUX_MENU):
    448                      LCD_SetTextColor(Red);            
   \                     ??Display_LCD_23:
   \   0000036A   0xF44F 0x4078      MOV      R0,#+63488
   \   0000036E   0x.... 0x....      BL       LCD_SetTextColor
    449                      temp = PID_Flux_InitStructure.hKp_Gain;
    450                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \   00000372   0x.... 0x....      LDR.W    R4,??DataTable51_8
   \   00000376   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   0000037A   0x2101             MOVS     R1,#+1
   \   0000037C   0x2060             MOVS     R0,#+96
   \   0000037E   0x.... 0x....      BL       Display_5DigitSignedNumber
    451                      LCD_SetTextColor(Blue);
   \   00000382   0x201F             MOVS     R0,#+31
   \   00000384   0x.... 0x....      BL       LCD_SetTextColor
    452                      
    453                      temp = PID_Flux_InitStructure.hKi_Gain;
    454                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   00000388   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   0000038C   0x2107             MOVS     R1,#+7
   \   0000038E   0x2060             MOVS     R0,#+96
   \   00000390   0x.... 0x....      BL       Display_5DigitSignedNumber
    455                      
    456          #ifdef DIFFERENTIAL_TERM_ENABLED            
    457                      temp = PID_Flux_InitStructure.hKd_Gain;
    458                      Display_5DigitSignedNumber(Line4, CHAR_13, temp);
   \   00000394   0xE014             B.N      ??Display_LCD_27
    459          #else        
    460                      {
    461                        u32 i=0;
    462                        for( i=0; i<5; i++)
    463                        {
    464                          LCD_DisplayChar(Line4, (u16)(320 -(16*(18-i))),'-');
    465                        }
    466                      }
    467          #endif       
    468                    break;
    469                      
    470                    case(I_FLUX_MENU):                                 
    471                      temp = PID_Flux_InitStructure.hKp_Gain;
    472                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \                     ??Display_LCD_26:
   \   00000396   0x.... 0x....      LDR.W    R4,??DataTable51_8
   \   0000039A   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   0000039E   0x2101             MOVS     R1,#+1
   \   000003A0   0x2060             MOVS     R0,#+96
   \   000003A2   0x.... 0x....      BL       Display_5DigitSignedNumber
    473                      
    474                      LCD_SetTextColor(Red);   
   \   000003A6   0xF44F 0x4078      MOV      R0,#+63488
   \   000003AA   0x.... 0x....      BL       LCD_SetTextColor
    475                      temp = PID_Flux_InitStructure.hKi_Gain;
    476                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   000003AE   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   000003B2   0x2107             MOVS     R1,#+7
   \   000003B4   0x2060             MOVS     R0,#+96
   \   000003B6   0x.... 0x....      BL       Display_5DigitSignedNumber
    477                      LCD_SetTextColor(Blue);
   \   000003BA   0x201F             MOVS     R0,#+31
   \   000003BC   0x.... 0x....      BL       LCD_SetTextColor
    478                      
    479          #ifdef DIFFERENTIAL_TERM_ENABLED             
    480                      temp = PID_Flux_InitStructure.hKd_Gain;
    481                      Display_5DigitSignedNumber(Line4, CHAR_13, temp);
   \                     ??Display_LCD_27:
   \   000003C0   0xF9B4 0x2018      LDRSH    R2,[R4, #+24]
   \   000003C4   0x210D             MOVS     R1,#+13
   \   000003C6   0x2060             MOVS     R0,#+96
   \   000003C8   0x.... 0x....      BL       Display_5DigitSignedNumber
    482          #else        
    483                      {
    484                        u32 i=0;
    485                        for( i=0; i<5; i++)
    486                        {
    487                          LCD_DisplayChar(Line4, (u16)(320 -(16*(18-i))),'-');
    488                        }
    489                      }
    490          #endif
    491                     break;
   \   000003CC   0xE01A             B.N      ??Display_LCD_24
    492                      
    493          #ifdef DIFFERENTIAL_TERM_ENABLED 
    494                      case(D_FLUX_MENU):
    495                        temp = PID_Flux_InitStructure.hKp_Gain;
    496                        Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \                     ??Display_LCD_25:
   \   000003CE   0x.... 0x....      LDR.W    R4,??DataTable51_8
   \   000003D2   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   000003D6   0x2101             MOVS     R1,#+1
   \   000003D8   0x2060             MOVS     R0,#+96
   \   000003DA   0x.... 0x....      BL       Display_5DigitSignedNumber
    497                        
    498                        temp = PID_Flux_InitStructure.hKi_Gain;
    499                        Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   000003DE   0xF9B4 0x2004      LDRSH    R2,[R4, #+4]
   \   000003E2   0x2107             MOVS     R1,#+7
   \   000003E4   0x2060             MOVS     R0,#+96
   \   000003E6   0x.... 0x....      BL       Display_5DigitSignedNumber
    500                        
    501                        LCD_SetTextColor(Red);
   \   000003EA   0xF44F 0x4078      MOV      R0,#+63488
   \   000003EE   0x.... 0x....      BL       LCD_SetTextColor
    502                        temp = PID_Flux_InitStructure.hKd_Gain;
    503                        Display_5DigitSignedNumber(Line4, CHAR_13, temp);
   \   000003F2   0xF9B4 0x2018      LDRSH    R2,[R4, #+24]
   \   000003F6   0x210D             MOVS     R1,#+13
   \   000003F8   0x2060             MOVS     R0,#+96
   \   000003FA   0x.... 0x....      BL       Display_5DigitSignedNumber
    504                        LCD_SetTextColor(Blue);
   \   000003FE   0x201F             MOVS     R0,#+31
   \   00000400   0x.... 0x....      BL       LCD_SetTextColor
    505                        
    506                      break;
    507          #endif
    508                  default:
    509                    break;
    510                  }
    511                  //Independently from the menu, this visualization must display current 
    512                  //and measured Id
    513                  
    514                  temp = hFlux_Reference;          
   \                     ??Display_LCD_24:
   \   00000404   0x.... 0x....      LDR.W    R0,??DataTable51_9
   \   00000408   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    515                  Display_5DigitSignedNumber(Line6, CHAR_9, temp);
   \   0000040C   0x2109             MOVS     R1,#+9
   \   0000040E   0x2090             MOVS     R0,#+144
   \   00000410   0x.... 0x....      BL       Display_5DigitSignedNumber
    516          
    517                  temp = Stat_Curr_q_d.qI_Component2;
    518                  Display_5DigitSignedNumber(Line7, CHAR_9, temp);   
   \   00000414   0x.... 0x....      LDR.W    R0,??DataTable51_7
   \   00000418   0xF9B0 0x2002      LDRSH    R2,[R0, #+2]
   \   0000041C   0x2109             MOVS     R1,#+9
   \   0000041E   0xE364             B.N      ??Display_LCD_6
    519                break;
    520          
    521          #ifdef FLUX_WEAKENING      
    522                case(VISUALIZATION_11):
    523                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_28:
   \   00000420   0x2E0B             CMP      R6,#+11
   \   00000422   0xD021             BEQ.N    ??Display_LCD_29
    524                  {           
    525                    ptr = "Flux Weakening Ctrl ";
    526                    LCD_DisplayStringLine(Line2,ptr);
   \   00000424   0x.... 0x....      ADR.W    R1,`?<Constant "Flux Weakening Ctrl ">`
   \   00000428   0x2030             MOVS     R0,#+48
   \   0000042A   0x.... 0x....      BL       LCD_DisplayStringLine
    527                    
    528                    ptr = "    P     I         ";
    529                    LCD_DisplayStringLine(Line3,ptr); 
   \   0000042E   0x.... 0x....      ADR.W    R1,`?<Constant "    P     I         ">`
   \   00000432   0x2048             MOVS     R0,#+72
   \   00000434   0x.... 0x....      BL       LCD_DisplayStringLine
    530                    
    531                    LCD_ClearLine(Line4);
   \   00000438   0x2060             MOVS     R0,#+96
   \   0000043A   0x.... 0x....      BL       LCD_ClearLine
    532                    LCD_ClearLine(Line5);
   \   0000043E   0x2078             MOVS     R0,#+120
   \   00000440   0x.... 0x....      BL       LCD_ClearLine
    533                     
    534                    ptr = " Target        (Vs%)";
    535                    LCD_DisplayStringLine(Line6,ptr); 
   \   00000444   0x.... 0x....      ADR.W    R1,`?<Constant " Target        (Vs%)">`
   \   00000448   0x2090             MOVS     R0,#+144
   \   0000044A   0x.... 0x....      BL       LCD_DisplayStringLine
    536                    
    537                    ptr = " Measured      (Vs%)";
    538                    LCD_DisplayStringLine(Line7,ptr);
   \   0000044E   0x.... 0x....      ADR.W    R1,`?<Constant " Measured      (Vs%)">`
   \   00000452   0x20A8             MOVS     R0,#+168
   \   00000454   0x.... 0x....      BL       LCD_DisplayStringLine
    539                    
    540                    LCD_ClearLine(Line8);
   \   00000458   0x20C0             MOVS     R0,#+192
   \   0000045A   0x.... 0x....      BL       LCD_ClearLine
    541                    
    542                    ptr = " <> Move  ^| Change ";          
    543                    LCD_DisplayStringLine(Line9, ptr); 
   \   0000045E   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   00000462   0x20D8             MOVS     R0,#+216
   \   00000464   0x.... 0x....      BL       LCD_DisplayStringLine
    544                  }
    545                  
    546                  switch(bMenu_index)
   \                     ??Display_LCD_29:
   \   00000468   0x7820             LDRB     R0,[R4, #+0]
   \   0000046A   0x2817             CMP      R0,#+23
   \   0000046C   0xD005             BEQ.N    ??Display_LCD_30
   \   0000046E   0xF0C0 0x808E      BCC.W    ??Display_LCD_31
   \   00000472   0x2819             CMP      R0,#+25
   \   00000474   0xD04D             BEQ.N    ??Display_LCD_32
   \   00000476   0xD326             BCC.N    ??Display_LCD_33
   \   00000478   0xE089             B.N      ??Display_LCD_31
    547                  {
    548                    case(P_VOLT_MENU):
    549                      LCD_SetTextColor(Red);            
   \                     ??Display_LCD_30:
   \   0000047A   0xF44F 0x4078      MOV      R0,#+63488
   \   0000047E   0x.... 0x....      BL       LCD_SetTextColor
    550                      temp = hFW_P_Gain;
    551                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \   00000482   0x.... 0x....      LDR.W    R0,??DataTable51_10
   \   00000486   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   0000048A   0x2101             MOVS     R1,#+1
   \   0000048C   0x2060             MOVS     R0,#+96
   \   0000048E   0x.... 0x....      BL       Display_5DigitSignedNumber
    552                      
    553                      LCD_SetTextColor(Blue);            
   \   00000492   0x201F             MOVS     R0,#+31
   \   00000494   0x.... 0x....      BL       LCD_SetTextColor
    554                      temp = hFW_I_Gain;
    555                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   00000498   0x.... 0x....      LDR.W    R0,??DataTable51_11
   \   0000049C   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   000004A0   0x2107             MOVS     R1,#+7
   \   000004A2   0x2060             MOVS     R0,#+96
   \   000004A4   0x.... 0x....      BL       Display_5DigitSignedNumber
    556                      temp = hFW_V_Ref;
    557                      Display_5DigitSignedNumber(Line6, CHAR_9, temp);
   \   000004A8   0x.... 0x....      LDR.W    R0,??DataTable51_12
   \   000004AC   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   000004B0   0x2109             MOVS     R1,#+9
   \   000004B2   0x2090             MOVS     R0,#+144
   \   000004B4   0x.... 0x....      BL       Display_5DigitSignedNumber
    558                      LCD_DrawRect(161,97,1,2);            
   \   000004B8   0x2302             MOVS     R3,#+2
   \   000004BA   0x2201             MOVS     R2,#+1
   \   000004BC   0x2161             MOVS     R1,#+97
   \   000004BE   0x20A1             MOVS     R0,#+161
   \   000004C0   0x.... 0x....      BL       LCD_DrawRect
    559                      
    560                      {
    561                        u32 i=0;
    562                        for( i=0; i<5; i++)
    563                        {
    564                          LCD_DisplayChar(Line4, (u16)(320 -(16*(18-i))),'-');
   \   000004C4   0xE04A             B.N      ??Display_LCD_34
    565                        }
    566                      }
    567           
    568                   break;
    569                      
    570                    case(I_VOLT_MENU):                                 
    571                      temp = hFW_P_Gain;
    572                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \                     ??Display_LCD_33:
   \   000004C6   0x.... 0x....      LDR.W    R0,??DataTable51_10
   \   000004CA   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   000004CE   0x2101             MOVS     R1,#+1
   \   000004D0   0x2060             MOVS     R0,#+96
   \   000004D2   0x.... 0x....      BL       Display_5DigitSignedNumber
    573                      temp = hFW_V_Ref;
    574                      Display_5DigitSignedNumber(Line6, CHAR_9, temp);            
   \   000004D6   0x.... 0x....      LDR.W    R0,??DataTable51_12
   \   000004DA   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   000004DE   0x2109             MOVS     R1,#+9
   \   000004E0   0x2090             MOVS     R0,#+144
   \   000004E2   0x.... 0x....      BL       Display_5DigitSignedNumber
    575                      
    576                      LCD_SetTextColor(Red);   
   \   000004E6   0xF44F 0x4078      MOV      R0,#+63488
   \   000004EA   0x.... 0x....      BL       LCD_SetTextColor
    577                      temp = hFW_I_Gain;
    578                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   000004EE   0x.... 0x....      LDR.W    R0,??DataTable51_11
   \   000004F2   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   000004F6   0x2107             MOVS     R1,#+7
   \   000004F8   0x2060             MOVS     R0,#+96
   \   000004FA   0x.... 0x....      BL       Display_5DigitSignedNumber
    579                      LCD_SetTextColor(Blue);
   \   000004FE   0x201F             MOVS     R0,#+31
   \   00000500   0x.... 0x....      BL       LCD_SetTextColor
    580                      LCD_DrawRect(161,97,1,2); 
   \   00000504   0x2302             MOVS     R3,#+2
   \   00000506   0x2201             MOVS     R2,#+1
   \   00000508   0x2161             MOVS     R1,#+97
   \   0000050A   0x20A1             MOVS     R0,#+161
   \   0000050C   0x.... 0x....      BL       LCD_DrawRect
    581                  
    582                      {
    583                        u32 i=0;
    584                        for( i=0; i<5; i++)
    585                        {
    586                          LCD_DisplayChar(Line4, (u16)(320 -(16*(18-i))),'-');
   \   00000510   0xE024             B.N      ??Display_LCD_34
    587                        }
    588                      }
    589          
    590          	      break;
    591                        
    592                    case(TARGET_VOLT_MENU):
    593                      LCD_SetTextColor(Red);            
   \                     ??Display_LCD_32:
   \   00000512   0xF44F 0x4078      MOV      R0,#+63488
   \   00000516   0x.... 0x....      BL       LCD_SetTextColor
    594                      temp = hFW_V_Ref;
    595                      Display_5DigitSignedNumber(Line6, CHAR_9, temp);
   \   0000051A   0x.... 0x....      LDR.W    R0,??DataTable51_12
   \   0000051E   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   00000522   0x2109             MOVS     R1,#+9
   \   00000524   0x2090             MOVS     R0,#+144
   \   00000526   0x.... 0x....      BL       Display_5DigitSignedNumber
    596                      LCD_DrawRect(161,97,1,2);
   \   0000052A   0x2302             MOVS     R3,#+2
   \   0000052C   0x2201             MOVS     R2,#+1
   \   0000052E   0x2161             MOVS     R1,#+97
   \   00000530   0x20A1             MOVS     R0,#+161
   \   00000532   0x.... 0x....      BL       LCD_DrawRect
    597                      
    598                      LCD_SetTextColor(Blue);
   \   00000536   0x201F             MOVS     R0,#+31
   \   00000538   0x.... 0x....      BL       LCD_SetTextColor
    599                      temp = hFW_P_Gain;
    600                      Display_5DigitSignedNumber(Line4, CHAR_1, temp);
   \   0000053C   0x.... 0x....      LDR.W    R0,??DataTable51_10
   \   00000540   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   00000544   0x2101             MOVS     R1,#+1
   \   00000546   0x2060             MOVS     R0,#+96
   \   00000548   0x.... 0x....      BL       Display_5DigitSignedNumber
    601                      temp = hFW_I_Gain;
    602                      Display_5DigitSignedNumber(Line4, CHAR_7, temp);
   \   0000054C   0x.... 0x....      LDR.W    R0,??DataTable51_11
   \   00000550   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
   \   00000554   0x2107             MOVS     R1,#+7
   \   00000556   0x2060             MOVS     R0,#+96
   \   00000558   0x.... 0x....      BL       Display_5DigitSignedNumber
    603                      
    604                      {
    605                        u32 i=0;
    606                        for( i=0; i<5; i++)
    607                        {
    608                          LCD_DisplayChar(Line4, (u16)(320 -(16*(18-i))),'-');
   \                     ??Display_LCD_34:
   \   0000055C   0x222D             MOVS     R2,#+45
   \   0000055E   0x2120             MOVS     R1,#+32
   \   00000560   0x2060             MOVS     R0,#+96
   \   00000562   0x.... 0x....      BL       LCD_DisplayChar
   \   00000566   0x222D             MOVS     R2,#+45
   \   00000568   0x2130             MOVS     R1,#+48
   \   0000056A   0x2060             MOVS     R0,#+96
   \   0000056C   0x.... 0x....      BL       LCD_DisplayChar
   \   00000570   0x222D             MOVS     R2,#+45
   \   00000572   0x2140             MOVS     R1,#+64
   \   00000574   0x2060             MOVS     R0,#+96
   \   00000576   0x.... 0x....      BL       LCD_DisplayChar
   \   0000057A   0x222D             MOVS     R2,#+45
   \   0000057C   0x2150             MOVS     R1,#+80
   \   0000057E   0x2060             MOVS     R0,#+96
   \   00000580   0x.... 0x....      BL       LCD_DisplayChar
   \   00000584   0x222D             MOVS     R2,#+45
   \   00000586   0x2160             MOVS     R1,#+96
   \   00000588   0x2060             MOVS     R0,#+96
   \   0000058A   0x.... 0x....      BL       LCD_DisplayChar
    609                        }
    610                      }
    611           
    612                   break;              
    613                    
    614                  default:
    615                    break;
    616                  }
    617                  //Independently from the menu, this visualization must display current 
    618                  //and measured voltage level
    619                  
    620                  //Compute applied voltage in s16
    621                  temp = (s16)(((s32)(hVMagn)*1000)/MAX_MODULE);        
    622                  Display_5DigitSignedNumber(Line7, CHAR_9, temp);
   \                     ??Display_LCD_31:
   \   0000058E   0x.... 0x....      LDR.W    R0,??DataTable51_13
   \   00000592   0xF9B0 0x0000      LDRSH    R0,[R0, #+0]
   \   00000596   0xF44F 0x717A      MOV      R1,#+1000
   \   0000059A   0x4348             MULS     R0,R1,R0
   \   0000059C   0xF647 0x21E0      MOVW     R1,#+31456
   \   000005A0   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   000005A4   0xB212             SXTH     R2,R2
   \   000005A6   0x2109             MOVS     R1,#+9
   \   000005A8   0x20A8             MOVS     R0,#+168
   \   000005AA   0x.... 0x....      BL       Display_5DigitSignedNumber
    623                  LCD_DrawRect(185,97,1,2);
   \   000005AE   0x2302             MOVS     R3,#+2
   \   000005B0   0x2201             MOVS     R2,#+1
   \   000005B2   0x2161             MOVS     R1,#+97
   \   000005B4   0x20B9             MOVS     R0,#+185
   \   000005B6   0xB001             ADD      SP,SP,#+4
   \   000005B8   0xE8BD 0x40F0      POP      {R4-R7,LR}
   \   000005BC   0x.... 0x....      B.W      LCD_DrawRect
    624                break;
    625          #endif      
    626                
    627                case(VISUALIZATION_5):
    628                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_35:
   \   000005C0   0x2E05             CMP      R6,#+5
   \   000005C2   0xD01F             BEQ.N    ??Display_LCD_36
    629                  {           
    630                    LCD_ClearLine(Line2);
   \   000005C4   0x2030             MOVS     R0,#+48
   \   000005C6   0x.... 0x....      BL       LCD_ClearLine
    631                    
    632                    ptr = " Power Stage Status ";          
    633                    LCD_DisplayStringLine(Line3, ptr); 
   \   000005CA   0x.... 0x....      ADR.W    R1,`?<Constant " Power Stage Status ">`
   \   000005CE   0x2048             MOVS     R0,#+72
   \   000005D0   0x.... 0x....      BL       LCD_DisplayStringLine
    634                    
    635                    LCD_ClearLine(Line4);
   \   000005D4   0x2060             MOVS     R0,#+96
   \   000005D6   0x.... 0x....      BL       LCD_ClearLine
    636                    
    637                    ptr = "  DC bus =     Volt ";          
    638                    LCD_DisplayStringLine(Line5, ptr); 
   \   000005DA   0x.... 0x....      ADR.W    R1,`?<Constant "  DC bus =     Volt ">`
   \   000005DE   0x2078             MOVS     R0,#+120
   \   000005E0   0x.... 0x....      BL       LCD_DisplayStringLine
    639                    
    640                    LCD_ClearLine(Line6);
   \   000005E4   0x2090             MOVS     R0,#+144
   \   000005E6   0x.... 0x....      BL       LCD_ClearLine
    641                    
    642                    ptr = "  T =      Celsius  ";          
    643                    LCD_DisplayStringLine(Line7, ptr); 
   \   000005EA   0x.... 0x....      ADR.W    R1,`?<Constant "  T =      Celsius  ">`
   \   000005EE   0x20A8             MOVS     R0,#+168
   \   000005F0   0x.... 0x....      BL       LCD_DisplayStringLine
    644                    
    645                    LCD_ClearLine(Line8);
   \   000005F4   0x20C0             MOVS     R0,#+192
   \   000005F6   0x.... 0x....      BL       LCD_ClearLine
    646                    
    647                    ptr = " <> Move            ";          
    648                    LCD_DisplayStringLine(Line9, ptr); 
   \   000005FA   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move            ">`
   \   000005FE   0x20D8             MOVS     R0,#+216
   \   00000600   0x.... 0x....      BL       LCD_DisplayStringLine
    649                  }
    650                
    651                  temp = MCL_Compute_BusVolt();        
   \                     ??Display_LCD_36:
   \   00000604   0x.... 0x....      BL       MCL_Compute_BusVolt
   \   00000608   0xB205             SXTH     R5,R0
    652                  LCD_DisplayChar(Line5, 320-16*CHAR_11, (u8)(((temp%1000)/100)+0x30));
   \   0000060A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000060E   0x2464             MOVS     R4,#+100
   \   00000610   0xFB95 0xF1F0      SDIV     R1,R5,R0
   \   00000614   0xFB00 0x5011      MLS      R0,R0,R1,R5
   \   00000618   0xFB90 0xF0F4      SDIV     R0,R0,R4
   \   0000061C   0xF100 0x0230      ADD      R2,R0,#+48
   \   00000620   0xB2D2             UXTB     R2,R2
   \   00000622   0x2190             MOVS     R1,#+144
   \   00000624   0x2078             MOVS     R0,#+120
   \   00000626   0x.... 0x....      BL       LCD_DisplayChar
    653                  LCD_DisplayChar(Line5, 320-16*CHAR_12, (u8)(((temp%100)/10)+0x30));
   \   0000062A   0x260A             MOVS     R6,#+10
   \   0000062C   0xFB95 0xF0F4      SDIV     R0,R5,R4
   \   00000630   0xFB04 0x5010      MLS      R0,R4,R0,R5
   \   00000634   0xFB90 0xF0F6      SDIV     R0,R0,R6
   \   00000638   0xF100 0x0230      ADD      R2,R0,#+48
   \   0000063C   0xB2D2             UXTB     R2,R2
   \   0000063E   0x2180             MOVS     R1,#+128
   \   00000640   0x2078             MOVS     R0,#+120
   \   00000642   0x.... 0x....      BL       LCD_DisplayChar
    654                  LCD_DisplayChar(Line5, 320-16*CHAR_13, (u8)((temp%10)+0x30));
   \   00000646   0xFB95 0xF0F6      SDIV     R0,R5,R6
   \   0000064A   0xEB00 0x0180      ADD      R1,R0,R0, LSL #+2
   \   0000064E   0xEBA5 0x0041      SUB      R0,R5,R1, LSL #+1
   \   00000652   0xF100 0x0230      ADD      R2,R0,#+48
   \   00000656   0xB2D2             UXTB     R2,R2
   \   00000658   0x2170             MOVS     R1,#+112
   \   0000065A   0x2078             MOVS     R0,#+120
   \   0000065C   0x.... 0x....      BL       LCD_DisplayChar
    655                  
    656                  temp = MCL_Compute_Temp(); 
   \   00000660   0x.... 0x....      BL       MCL_Compute_Temp
   \   00000664   0x4605             MOV      R5,R0
    657                  LCD_DisplayChar(Line7, 320-16*CHAR_6, (u8)(((temp%1000)/100)+0x30));
   \   00000666   0xFB95 0xF7F4      SDIV     R7,R5,R4
   \   0000066A   0xF107 0x0230      ADD      R2,R7,#+48
   \   0000066E   0xB2D2             UXTB     R2,R2
   \   00000670   0x21E0             MOVS     R1,#+224
   \   00000672   0x20A8             MOVS     R0,#+168
   \   00000674   0x.... 0x....      BL       LCD_DisplayChar
    658                  LCD_DisplayChar(Line7, 320-16*CHAR_7, (u8)(((temp%100)/10)+0x30));
   \   00000678   0xFB04 0x5017      MLS      R0,R4,R7,R5
   \   0000067C   0xFB90 0xF0F6      SDIV     R0,R0,R6
   \   00000680   0xF100 0x0230      ADD      R2,R0,#+48
   \   00000684   0xB2D2             UXTB     R2,R2
   \   00000686   0x21D0             MOVS     R1,#+208
   \   00000688   0x20A8             MOVS     R0,#+168
   \   0000068A   0x.... 0x....      BL       LCD_DisplayChar
    659                  LCD_DisplayChar(Line7, 320-16*CHAR_8, (u8)((temp%10)+0x30));
   \   0000068E   0xFB95 0xF0F6      SDIV     R0,R5,R6
   \   00000692   0xEB00 0x0180      ADD      R1,R0,R0, LSL #+2
   \   00000696   0xEBA5 0x0041      SUB      R0,R5,R1, LSL #+1
   \   0000069A   0xF100 0x0230      ADD      R2,R0,#+48
   \   0000069E   0xB2D2             UXTB     R2,R2
   \   000006A0   0x21C0             MOVS     R1,#+192
   \   000006A2   0x20A8             MOVS     R0,#+168
   \   000006A4   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   000006A8   0x.... 0x....      B.W      LCD_DisplayChar
    660                
    661                break;    
    662                  
    663                case(VISUALIZATION_6):
    664                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_37:
   \   000006AC   0x2E06             CMP      R6,#+6
   \   000006AE   0xD023             BEQ.N    ??Display_LCD_38
    665                  {           
    666          #ifdef NO_SPEED_SENSORS          
    667                    ptr = "   Sensorless Demo  ";
    668                    LCD_DisplayStringLine(Line2,ptr);
   \   000006B0   0x.... 0x....      ADR.W    R1,`?<Constant "   Sensorless Demo  ">`
   \   000006B4   0x2030             MOVS     R0,#+48
   \   000006B6   0x.... 0x....      BL       LCD_DisplayStringLine
    669          #else          
    670                    LCD_ClearLine(Line2);
    671          #endif           
    672                    LCD_ClearLine(Line3); 
   \   000006BA   0x2048             MOVS     R0,#+72
   \   000006BC   0x.... 0x....      BL       LCD_ClearLine
    673                    
    674                    ptr = "     Target Measured";
    675                    LCD_DisplayStringLine(Line4,ptr);
   \   000006C0   0x.... 0x....      ADR.W    R1,`?<Constant "     Target Measured">`
   \   000006C4   0x2060             MOVS     R0,#+96
   \   000006C6   0x.... 0x....      BL       LCD_DisplayStringLine
    676                    
    677                    ptr = "Iq                  ";
    678                    LCD_DisplayStringLine(Line5,ptr); 
   \   000006CA   0x.... 0x....      ADR.W    R1,`?<Constant "Iq                  ">`
   \   000006CE   0x2078             MOVS     R0,#+120
   \   000006D0   0x.... 0x....      BL       LCD_DisplayStringLine
    679                    
    680                    ptr = "Id                  ";
    681                    LCD_DisplayStringLine(Line6,ptr);
   \   000006D4   0x.... 0x....      ADR.W    R1,`?<Constant "Id                  ">`
   \   000006D8   0x2090             MOVS     R0,#+144
   \   000006DA   0x.... 0x....      BL       LCD_DisplayStringLine
    682                    
    683                    ptr = "Speed (rpm)         ";
    684                    LCD_DisplayStringLine(Line7,ptr);
   \   000006DE   0x.... 0x....      ADR.W    R1,`?<Constant "Speed (rpm)         ">`
   \   000006E2   0x20A8             MOVS     R0,#+168
   \   000006E4   0x.... 0x....      BL       LCD_DisplayStringLine
    685                    
    686                    LCD_ClearLine(Line8);
   \   000006E8   0x20C0             MOVS     R0,#+192
   \   000006EA   0x.... 0x....      BL       LCD_ClearLine
    687                    
    688                    ptr = " <> Move  ^| Change ";          
    689                    LCD_DisplayStringLine(Line9, ptr); 
   \   000006EE   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   000006F2   0x20D8             MOVS     R0,#+216
   \   000006F4   0x.... 0x....      BL       LCD_DisplayStringLine
    690                  }
    691                  
    692                  switch(bMenu_index)
   \                     ??Display_LCD_38:
   \   000006F8   0x7820             LDRB     R0,[R4, #+0]
   \   000006FA   0x280C             CMP      R0,#+12
   \   000006FC   0xD004             BEQ.N    ??Display_LCD_39
   \   000006FE   0xD351             BCC.N    ??Display_LCD_40
   \   00000700   0x280E             CMP      R0,#+14
   \   00000702   0xD033             BEQ.N    ??Display_LCD_41
   \   00000704   0xD315             BCC.N    ??Display_LCD_42
   \   00000706   0xE04D             B.N      ??Display_LCD_40
    693                  {
    694                    case(CONTROL_MODE_MENU_6):
    695                      LCD_SetTextColor(Red);
   \                     ??Display_LCD_39:
   \   00000708   0xF44F 0x4078      MOV      R0,#+63488
   \   0000070C   0x.... 0x....      BL       LCD_SetTextColor
    696                      ptr = "Torque control mode ";        
    697                      LCD_DisplayStringLine(Line3,ptr);  
   \   00000710   0x.... 0x....      ADR.W    R1,`?<Constant "Torque control mode ">`
   \   00000714   0x2048             MOVS     R0,#+72
   \   00000716   0x.... 0x....      BL       LCD_DisplayStringLine
    698                      LCD_SetTextColor(Blue);
   \   0000071A   0x201F             MOVS     R0,#+31
   \   0000071C   0x.... 0x....      BL       LCD_SetTextColor
    699                      
    700                      temp = hTorque_Reference;
   \   00000720   0x.... 0x....      LDR.W    R0,??DataTable51_6
   \   00000724   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    701                      Display_5DigitSignedNumber(Line5, CHAR_5, temp);
   \   00000728   0x2105             MOVS     R1,#+5
   \   0000072A   0x2078             MOVS     R0,#+120
   \   0000072C   0x.... 0x....      BL       Display_5DigitSignedNumber
    702           
    703                      temp = hFlux_Reference; 
   \   00000730   0xE013             B.N      ??Display_LCD_43
    704                      Display_5DigitSignedNumber(Line6, CHAR_5, temp);         
    705                    break;   
    706                    
    707                    case(IQ_REF_MENU):
    708                      ptr = "Torque control mode ";
    709                      LCD_DisplayStringLine(Line3,ptr); 
   \                     ??Display_LCD_42:
   \   00000732   0x.... 0x....      ADR.W    R1,`?<Constant "Torque control mode ">`
   \   00000736   0x2048             MOVS     R0,#+72
   \   00000738   0x.... 0x....      BL       LCD_DisplayStringLine
    710                      
    711                      LCD_SetTextColor(Red);
   \   0000073C   0xF44F 0x4078      MOV      R0,#+63488
   \   00000740   0x.... 0x....      BL       LCD_SetTextColor
    712                      temp = hTorque_Reference;
   \   00000744   0x.... 0x....      LDR.W    R0,??DataTable51_6
   \   00000748   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    713                      Display_5DigitSignedNumber(Line5, CHAR_5, temp);
   \   0000074C   0x2105             MOVS     R1,#+5
   \   0000074E   0x2078             MOVS     R0,#+120
   \   00000750   0x.... 0x....      BL       Display_5DigitSignedNumber
    714                      LCD_SetTextColor(Blue);
   \   00000754   0x201F             MOVS     R0,#+31
   \   00000756   0x.... 0x....      BL       LCD_SetTextColor
    715                      
    716                      temp = hFlux_Reference; 
   \                     ??Display_LCD_43:
   \   0000075A   0x.... 0x....      LDR.W    R0,??DataTable51_9
   \   0000075E   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    717                      Display_5DigitSignedNumber(Line6, CHAR_5, temp); 
   \   00000762   0x2105             MOVS     R1,#+5
   \   00000764   0x2090             MOVS     R0,#+144
   \   00000766   0x.... 0x....      BL       Display_5DigitSignedNumber
    718                    break;
   \   0000076A   0xE01B             B.N      ??Display_LCD_40
    719                      
    720                    case(ID_REF_MENU):
    721                      ptr = "Torque control mode ";
    722                      LCD_DisplayStringLine(Line3,ptr); 
   \                     ??Display_LCD_41:
   \   0000076C   0x.... 0x....      ADR.W    R1,`?<Constant "Torque control mode ">`
   \   00000770   0x2048             MOVS     R0,#+72
   \   00000772   0x.... 0x....      BL       LCD_DisplayStringLine
    723                      
    724                      temp = hTorque_Reference;
   \   00000776   0x.... 0x....      LDR.W    R0,??DataTable51_6
   \   0000077A   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    725                      Display_5DigitSignedNumber(Line5, CHAR_5, temp);
   \   0000077E   0x2105             MOVS     R1,#+5
   \   00000780   0x2078             MOVS     R0,#+120
   \   00000782   0x.... 0x....      BL       Display_5DigitSignedNumber
    726                      
    727                      LCD_SetTextColor(Red);
   \   00000786   0xF44F 0x4078      MOV      R0,#+63488
   \   0000078A   0x.... 0x....      BL       LCD_SetTextColor
    728                      temp = hFlux_Reference; 
   \   0000078E   0x.... 0x....      LDR.W    R0,??DataTable51_9
   \   00000792   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    729                      Display_5DigitSignedNumber(Line6, CHAR_5, temp); 
   \   00000796   0x2105             MOVS     R1,#+5
   \   00000798   0x2090             MOVS     R0,#+144
   \   0000079A   0x.... 0x....      BL       Display_5DigitSignedNumber
    730                      LCD_SetTextColor(Blue);
   \   0000079E   0x201F             MOVS     R0,#+31
   \   000007A0   0x.... 0x....      BL       LCD_SetTextColor
    731                    break;
    732                   default: 
    733                    break;
    734                  }            
    735                  temp =Stat_Curr_q_d.qI_Component1;
    736                  Display_5DigitSignedNumber(Line5, CHAR_13, temp);
   \                     ??Display_LCD_40:
   \   000007A4   0x.... 0x....      LDR.W    R4,??DataTable51_7
   \   000007A8   0xF9B4 0x2000      LDRSH    R2,[R4, #+0]
   \   000007AC   0x210D             MOVS     R1,#+13
   \   000007AE   0x2078             MOVS     R0,#+120
   \   000007B0   0x.... 0x....      BL       Display_5DigitSignedNumber
    737                  
    738                  temp =Stat_Curr_q_d.qI_Component2;        
    739                  Display_5DigitSignedNumber(Line6, CHAR_13, temp);
   \   000007B4   0xF9B4 0x2002      LDRSH    R2,[R4, #+2]
   \   000007B8   0x210D             MOVS     R1,#+13
   \   000007BA   0x2090             MOVS     R0,#+144
   \   000007BC   0x.... 0x....      BL       Display_5DigitSignedNumber
    740          
    741                  //Compute measured speed in rpm
    742          #ifdef ENCODER
    743                  temp = (s16)(ENC_Get_Mechanical_Speed() * 6);
    744          #elif defined HALL_SENSORS
    745                  temp = (s16)(HALL_GetSpeed() * 6);
    746          #elif defined NO_SPEED_SENSORS        
    747                  temp = (s16)(STO_Get_Speed_Hz() * 6);
   \   000007C0   0x.... 0x....      BL       STO_Get_Speed_Hz
    748          #endif 
    749                  Display_5DigitSignedNumber(Line7, CHAR_13, temp);
   \   000007C4   0xEB00 0x0140      ADD      R1,R0,R0, LSL #+1
   \   000007C8   0x004A             LSLS     R2,R1,#+1
   \   000007CA   0xB212             SXTH     R2,R2
   \   000007CC   0x210D             MOVS     R1,#+13
   \   000007CE   0xE18C             B.N      ??Display_LCD_6
    750                break;
    751                  
    752                case(VISUALIZATION_7):
    753                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_44:
   \   000007D0   0x.... 0x....      LDR.W    R4,??DataTable51_14
   \   000007D4   0x2E07             CMP      R6,#+7
   \   000007D6   0xD03A             BEQ.N    ??Display_LCD_45
    754                  {  
    755                    LCD_ClearLine(Line2);
   \   000007D8   0x2030             MOVS     R0,#+48
   \   000007DA   0x.... 0x....      BL       LCD_ClearLine
    756                    
    757                    LCD_SetTextColor(Red);
   \   000007DE   0xF44F 0x4078      MOV      R0,#+63488
   \   000007E2   0x.... 0x....      BL       LCD_SetTextColor
    758                    ptr = "    !!! FAULT !!!   ";
    759                    LCD_DisplayStringLine(Line3,ptr);
   \   000007E6   0x.... 0x....      ADR.W    R1,`?<Constant "    !!! FAULT !!!   ">`
   \   000007EA   0x2048             MOVS     R0,#+72
   \   000007EC   0x.... 0x....      BL       LCD_DisplayStringLine
    760                    LCD_SetTextColor(Blue);
   \   000007F0   0x201F             MOVS     R0,#+31
   \   000007F2   0x.... 0x....      BL       LCD_SetTextColor
    761                   
    762                    if ( (wGlobal_Flags & UNDER_VOLTAGE) == UNDER_VOLTAGE)
   \   000007F6   0x6820             LDR      R0,[R4, #+0]
   \   000007F8   0x0500             LSLS     R0,R0,#+20
   \   000007FA   0xBF48             IT       MI 
   \   000007FC   0x.... 0x....      ADRMI.W  R1,`?<Constant " Bus Under Voltage  ">`
    763                    {           
    764                      ptr = " Bus Under Voltage  ";
    765                      LCD_DisplayStringLine(Line4, ptr);                                   
   \   00000800   0xD41C             BMI.N    ??Display_LCD_46
    766                    }
    767                    else if ( (wGlobal_Flags & OVER_CURRENT) ==  OVER_CURRENT)
   \   00000802   0x6820             LDR      R0,[R4, #+0]
   \   00000804   0x0580             LSLS     R0,R0,#+22
   \   00000806   0xBF48             IT       MI 
   \   00000808   0x.... 0x....      ADRMI.W  R1,`?<Constant "   Over Current    ">`
    768                      {
    769                        ptr = "   Over Current    ";
    770                        LCD_DisplayStringLine(Line4, ptr); 
   \   0000080C   0xD416             BMI.N    ??Display_LCD_46
    771                      }
    772                    else if ( (wGlobal_Flags & OVERHEAT) ==  OVERHEAT)
   \   0000080E   0x6820             LDR      R0,[R4, #+0]
   \   00000810   0x05C0             LSLS     R0,R0,#+23
   \   00000812   0xBF48             IT       MI 
   \   00000814   0x.... 0x....      ADRMI.W  R1,`?<Constant "   Over Heating    ">`
    773                      {
    774                        ptr = "   Over Heating    ";
    775                        LCD_DisplayStringLine(Line4, ptr);                             
   \   00000818   0xD410             BMI.N    ??Display_LCD_46
    776                      }
    777                    else if ( (wGlobal_Flags & OVER_VOLTAGE) ==  OVER_VOLTAGE)
   \   0000081A   0x6820             LDR      R0,[R4, #+0]
   \   0000081C   0x0540             LSLS     R0,R0,#+21
   \   0000081E   0xBF48             IT       MI 
   \   00000820   0x.... 0x....      ADRMI.W  R1,`?<Constant "  Bus Over Voltage  ">`
    778                      {
    779                        ptr = "  Bus Over Voltage  ";
    780                        LCD_DisplayStringLine(Line4, ptr);               
   \   00000824   0xD40A             BMI.N    ??Display_LCD_46
    781                      }
    782                    else if ( (wGlobal_Flags & START_UP_FAILURE) ==  START_UP_FAILURE)
   \   00000826   0x6820             LDR      R0,[R4, #+0]
   \   00000828   0x0740             LSLS     R0,R0,#+29
   \   0000082A   0xBF48             IT       MI 
   \   0000082C   0x.... 0x....      ADRMI.W  R1,`?<Constant "  Start-up failed   ">`
    783                    {
    784                       ptr = "  Start-up failed   ";
    785                       LCD_DisplayStringLine(Line4, ptr);    
   \   00000830   0xD404             BMI.N    ??Display_LCD_46
    786                    }      
    787                    else if ( (wGlobal_Flags & SPEED_FEEDBACK) ==  SPEED_FEEDBACK)
   \   00000832   0x6820             LDR      R0,[R4, #+0]
   \   00000834   0x0700             LSLS     R0,R0,#+28
   \   00000836   0xD504             BPL.N    ??Display_LCD_47
    788                    {
    789                       ptr = "Error on speed fdbck";
    790                       LCD_DisplayStringLine(Line4, ptr);     
   \   00000838   0x.... 0x....      ADR.W    R1,`?<Constant "Error on speed fdbck">`
   \                     ??Display_LCD_46:
   \   0000083C   0x2060             MOVS     R0,#+96
   \   0000083E   0x.... 0x....      BL       LCD_DisplayStringLine
    791                    }  
    792                    LCD_ClearLine(Line5);
   \                     ??Display_LCD_47:
   \   00000842   0x2078             MOVS     R0,#+120
   \   00000844   0x.... 0x....      BL       LCD_ClearLine
    793                    LCD_ClearLine(Line7);  
   \   00000848   0x20A8             MOVS     R0,#+168
   \   0000084A   0x.... 0x....      BL       LCD_ClearLine
    794                  } 
    795          
    796                  if ((wGlobal_Flags & ( OVERHEAT | UNDER_VOLTAGE | OVER_VOLTAGE)) == 0) 
   \                     ??Display_LCD_45:
   \   0000084E   0x6820             LDR      R0,[R4, #+0]
   \   00000850   0xF44F 0x6150      MOV      R1,#+3328
   \   00000854   0x4208             TST      R0,R1
   \   00000856   0xD10B             BNE.N    ??Display_LCD_48
    797                  { 
    798                    LCD_ClearLine(Line6);
   \   00000858   0x2090             MOVS     R0,#+144
   \   0000085A   0x.... 0x....      BL       LCD_ClearLine
    799                    ptr = "   Press 'Key' to   ";
    800                    LCD_DisplayStringLine(Line8,ptr);
   \   0000085E   0x.... 0x....      ADR.W    R1,`?<Constant "   Press \\'Key\\' to   ">`
   \   00000862   0x20C0             MOVS     R0,#+192
   \   00000864   0x.... 0x....      BL       LCD_DisplayStringLine
    801                    
    802                    ptr = "   return to menu   ";
    803                    LCD_DisplayStringLine(Line9,ptr);
   \   00000868   0x.... 0x....      ADR.W    R1,`?<Constant "   return to menu   ">`
   \   0000086C   0x20D8             MOVS     R0,#+216
   \   0000086E   0x....             B.N      ?Subroutine0
    804                  }
    805                  else
    806                  {
    807                    if ((wGlobal_Flags & (UNDER_VOLTAGE | OVER_VOLTAGE)) ==0)    
   \                     ??Display_LCD_48:
   \   00000870   0x7868             LDRB     R0,[R5, #+1]
   \   00000872   0x7829             LDRB     R1,[R5, #+0]
   \   00000874   0x6822             LDR      R2,[R4, #+0]
   \   00000876   0xF44F 0x6340      MOV      R3,#+3072
   \   0000087A   0x421A             TST      R2,R3
   \   0000087C   0xD136             BNE.N    ??Display_LCD_49
    808                    {//Under or over voltage
    809                       if (bPresent_Visualization != bPrevious_Visualization)
   \   0000087E   0x4288             CMP      R0,R1
   \   00000880   0xBF1C             ITT      NE 
   \   00000882   0x2090             MOVNE    R0,#+144
   \   00000884   0x.... 0x....      BLNE     LCD_ClearLine
    810                       { 
    811                         LCD_ClearLine(Line6);
    812                       }
    813                       temp = MCL_Compute_Temp(); 
   \   00000888   0x.... 0x....      BL       MCL_Compute_Temp
   \   0000088C   0x4605             MOV      R5,R0
    814                       ptr = "       T =";  
    815                       LCD_DisplayStringLine(Line6, ptr);
   \   0000088E   0x.... 0x....      ADR.W    R1,`?<Constant "       T =">`
   \   00000892   0x2090             MOVS     R0,#+144
   \   00000894   0x.... 0x....      BL       LCD_DisplayStringLine
    816                       LCD_DisplayChar(Line6, 320-16*CHAR_11, (u8)(((temp%1000)/100)+0x30));
   \   00000898   0x2464             MOVS     R4,#+100
   \   0000089A   0xFB95 0xF7F4      SDIV     R7,R5,R4
   \   0000089E   0xF107 0x0230      ADD      R2,R7,#+48
   \   000008A2   0xB2D2             UXTB     R2,R2
   \   000008A4   0x2190             MOVS     R1,#+144
   \   000008A6   0x2090             MOVS     R0,#+144
   \   000008A8   0x.... 0x....      BL       LCD_DisplayChar
    817                       LCD_DisplayChar(Line6, 320-16*CHAR_12, (u8)(((temp%100)/10)+0x30));
   \   000008AC   0x260A             MOVS     R6,#+10
   \   000008AE   0xFB04 0x5017      MLS      R0,R4,R7,R5
   \   000008B2   0xFB90 0xF0F6      SDIV     R0,R0,R6
   \   000008B6   0xF100 0x0230      ADD      R2,R0,#+48
   \   000008BA   0xB2D2             UXTB     R2,R2
   \   000008BC   0x2180             MOVS     R1,#+128
   \   000008BE   0x2090             MOVS     R0,#+144
   \   000008C0   0x.... 0x....      BL       LCD_DisplayChar
    818                       LCD_DisplayChar(Line6, 320-16*CHAR_13, (u8)((temp%10)+0x30));
   \   000008C4   0xFB95 0xF0F6      SDIV     R0,R5,R6
   \   000008C8   0xEB00 0x0180      ADD      R1,R0,R0, LSL #+2
   \   000008CC   0xEBA5 0x0041      SUB      R0,R5,R1, LSL #+1
   \   000008D0   0xF100 0x0230      ADD      R2,R0,#+48
   \   000008D4   0xB2D2             UXTB     R2,R2
   \   000008D6   0x2170             MOVS     R1,#+112
   \   000008D8   0x2090             MOVS     R0,#+144
   \   000008DA   0x.... 0x....      BL       LCD_DisplayChar
    819                       LCD_DisplayChar(Line6, 320-16*CHAR_14, ' ');
   \   000008DE   0x2220             MOVS     R2,#+32
   \   000008E0   0x2160             MOVS     R1,#+96
   \   000008E2   0x2090             MOVS     R0,#+144
   \   000008E4   0x.... 0x....      BL       LCD_DisplayChar
    820                       LCD_DisplayChar(Line6, 320-16*CHAR_15, 'C');
   \   000008E8   0x2243             MOVS     R2,#+67
   \   000008EA   0xE03D             B.N      ??Display_LCD_50
    821                    }
    822                    else 
    823                    {           
    824                      if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_49:
   \   000008EC   0x4288             CMP      R0,R1
   \   000008EE   0xBF1C             ITT      NE 
   \   000008F0   0x2090             MOVNE    R0,#+144
   \   000008F2   0x.... 0x....      BLNE     LCD_ClearLine
    825                      { 
    826                        LCD_ClearLine(Line6);         
    827                      }
    828                      ptr = "  DC bus =";            
    829                      LCD_DisplayStringLine(Line6, ptr); 
   \   000008F6   0x.... 0x....      ADR.W    R1,`?<Constant "  DC bus =">`
   \   000008FA   0x2090             MOVS     R0,#+144
   \   000008FC   0x.... 0x....      BL       LCD_DisplayStringLine
    830                      temp = MCL_Compute_BusVolt();        
   \   00000900   0x.... 0x....      BL       MCL_Compute_BusVolt
   \   00000904   0xB205             SXTH     R5,R0
    831                      LCD_DisplayChar(Line6, 320-16*CHAR_11, (u8)(((temp%1000)/100)+0x30));
   \   00000906   0xF44F 0x707A      MOV      R0,#+1000
   \   0000090A   0x2464             MOVS     R4,#+100
   \   0000090C   0xFB95 0xF1F0      SDIV     R1,R5,R0
   \   00000910   0xFB00 0x5011      MLS      R0,R0,R1,R5
   \   00000914   0xFB90 0xF0F4      SDIV     R0,R0,R4
   \   00000918   0xF100 0x0230      ADD      R2,R0,#+48
   \   0000091C   0xB2D2             UXTB     R2,R2
   \   0000091E   0x2190             MOVS     R1,#+144
   \   00000920   0x2090             MOVS     R0,#+144
   \   00000922   0x.... 0x....      BL       LCD_DisplayChar
    832                      LCD_DisplayChar(Line6, 320-16*CHAR_12, (u8)(((temp%100)/10)+0x30));
   \   00000926   0x260A             MOVS     R6,#+10
   \   00000928   0xFB95 0xF0F4      SDIV     R0,R5,R4
   \   0000092C   0xFB04 0x5010      MLS      R0,R4,R0,R5
   \   00000930   0xFB90 0xF0F6      SDIV     R0,R0,R6
   \   00000934   0xF100 0x0230      ADD      R2,R0,#+48
   \   00000938   0xB2D2             UXTB     R2,R2
   \   0000093A   0x2180             MOVS     R1,#+128
   \   0000093C   0x2090             MOVS     R0,#+144
   \   0000093E   0x.... 0x....      BL       LCD_DisplayChar
    833                      LCD_DisplayChar(Line6, 320-16*CHAR_13, (u8)((temp%10)+0x30)); 
   \   00000942   0xFB95 0xF0F6      SDIV     R0,R5,R6
   \   00000946   0xEB00 0x0180      ADD      R1,R0,R0, LSL #+2
   \   0000094A   0xEBA5 0x0041      SUB      R0,R5,R1, LSL #+1
   \   0000094E   0xF100 0x0230      ADD      R2,R0,#+48
   \   00000952   0xB2D2             UXTB     R2,R2
   \   00000954   0x2170             MOVS     R1,#+112
   \   00000956   0x2090             MOVS     R0,#+144
   \   00000958   0x.... 0x....      BL       LCD_DisplayChar
    834                      LCD_DisplayChar(Line6, 320-16*CHAR_14, ' ');
   \   0000095C   0x2220             MOVS     R2,#+32
   \   0000095E   0x2160             MOVS     R1,#+96
   \   00000960   0x2090             MOVS     R0,#+144
   \   00000962   0x.... 0x....      BL       LCD_DisplayChar
    835                      LCD_DisplayChar(Line6, 320-16*CHAR_15, 'V');             
   \   00000966   0x2256             MOVS     R2,#+86
   \                     ??Display_LCD_50:
   \   00000968   0x2150             MOVS     R1,#+80
   \   0000096A   0x2090             MOVS     R0,#+144
   \   0000096C   0x.... 0x....      BL       LCD_DisplayChar
    836                    }          
    837                    LCD_ClearLine(Line8);
   \   00000970   0xE018             B.N      ??Display_LCD_51
    838                    LCD_ClearLine(Line9);
    839                  }
    840                break;
    841               
    842                case(VISUALIZATION_8):  
    843                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_52:
   \   00000972   0x2E08             CMP      R6,#+8
   \   00000974   0xF000 0x8135      BEQ.W    ??Display_LCD_1
    844                  {  
    845                    LCD_ClearLine(Line2);
   \   00000978   0x2030             MOVS     R0,#+48
   \   0000097A   0x.... 0x....      BL       LCD_ClearLine
    846                    
    847                    ptr = " Motor is stopping  ";
    848                    LCD_DisplayStringLine(Line3,ptr);
   \   0000097E   0x.... 0x....      ADR.W    R1,`?<Constant " Motor is stopping  ">`
   \   00000982   0x2048             MOVS     R0,#+72
   \   00000984   0x.... 0x....      BL       LCD_DisplayStringLine
    849                    
    850                    ptr = "   please wait...   ";
    851                    LCD_DisplayStringLine(Line4,ptr);
   \   00000988   0x.... 0x....      ADR.W    R1,`?<Constant "   please wait...   ">`
   \   0000098C   0x2060             MOVS     R0,#+96
   \   0000098E   0x.... 0x....      BL       LCD_DisplayStringLine
    852                    
    853                    LCD_ClearLine(Line5);
   \   00000992   0x2078             MOVS     R0,#+120
   \   00000994   0x.... 0x....      BL       LCD_ClearLine
    854                    LCD_ClearLine(Line6);
   \   00000998   0x2090             MOVS     R0,#+144
   \   0000099A   0x.... 0x....      BL       LCD_ClearLine
    855                    LCD_ClearLine(Line7);
   \   0000099E   0x20A8             MOVS     R0,#+168
   \   000009A0   0x.... 0x....      BL       LCD_ClearLine
    856                    LCD_ClearLine(Line8);
   \                     ??Display_LCD_51:
   \   000009A4   0x20C0             MOVS     R0,#+192
   \   000009A6   0x.... 0x....      BL       LCD_ClearLine
    857                    LCD_ClearLine(Line9);
   \   000009AA   0x20D8             MOVS     R0,#+216
   \   000009AC   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   000009B0   0x.... 0x....      B.W      LCD_ClearLine
    858                  } 
    859                break;
    860          
    861          #ifdef OBSERVER_GAIN_TUNING      
    862                case(VISUALIZATION_9):
    863                  if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_53:
   \   000009B4   0x2E09             CMP      R6,#+9
   \   000009B6   0xD021             BEQ.N    ??Display_LCD_54
    864                  {           
    865                    ptr = "   Observer Gains   ";
    866                    LCD_DisplayStringLine(Line2,ptr);
   \   000009B8   0x.... 0x....      ADR.W    R1,`?<Constant "   Observer Gains   ">`
   \   000009BC   0x2030             MOVS     R0,#+48
   \   000009BE   0x.... 0x....      BL       LCD_DisplayStringLine
    867                    
    868                    ptr = "     K1       K2    ";
    869                    LCD_DisplayStringLine(Line3,ptr); 
   \   000009C2   0x.... 0x....      ADR.W    R1,`?<Constant "     K1       K2    ">`
   \   000009C6   0x2048             MOVS     R0,#+72
   \   000009C8   0x.... 0x....      BL       LCD_DisplayStringLine
    870                    
    871                    LCD_ClearLine(Line4);
   \   000009CC   0x2060             MOVS     R0,#+96
   \   000009CE   0x.... 0x....      BL       LCD_ClearLine
    872                     
    873                    ptr = "      PLL Gains     ";
    874                    LCD_DisplayStringLine(Line5,ptr); 
   \   000009D2   0x.... 0x....      ADR.W    R1,`?<Constant "      PLL Gains     ">`
   \   000009D6   0x2078             MOVS     R0,#+120
   \   000009D8   0x.... 0x....      BL       LCD_DisplayStringLine
    875                    
    876                    ptr = "     P        I     ";
    877                    LCD_DisplayStringLine(Line6,ptr);
   \   000009DC   0x.... 0x....      ADR.W    R1,`?<Constant "     P        I     ">`
   \   000009E0   0x2090             MOVS     R0,#+144
   \   000009E2   0x.... 0x....      BL       LCD_DisplayStringLine
    878                    
    879                    LCD_ClearLine(Line7);
   \   000009E6   0x20A8             MOVS     R0,#+168
   \   000009E8   0x.... 0x....      BL       LCD_ClearLine
    880                    
    881                    LCD_ClearLine(Line8);
   \   000009EC   0x20C0             MOVS     R0,#+192
   \   000009EE   0x.... 0x....      BL       LCD_ClearLine
    882                    
    883                    ptr = " <> Move  ^| Change ";          
    884                    LCD_DisplayStringLine(Line9, ptr); 
   \   000009F2   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   000009F6   0x20D8             MOVS     R0,#+216
   \   000009F8   0x.... 0x....      BL       LCD_DisplayStringLine
    885                  }
    886                  
    887                  switch(bMenu_index)
   \                     ??Display_LCD_54:
   \   000009FC   0x7820             LDRB     R0,[R4, #+0]
   \   000009FE   0x2811             CMP      R0,#+17
   \   00000A00   0xD007             BEQ.N    ??Display_LCD_55
   \   00000A02   0xF0C0 0x80EE      BCC.W    ??Display_LCD_1
   \   00000A06   0x2813             CMP      R0,#+19
   \   00000A08   0xD049             BEQ.N    ??Display_LCD_56
   \   00000A0A   0xD325             BCC.N    ??Display_LCD_57
   \   00000A0C   0x2814             CMP      R0,#+20
   \   00000A0E   0xD070             BEQ.N    ??Display_LCD_58
   \   00000A10   0xBDF1             POP      {R0,R4-R7,PC}
    888                  {
    889                    case(K1_MENU):
    890                      LCD_SetTextColor(Red);            
   \                     ??Display_LCD_55:
   \   00000A12   0xF44F 0x4078      MOV      R0,#+63488
   \   00000A16   0x.... 0x....      BL       LCD_SetTextColor
    891                      temp = wK1_LO/10;
   \   00000A1A   0x....             LDR.N    R0,??DataTable51_15
   \   00000A1C   0x6800             LDR      R0,[R0, #+0]
    892                      Display_5DigitSignedNumber(Line4, CHAR_3, temp);
   \   00000A1E   0x210A             MOVS     R1,#+10
   \   00000A20   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000A24   0xB212             SXTH     R2,R2
   \   00000A26   0x2103             MOVS     R1,#+3
   \   00000A28   0x2060             MOVS     R0,#+96
   \   00000A2A   0x.... 0x....      BL       Display_5DigitSignedNumber
    893                      
    894                      LCD_SetTextColor(Blue);
   \   00000A2E   0x201F             MOVS     R0,#+31
   \   00000A30   0x.... 0x....      BL       LCD_SetTextColor
    895                      temp = wK2_LO/100;
   \   00000A34   0x....             LDR.N    R0,??DataTable51_16
   \   00000A36   0x6800             LDR      R0,[R0, #+0]
    896                      Display_5DigitSignedNumber(Line4, CHAR_12, temp);
   \   00000A38   0x2164             MOVS     R1,#+100
   \   00000A3A   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000A3E   0xB212             SXTH     R2,R2
   \   00000A40   0x210C             MOVS     R1,#+12
   \   00000A42   0x2060             MOVS     R0,#+96
   \   00000A44   0x.... 0x....      BL       Display_5DigitSignedNumber
    897                                
    898                      temp = hPLL_P_Gain;
   \   00000A48   0x....             LDR.N    R0,??DataTable51_17
   \   00000A4A   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    899                      Display_5DigitSignedNumber(Line7, CHAR_3, temp);  
   \   00000A4E   0x2103             MOVS     R1,#+3
   \   00000A50   0x20A8             MOVS     R0,#+168
   \   00000A52   0x.... 0x....      BL       Display_5DigitSignedNumber
    900                      
    901                      temp = hPLL_I_Gain;
   \   00000A56   0xE044             B.N      ??Display_LCD_59
    902                      Display_5DigitSignedNumber(Line7, CHAR_12, temp);
    903                    break;
    904                               
    905                     case(K2_MENU):              
    906                      temp = wK1_LO/10;
   \                     ??Display_LCD_57:
   \   00000A58   0x....             LDR.N    R0,??DataTable51_15
   \   00000A5A   0x6800             LDR      R0,[R0, #+0]
    907                      Display_5DigitSignedNumber(Line4, CHAR_3, temp);
   \   00000A5C   0x210A             MOVS     R1,#+10
   \   00000A5E   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000A62   0xB212             SXTH     R2,R2
   \   00000A64   0x2103             MOVS     R1,#+3
   \   00000A66   0x2060             MOVS     R0,#+96
   \   00000A68   0x.... 0x....      BL       Display_5DigitSignedNumber
    908                      
    909                      LCD_SetTextColor(Red);  
   \   00000A6C   0xF44F 0x4078      MOV      R0,#+63488
   \   00000A70   0x.... 0x....      BL       LCD_SetTextColor
    910                      temp = wK2_LO/100;
   \   00000A74   0x....             LDR.N    R0,??DataTable51_16
   \   00000A76   0x6800             LDR      R0,[R0, #+0]
    911                      Display_5DigitSignedNumber(Line4, CHAR_12, temp);
   \   00000A78   0x2164             MOVS     R1,#+100
   \   00000A7A   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000A7E   0xB212             SXTH     R2,R2
   \   00000A80   0x210C             MOVS     R1,#+12
   \   00000A82   0x2060             MOVS     R0,#+96
   \   00000A84   0x.... 0x....      BL       Display_5DigitSignedNumber
    912                      
    913                      LCD_SetTextColor(Blue);           
   \   00000A88   0x201F             MOVS     R0,#+31
   \   00000A8A   0x.... 0x....      BL       LCD_SetTextColor
    914                      temp = hPLL_P_Gain;
   \   00000A8E   0x....             LDR.N    R0,??DataTable51_17
   \   00000A90   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    915                      Display_5DigitSignedNumber(Line7, CHAR_3, temp);  
   \   00000A94   0x2103             MOVS     R1,#+3
   \   00000A96   0x20A8             MOVS     R0,#+168
   \   00000A98   0x.... 0x....      BL       Display_5DigitSignedNumber
    916                      
    917                      temp = hPLL_I_Gain;
   \   00000A9C   0xE021             B.N      ??Display_LCD_59
    918                      Display_5DigitSignedNumber(Line7, CHAR_12, temp);
    919                    break;
    920                      
    921                    case(P_PLL_MENU):
    922                      temp = wK1_LO/10;
   \                     ??Display_LCD_56:
   \   00000A9E   0x....             LDR.N    R0,??DataTable51_15
   \   00000AA0   0x6800             LDR      R0,[R0, #+0]
    923                      Display_5DigitSignedNumber(Line4, CHAR_3, temp);
   \   00000AA2   0x210A             MOVS     R1,#+10
   \   00000AA4   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000AA8   0xB212             SXTH     R2,R2
   \   00000AAA   0x2103             MOVS     R1,#+3
   \   00000AAC   0x2060             MOVS     R0,#+96
   \   00000AAE   0x.... 0x....      BL       Display_5DigitSignedNumber
    924                       
    925                      temp = wK2_LO/100;
   \   00000AB2   0x....             LDR.N    R0,??DataTable51_16
   \   00000AB4   0x6800             LDR      R0,[R0, #+0]
    926                      Display_5DigitSignedNumber(Line4, CHAR_12, temp);
   \   00000AB6   0x2164             MOVS     R1,#+100
   \   00000AB8   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000ABC   0xB212             SXTH     R2,R2
   \   00000ABE   0x210C             MOVS     R1,#+12
   \   00000AC0   0x2060             MOVS     R0,#+96
   \   00000AC2   0x.... 0x....      BL       Display_5DigitSignedNumber
    927                      
    928                      LCD_SetTextColor(Red);           
   \   00000AC6   0xF44F 0x4078      MOV      R0,#+63488
   \   00000ACA   0x.... 0x....      BL       LCD_SetTextColor
    929                      temp = hPLL_P_Gain;
   \   00000ACE   0x....             LDR.N    R0,??DataTable51_17
   \   00000AD0   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    930                      Display_5DigitSignedNumber(Line7, CHAR_3, temp);  
   \   00000AD4   0x2103             MOVS     R1,#+3
   \   00000AD6   0x20A8             MOVS     R0,#+168
   \   00000AD8   0x.... 0x....      BL       Display_5DigitSignedNumber
    931                      
    932                      LCD_SetTextColor(Blue); 
   \   00000ADC   0x201F             MOVS     R0,#+31
   \   00000ADE   0x.... 0x....      BL       LCD_SetTextColor
    933                      temp = hPLL_I_Gain;
   \                     ??Display_LCD_59:
   \   00000AE2   0x....             LDR.N    R0,??DataTable51_18
   \   00000AE4   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    934                      Display_5DigitSignedNumber(Line7, CHAR_12, temp);
   \   00000AE8   0x210C             MOVS     R1,#+12
   \                     ??Display_LCD_6:
   \   00000AEA   0x20A8             MOVS     R0,#+168
   \   00000AEC   0xE8BD 0x40F8      POP      {R3-R7,LR}
   \   00000AF0   0x....             B.N      Display_5DigitSignedNumber
    935                    break;
    936                      
    937                    case(I_PLL_MENU):
    938                      temp = wK1_LO/10;
   \                     ??Display_LCD_58:
   \   00000AF2   0x....             LDR.N    R0,??DataTable51_15
   \   00000AF4   0x6800             LDR      R0,[R0, #+0]
    939                      Display_5DigitSignedNumber(Line4, CHAR_3, temp);
   \   00000AF6   0x210A             MOVS     R1,#+10
   \   00000AF8   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000AFC   0xB212             SXTH     R2,R2
   \   00000AFE   0x2103             MOVS     R1,#+3
   \   00000B00   0x2060             MOVS     R0,#+96
   \   00000B02   0x.... 0x....      BL       Display_5DigitSignedNumber
    940                       
    941                      temp = wK2_LO/100;
   \   00000B06   0x....             LDR.N    R0,??DataTable51_16
   \   00000B08   0x6800             LDR      R0,[R0, #+0]
    942                      Display_5DigitSignedNumber(Line4, CHAR_12, temp);
   \   00000B0A   0x2164             MOVS     R1,#+100
   \   00000B0C   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000B10   0xB212             SXTH     R2,R2
   \   00000B12   0x210C             MOVS     R1,#+12
   \   00000B14   0x2060             MOVS     R0,#+96
   \   00000B16   0x.... 0x....      BL       Display_5DigitSignedNumber
    943                                 
    944                      temp = hPLL_P_Gain;
   \   00000B1A   0x....             LDR.N    R0,??DataTable51_17
   \   00000B1C   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    945                      Display_5DigitSignedNumber(Line7, CHAR_3, temp);  
   \   00000B20   0x2103             MOVS     R1,#+3
   \   00000B22   0x20A8             MOVS     R0,#+168
   \   00000B24   0x.... 0x....      BL       Display_5DigitSignedNumber
    946                      
    947                      LCD_SetTextColor(Red);
   \   00000B28   0xF44F 0x4078      MOV      R0,#+63488
   \   00000B2C   0x.... 0x....      BL       LCD_SetTextColor
    948                      temp = hPLL_I_Gain;
   \   00000B30   0x....             LDR.N    R0,??DataTable51_18
   \   00000B32   0xF9B0 0x2000      LDRSH    R2,[R0, #+0]
    949                      Display_5DigitSignedNumber(Line7, CHAR_12, temp);                  
   \   00000B36   0x210C             MOVS     R1,#+12
   \   00000B38   0x20A8             MOVS     R0,#+168
   \   00000B3A   0x.... 0x....      BL       Display_5DigitSignedNumber
    950                      LCD_SetTextColor(Blue); 
   \   00000B3E   0xE04B             B.N      ??Display_LCD_60
    951                    break;  
    952                  default:
    953                     break;
    954                  }
    955                  break;
    956          #endif
    957                
    958          #ifdef DAC_FUNCTIONALITY      
    959              case(VISUALIZATION_10):
    960                if (bPresent_Visualization != bPrevious_Visualization)
   \                     ??Display_LCD_61:
   \   00000B40   0x2E0A             CMP      R6,#+10
   \   00000B42   0xD01D             BEQ.N    ??Display_LCD_62
    961                {           
    962                  LCD_ClearLine(Line2);
   \   00000B44   0x2030             MOVS     R0,#+48
   \   00000B46   0x.... 0x....      BL       LCD_ClearLine
    963                  
    964                  ptr = "    Signal on PB0   ";
    965                  LCD_DisplayStringLine(Line3,ptr); 
   \   00000B4A   0x.... 0x....      ADR.W    R1,`?<Constant "    Signal on PB0   ">`
   \   00000B4E   0x2048             MOVS     R0,#+72
   \   00000B50   0x.... 0x....      BL       LCD_DisplayStringLine
    966                  
    967                  LCD_ClearLine(Line4);
   \   00000B54   0x2060             MOVS     R0,#+96
   \   00000B56   0x.... 0x....      BL       LCD_ClearLine
    968                   
    969                  LCD_ClearLine(Line5);
   \   00000B5A   0x2078             MOVS     R0,#+120
   \   00000B5C   0x.... 0x....      BL       LCD_ClearLine
    970                  
    971                  ptr = "    Signal on PB1   ";
    972                  LCD_DisplayStringLine(Line6,ptr);
   \   00000B60   0x.... 0x....      ADR.W    R1,`?<Constant "    Signal on PB1   ">`
   \   00000B64   0x2090             MOVS     R0,#+144
   \   00000B66   0x.... 0x....      BL       LCD_DisplayStringLine
    973                  
    974                  LCD_ClearLine(Line7);
   \   00000B6A   0x20A8             MOVS     R0,#+168
   \   00000B6C   0x.... 0x....      BL       LCD_ClearLine
    975                  
    976                  LCD_ClearLine(Line8);
   \   00000B70   0x20C0             MOVS     R0,#+192
   \   00000B72   0x.... 0x....      BL       LCD_ClearLine
    977                  
    978                  ptr = " <> Move  ^| Change ";          
    979                  LCD_DisplayStringLine(Line9, ptr); 
   \   00000B76   0x.... 0x....      ADR.W    R1,`?<Constant " <> Move  ^| Change ">`
   \   00000B7A   0x20D8             MOVS     R0,#+216
   \   00000B7C   0x.... 0x....      BL       LCD_DisplayStringLine
    980                }
    981                
    982                switch(bMenu_index)
   \                     ??Display_LCD_62:
   \   00000B80   0x7820             LDRB     R0,[R4, #+0]
   \   00000B82   0x2815             CMP      R0,#+21
   \   00000B84   0xD002             BEQ.N    ??Display_LCD_63
   \   00000B86   0x2816             CMP      R0,#+22
   \   00000B88   0xD014             BEQ.N    ??Display_LCD_64
   \   00000B8A   0xBDF1             POP      {R0,R4-R7,PC}
    983                {
    984                  case(DAC_PB0_MENU):
    985                    LCD_SetTextColor(Red);
   \                     ??Display_LCD_63:
   \   00000B8C   0xF44F 0x4078      MOV      R0,#+63488
   \   00000B90   0x.... 0x....      BL       LCD_SetTextColor
    986                    ptr = MCDAC_Output_Var_Name(DAC_CH1);
   \   00000B94   0x2001             MOVS     R0,#+1
   \   00000B96   0x.... 0x....      BL       MCDAC_Output_Var_Name
   \   00000B9A   0x4601             MOV      R1,R0
    987                    LCD_DisplayStringLine(Line4, ptr);
   \   00000B9C   0x2060             MOVS     R0,#+96
   \   00000B9E   0x.... 0x....      BL       LCD_DisplayStringLine
    988                    
    989                    LCD_SetTextColor(Blue);
   \   00000BA2   0x201F             MOVS     R0,#+31
   \   00000BA4   0x.... 0x....      BL       LCD_SetTextColor
    990                    ptr = MCDAC_Output_Var_Name(DAC_CH2);
   \   00000BA8   0x2002             MOVS     R0,#+2
   \   00000BAA   0x.... 0x....      BL       MCDAC_Output_Var_Name
    991                    LCD_DisplayStringLine(Line7, ptr);
   \   00000BAE   0x4601             MOV      R1,R0
   \   00000BB0   0x20A8             MOVS     R0,#+168
   \   00000BB2   0x....             B.N      ?Subroutine0
    992                  break;
    993                             
    994                   case(DAC_PB1_MENU):              
    995                    ptr = MCDAC_Output_Var_Name(DAC_CH1);
   \                     ??Display_LCD_64:
   \   00000BB4   0x2001             MOVS     R0,#+1
   \   00000BB6   0x.... 0x....      BL       MCDAC_Output_Var_Name
    996                    LCD_DisplayStringLine(Line4, ptr);
   \   00000BBA   0x4601             MOV      R1,R0
   \   00000BBC   0x2060             MOVS     R0,#+96
   \   00000BBE   0x.... 0x....      BL       LCD_DisplayStringLine
    997                    
    998                    LCD_SetTextColor(Red);
   \   00000BC2   0xF44F 0x4078      MOV      R0,#+63488
   \   00000BC6   0x.... 0x....      BL       LCD_SetTextColor
    999                    ptr = MCDAC_Output_Var_Name(DAC_CH2);
   \   00000BCA   0x2002             MOVS     R0,#+2
   \   00000BCC   0x.... 0x....      BL       MCDAC_Output_Var_Name
   1000                    LCD_DisplayStringLine(Line7, ptr);
   \   00000BD0   0x4601             MOV      R1,R0
   \   00000BD2   0x20A8             MOVS     R0,#+168
   \   00000BD4   0x.... 0x....      BL       LCD_DisplayStringLine
   1001                    LCD_SetTextColor(Blue);
   \                     ??Display_LCD_60:
   \   00000BD8   0x201F             MOVS     R0,#+31
   \   00000BDA   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   00000BDE   0x.... 0x....      B.W      LCD_SetTextColor
   1002                  break;
   1003                  
   1004                  default:
   1005                   break;
   1006                }
   1007                break;      
   1008          #endif
   1009              default:
   1010                break;      
   1011              }
   1012            }
   1013          }
   \                     ??Display_LCD_1:
   \   00000BE2   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \   00000004   0x.... 0x....      B.W      LCD_DisplayStringLine
   1014                    
   1015          /*******************************************************************************
   1016          * Function Name  : Display_5DigitSignedNumber
   1017          * Description    : It Displays a 5 digit signed number in the specified line, 
   1018          *                  starting from a specified element of LCD display matrix 
   1019          * Input          : Line, starting point in LCD dysplay matrix, 5 digit signed
   1020          *                  number 
   1021          * Output         : None
   1022          * Return         : None
   1023          *******************************************************************************/
   1024          

   \                                 In section .text, align 2, keep-with-next
   1025          void Display_5DigitSignedNumber(u8 Line, u8 bFirstchar, s16 number)
   1026          { u32 i;
   \                     Display_5DigitSignedNumber:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x460F             MOV      R7,R1
   \   00000008   0x4616             MOV      R6,R2
   1027            u16 h_aux=1;
   \   0000000A   0xF04F 0x0901      MOV      R9,#+1
   1028          
   1029            if (number<0)     
   \   0000000E   0xF44F 0x70A0      MOV      R0,#+320
   \   00000012   0xEBA0 0x1107      SUB      R1,R0,R7, LSL #+4
   \   00000016   0x2E00             CMP      R6,#+0
   \   00000018   0xD506             BPL.N    ??Display_5DigitSignedNumber_0
   1030            {
   1031              LCD_DisplayChar(Line,(u16)( 320-16*bFirstchar), '-');
   \   0000001A   0x222D             MOVS     R2,#+45
   \   0000001C   0xB289             UXTH     R1,R1
   \   0000001E   0x4640             MOV      R0,R8
   \   00000020   0x.... 0x....      BL       LCD_DisplayChar
   1032              number = -number;
   \   00000024   0x4276             RSBS     R6,R6,#+0
   \   00000026   0xE004             B.N      ??Display_5DigitSignedNumber_1
   1033            }
   1034            else 
   1035            {
   1036              LCD_DisplayChar(Line,(u16)( 320-16*bFirstchar), ' ');
   \                     ??Display_5DigitSignedNumber_0:
   \   00000028   0x2220             MOVS     R2,#+32
   \   0000002A   0xB289             UXTH     R1,R1
   \   0000002C   0x4640             MOV      R0,R8
   \   0000002E   0x.... 0x....      BL       LCD_DisplayChar
   1037            }
   1038                
   1039            for (i=0; i<4; i++)
   \                     ??Display_5DigitSignedNumber_1:
   \   00000032   0x1D78             ADDS     R0,R7,#+5
   \   00000034   0x4240             RSBS     R0,R0,#+0
   \   00000036   0x0100             LSLS     R0,R0,#+4
   \   00000038   0xF200 0x1440      ADDW     R4,R0,#+320
   \   0000003C   0x2504             MOVS     R5,#+4
   \   0000003E   0xB236             SXTH     R6,R6
   1040            {
   1041              LCD_DisplayChar(Line, (u16)(320 -(16*(bFirstchar+5-i))),
   1042                                                  (u8)(((number%(10*h_aux))/h_aux)+0x30));          
   \                     ??Display_5DigitSignedNumber_2:
   \   00000040   0xEB09 0x0089      ADD      R0,R9,R9, LSL #+2
   \   00000044   0xEA4F 0x0A40      LSL      R10,R0,#+1
   \   00000048   0xFB96 0xF0FA      SDIV     R0,R6,R10
   \   0000004C   0xFB0A 0x6010      MLS      R0,R10,R0,R6
   \   00000050   0xFB90 0xF0F9      SDIV     R0,R0,R9
   \   00000054   0xF100 0x0230      ADD      R2,R0,#+48
   \   00000058   0xB2D2             UXTB     R2,R2
   \   0000005A   0xB2A1             UXTH     R1,R4
   \   0000005C   0x4640             MOV      R0,R8
   \   0000005E   0x.... 0x....      BL       LCD_DisplayChar
   1043              h_aux *= 10;
   \   00000062   0xFA1F 0xF98A      UXTH     R9,R10
   1044            }
   \   00000066   0x3410             ADDS     R4,R4,#+16
   \   00000068   0x1E6D             SUBS     R5,R5,#+1
   \   0000006A   0xD1E9             BNE.N    ??Display_5DigitSignedNumber_2
   1045            LCD_DisplayChar(Line,(u16)(320-(16*(bFirstchar+1))), (u8)(((number/10000))+0x30));
   \   0000006C   0xF242 0x7010      MOVW     R0,#+10000
   \   00000070   0xFB96 0xF0F0      SDIV     R0,R6,R0
   \   00000074   0xF100 0x0230      ADD      R2,R0,#+48
   \   00000078   0xB2D2             UXTB     R2,R2
   \   0000007A   0xF44F 0x70A0      MOV      R0,#+320
   \   0000007E   0x1C79             ADDS     R1,R7,#+1
   \   00000080   0xEBA0 0x1101      SUB      R1,R0,R1, LSL #+4
   \   00000084   0xB289             UXTH     R1,R1
   \   00000086   0x4640             MOV      R0,R8
   \   00000088   0xE8BD 0x47F0      POP      {R4-R10,LR}
   \   0000008C   0x.... 0x....      B.W      LCD_DisplayChar
   1046          }    
   1047          
   1048          /*******************************************************************************
   1049          * Function Name  : ComputeVisualization
   1050          * Description    : Starting from the value of the bMenuIndex, this function 
   1051          *                  extract the information about the present menu to be 
   1052          *                  displayed on LCD
   1053          * Input          : bMenuIndex variable 
   1054          * Output         : Present visualization
   1055          * Return         : None
   1056          *******************************************************************************/
   1057          

   \                                 In section .text, align 4, keep-with-next
   1058          u8 ComputeVisualization(u8 bLocal_MenuIndex)
   1059          {  
   1060            u8 bTemp;
   1061          
   1062              switch(bLocal_MenuIndex)
   \                     ComputeVisualization:
   \   00000000   0x1E80             SUBS     R0,R0,#+2
   \   00000002   0x2817             CMP      R0,#+23
   \   00000004   0xD81F             BHI.N    ??ComputeVisualization_1
   \   00000006   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??ComputeVisualization_0:
   \   0000000A   0x0C 0x0C          DC8      0xC,0xC,0xC,0xE
   \              0x0C 0x0E    
   \   0000000E   0x0E 0x0E          DC8      0xE,0xE,0x10,0x10
   \              0x10 0x10    
   \   00000012   0x10 0x14          DC8      0x10,0x14,0x16,0x16
   \              0x16 0x16    
   \   00000016   0x16 0x18          DC8      0x16,0x18,0x1E,0x1A
   \              0x1E 0x1A    
   \   0000001A   0x1A 0x1A          DC8      0x1A,0x1A,0x1A,0x1C
   \              0x1A 0x1C    
   \   0000001E   0x1C 0x12          DC8      0x1C,0x12,0x12,0x12
   \              0x12 0x12    
   1063              {
   1064                case(CONTROL_MODE_MENU_1):
   1065                  bTemp = VISUALIZATION_1;
   1066                break;
   1067                case(REF_SPEED_MENU):
   1068                  bTemp = VISUALIZATION_1;
   1069                break;
   1070                
   1071                case(P_SPEED_MENU):
   1072                  bTemp = VISUALIZATION_2; 
   1073                break;
   1074                case(I_SPEED_MENU):
   1075                  bTemp = VISUALIZATION_2; 
   1076                break;
   1077          #ifdef DIFFERENTIAL_TERM_ENABLED
   1078                case(D_SPEED_MENU):
   1079                 bTemp = VISUALIZATION_2; 
   \                     ??ComputeVisualization_2:
   \   00000022   0x2002             MOVS     R0,#+2
   1080                break;
   \   00000024   0xE010             B.N      ??ComputeVisualization_3
   1081          #endif        
   1082          
   1083                case(P_TORQUE_MENU):
   1084                  bTemp = VISUALIZATION_3; 
   1085                break; 
   1086                case(I_TORQUE_MENU):
   1087                  bTemp = VISUALIZATION_3; 
   1088                break; 
   1089          #ifdef DIFFERENTIAL_TERM_ENABLED
   1090                case(D_TORQUE_MENU):
   1091                  bTemp = VISUALIZATION_3; 
   \                     ??ComputeVisualization_4:
   \   00000026   0x2003             MOVS     R0,#+3
   1092                break; 
   \   00000028   0xE00E             B.N      ??ComputeVisualization_3
   1093          #endif        
   1094                   
   1095                case(P_FLUX_MENU):
   1096                   bTemp = VISUALIZATION_4; 
   1097                break; 
   1098                case(I_FLUX_MENU):
   1099                   bTemp = VISUALIZATION_4; 
   1100                break; 
   1101          #ifdef DIFFERENTIAL_TERM_ENABLED
   1102                case(D_FLUX_MENU):
   1103                   bTemp = VISUALIZATION_4; 
   \                     ??ComputeVisualization_5:
   \   0000002A   0x2004             MOVS     R0,#+4
   1104                break; 
   \   0000002C   0xE00C             B.N      ??ComputeVisualization_3
   1105          #endif
   1106                
   1107          #ifdef FLUX_WEAKENING
   1108                case(P_VOLT_MENU):
   1109                  bTemp = VISUALIZATION_11; 
   1110                break;
   1111                case(I_VOLT_MENU):
   1112                  bTemp = VISUALIZATION_11;
   1113                case(TARGET_VOLT_MENU):
   1114                  bTemp = VISUALIZATION_11;        
   \                     ??ComputeVisualization_6:
   \   0000002E   0x200B             MOVS     R0,#+11
   1115                break;
   \   00000030   0xE00A             B.N      ??ComputeVisualization_3
   1116          #endif      
   1117                       
   1118                case(POWER_STAGE_MENU):
   1119                  bTemp = VISUALIZATION_5;
   \                     ??ComputeVisualization_7:
   \   00000032   0x2005             MOVS     R0,#+5
   1120                break;
   \   00000034   0xE008             B.N      ??ComputeVisualization_3
   1121                  
   1122                case(CONTROL_MODE_MENU_6):
   1123                  bTemp = VISUALIZATION_6;
   1124                break;
   1125                case(IQ_REF_MENU):
   1126                  bTemp = VISUALIZATION_6;
   1127                break;
   1128                case(ID_REF_MENU):
   1129                  bTemp = VISUALIZATION_6;
   \                     ??ComputeVisualization_8:
   \   00000036   0x2006             MOVS     R0,#+6
   1130                break;  
   \   00000038   0xE006             B.N      ??ComputeVisualization_3
   1131                
   1132                case(FAULT_MENU):
   1133                  bTemp = VISUALIZATION_7;
   \                     ??ComputeVisualization_9:
   \   0000003A   0x2007             MOVS     R0,#+7
   1134                break;      
   \   0000003C   0xE004             B.N      ??ComputeVisualization_3
   1135               
   1136          #ifdef OBSERVER_GAIN_TUNING  
   1137                case(K1_MENU):
   1138                   bTemp = VISUALIZATION_9;
   1139                 break;   
   1140                 case(K2_MENU):
   1141                   bTemp = VISUALIZATION_9;
   1142                 break;
   1143                 case(P_PLL_MENU):
   1144                   bTemp = VISUALIZATION_9;
   1145                 break;
   1146                 case(I_PLL_MENU):
   1147                  bTemp = VISUALIZATION_9;
   \                     ??ComputeVisualization_10:
   \   0000003E   0x2009             MOVS     R0,#+9
   1148                 break;
   \   00000040   0xE002             B.N      ??ComputeVisualization_3
   1149          #endif
   1150          
   1151          #ifdef DAC_FUNCTIONALITY
   1152                case(DAC_PB0_MENU):
   1153                   bTemp = VISUALIZATION_10;
   1154                 break;   
   1155                 case(DAC_PB1_MENU):
   1156                   bTemp = VISUALIZATION_10;
   \                     ??ComputeVisualization_11:
   \   00000042   0x200A             MOVS     R0,#+10
   1157                 break;
   \   00000044   0xE000             B.N      ??ComputeVisualization_3
   1158          #endif             
   1159                default:
   1160                  bTemp = VISUALIZATION_1;
   \                     ??ComputeVisualization_1:
   \   00000046   0x2001             MOVS     R0,#+1
   1161                break;      
   1162              }    
   1163                
   1164              if (State == WAIT)
   \                     ??ComputeVisualization_3:
   \   00000048   0x....             LDR.N    R1,??DataTable51_19
   \   0000004A   0x7809             LDRB     R1,[R1, #+0]
   \   0000004C   0x2906             CMP      R1,#+6
   \   0000004E   0xBF08             IT       EQ 
   \   00000050   0x2008             MOVEQ    R0,#+8
   1165              {
   1166                bTemp = VISUALIZATION_8;
   1167              }  
   1168              
   1169              return (bTemp);
   \   00000052   0x4770             BX       LR               ;; return
   1170          }

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "  PMSM FOC ver 2.0  ">`:
   \   00000000   0x20 0x20          DC8 "  PMSM FOC ver 2.0  "
   \              0x50 0x4D    
   \              0x53 0x4D    
   \              0x20 0x46    
   \              0x4F 0x43    
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x20 0x32    
   \              0x2E 0x30    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " <> Move  ^| Change ">`:
   \   00000000   0x20 0x3C          DC8 " <> Move  ^| Change "
   \              0x3E 0x20    
   \              0x4D 0x6F    
   \              0x76 0x65    
   \              0x20 0x20    
   \              0x5E 0x7C    
   \              0x20 0x43    
   \              0x68 0x61    
   \              0x6E 0x67    
   \              0x65 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   0x........         DC32     `?<Constant "  PMSM FOC ver 2.0  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_1:
   \   00000000   0x........         DC32     bPrevious_Visualization

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_2:
   \   00000000   0x........         DC32     bMenu_index

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_3:
   \   00000000   0x........         DC32     hSpeed_Reference

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_4:
   \   00000000   0x........         DC32     PID_Speed_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_5:
   \   00000000   0x........         DC32     PID_Torque_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_6:
   \   00000000   0x........         DC32     hTorque_Reference

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_7:
   \   00000000   0x........         DC32     Stat_Curr_q_d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_8:
   \   00000000   0x........         DC32     PID_Flux_InitStructure

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_9:
   \   00000000   0x........         DC32     hFlux_Reference

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_10:
   \   00000000   0x........         DC32     hFW_P_Gain

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_11:
   \   00000000   0x........         DC32     hFW_I_Gain

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_12:
   \   00000000   0x........         DC32     hFW_V_Ref

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_13:
   \   00000000   0x........         DC32     hVMagn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_14:
   \   00000000   0x........         DC32     wGlobal_Flags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_15:
   \   00000000   0x........         DC32     wK1_LO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_16:
   \   00000000   0x........         DC32     wK2_LO

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_17:
   \   00000000   0x........         DC32     hPLL_P_Gain

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_18:
   \   00000000   0x........         DC32     hPLL_I_Gain

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51_19:
   \   00000000   0x........         DC32     State

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " STM32 Motor Control">`:
   \   00000000   0x20 0x53          DC8 " STM32 Motor Control"
   \              0x54 0x4D    
   \              0x33 0x32    
   \              0x20 0x4D    
   \              0x6F 0x74    
   \              0x6F 0x72    
   \              0x20 0x43    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   Sensorless Demo  ">`:
   \   00000000   0x20 0x20          DC8 "   Sensorless Demo  "
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x73 0x6F    
   \              0x72 0x6C    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x44 0x65    
   \              0x6D 0x6F    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Target     Measured">`:
   \   00000000   0x20 0x54          DC8 " Target     Measured"
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x74 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "       (rpm)        ">`:
   \   00000000   0x20 0x20          DC8 "       (rpm)        "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x28    
   \              0x72 0x70    
   \              0x6D 0x29    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Speed control mode">`:
   \   00000000   0x20 0x53          DC8 " Speed control mode"
   \              0x70 0x65    
   \              0x65 0x64    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x20 0x6D    
   \              0x6F 0x64    
   \              0x65 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "       Speed        ">`:
   \   00000000   0x20 0x20          DC8 "       Speed        "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x70 0x65    
   \              0x65 0x64    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    P     I     D   ">`:
   \   00000000   0x20 0x20          DC8 "    P     I     D   "
   \              0x20 0x20    
   \              0x50 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x49 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x44 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Target        (rpm)">`:
   \   00000000   0x20 0x54          DC8 " Target        (rpm)"
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x74 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x28    
   \              0x72 0x70    
   \              0x6D 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Measured      (rpm)">`:
   \   00000000   0x20 0x4D          DC8 " Measured      (rpm)"
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x28    
   \              0x72 0x70    
   \              0x6D 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "       Torque       ">`:
   \   00000000   0x20 0x20          DC8 "       Torque       "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x6F 0x72    
   \              0x71 0x75    
   \              0x65 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Target         (Iq)">`:
   \   00000000   0x20 0x54          DC8 " Target         (Iq)"
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x74 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x28 0x49    
   \              0x71 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Measured       (Iq)">`:
   \   00000000   0x20 0x4D          DC8 " Measured       (Iq)"
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x28 0x49    
   \              0x71 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "        Flux        ">`:
   \   00000000   0x20 0x20          DC8 "        Flux        "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x46 0x6C    
   \              0x75 0x78    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Target         (Id)">`:
   \   00000000   0x20 0x54          DC8 " Target         (Id)"
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x74 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x28 0x49    
   \              0x64 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Measured       (Id)">`:
   \   00000000   0x20 0x4D          DC8 " Measured       (Id)"
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x28 0x49    
   \              0x64 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Flux Weakening Ctrl ">`:
   \   00000000   0x46 0x6C          DC8 "Flux Weakening Ctrl "
   \              0x75 0x78    
   \              0x20 0x57    
   \              0x65 0x61    
   \              0x6B 0x65    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x20 0x43    
   \              0x74 0x72    
   \              0x6C 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    P     I         ">`:
   \   00000000   0x20 0x20          DC8 "    P     I         "
   \              0x20 0x20    
   \              0x50 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x49 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Target        (Vs%)">`:
   \   00000000   0x20 0x54          DC8 " Target        (Vs%)"
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x74 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x28    
   \              0x56 0x73    
   \              0x25 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Measured      (Vs%)">`:
   \   00000000   0x20 0x4D          DC8 " Measured      (Vs%)"
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x64 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x28    
   \              0x56 0x73    
   \              0x25 0x29    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Power Stage Status ">`:
   \   00000000   0x20 0x50          DC8 " Power Stage Status "
   \              0x6F 0x77    
   \              0x65 0x72    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  DC bus =     Volt ">`:
   \   00000000   0x20 0x20          DC8 "  DC bus =     Volt "
   \              0x44 0x43    
   \              0x20 0x62    
   \              0x75 0x73    
   \              0x20 0x3D    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  T =      Celsius  ">`:
   \   00000000   0x20 0x20          DC8 "  T =      Celsius  "
   \              0x54 0x20    
   \              0x3D 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x65 0x6C    
   \              0x73 0x69    
   \              0x75 0x73    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " <> Move            ">`:
   \   00000000   0x20 0x3C          DC8 " <> Move            "
   \              0x3E 0x20    
   \              0x4D 0x6F    
   \              0x76 0x65    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "     Target Measured">`:
   \   00000000   0x20 0x20          DC8 "     Target Measured"
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x61 0x72    
   \              0x67 0x65    
   \              0x74 0x20    
   \              0x4D 0x65    
   \              0x61 0x73    
   \              0x75 0x72    
   \              0x65 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Iq                  ">`:
   \   00000000   0x49 0x71          DC8 "Iq                  "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Id                  ">`:
   \   00000000   0x49 0x64          DC8 "Id                  "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Speed (rpm)         ">`:
   \   00000000   0x53 0x70          DC8 "Speed (rpm)         "
   \              0x65 0x65    
   \              0x64 0x20    
   \              0x28 0x72    
   \              0x70 0x6D    
   \              0x29 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Torque control mode ">`:
   \   00000000   0x54 0x6F          DC8 "Torque control mode "
   \              0x72 0x71    
   \              0x75 0x65    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x74 0x72    
   \              0x6F 0x6C    
   \              0x20 0x6D    
   \              0x6F 0x64    
   \              0x65 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    !!! FAULT !!!   ">`:
   \   00000000   0x20 0x20          DC8 "    !!! FAULT !!!   "
   \              0x20 0x20    
   \              0x21 0x21    
   \              0x21 0x20    
   \              0x46 0x41    
   \              0x55 0x4C    
   \              0x54 0x20    
   \              0x21 0x21    
   \              0x21 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Bus Under Voltage  ">`:
   \   00000000   0x20 0x42          DC8 " Bus Under Voltage  "
   \              0x75 0x73    
   \              0x20 0x55    
   \              0x6E 0x64    
   \              0x65 0x72    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   Over Current    ">`:
   \   00000000   0x20 0x20          DC8 "   Over Current    "
   \              0x20 0x4F    
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x43 0x75    
   \              0x72 0x72    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x20 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   Over Heating    ">`:
   \   00000000   0x20 0x20          DC8 "   Over Heating    "
   \              0x20 0x4F    
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x48 0x65    
   \              0x61 0x74    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x20 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  Bus Over Voltage  ">`:
   \   00000000   0x20 0x20          DC8 "  Bus Over Voltage  "
   \              0x42 0x75    
   \              0x73 0x20    
   \              0x4F 0x76    
   \              0x65 0x72    
   \              0x20 0x56    
   \              0x6F 0x6C    
   \              0x74 0x61    
   \              0x67 0x65    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  Start-up failed   ">`:
   \   00000000   0x20 0x20          DC8 "  Start-up failed   "
   \              0x53 0x74    
   \              0x61 0x72    
   \              0x74 0x2D    
   \              0x75 0x70    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Error on speed fdbck">`:
   \   00000000   0x45 0x72          DC8 "Error on speed fdbck"
   \              0x72 0x6F    
   \              0x72 0x20    
   \              0x6F 0x6E    
   \              0x20 0x73    
   \              0x70 0x65    
   \              0x65 0x64    
   \              0x20 0x66    
   \              0x64 0x62    
   \              0x63 0x6B    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   Press \\'Key\\' to   ">`:
   \   00000000   0x20 0x20          DC8 "   Press 'Key' to   "
   \              0x20 0x50    
   \              0x72 0x65    
   \              0x73 0x73    
   \              0x20 0x27    
   \              0x4B 0x65    
   \              0x79 0x27    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   return to menu   ">`:
   \   00000000   0x20 0x20          DC8 "   return to menu   "
   \              0x20 0x72    
   \              0x65 0x74    
   \              0x75 0x72    
   \              0x6E 0x20    
   \              0x74 0x6F    
   \              0x20 0x6D    
   \              0x65 0x6E    
   \              0x75 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "       T =">`:
   \   00000000   0x20 0x20          DC8 "       T ="
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x54    
   \              0x20 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  DC bus =">`:
   \   00000000   0x20 0x20          DC8 "  DC bus ="
   \              0x44 0x43    
   \              0x20 0x62    
   \              0x75 0x73    
   \              0x20 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Motor is stopping  ">`:
   \   00000000   0x20 0x4D          DC8 " Motor is stopping  "
   \              0x6F 0x74    
   \              0x6F 0x72    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x73 0x74    
   \              0x6F 0x70    
   \              0x70 0x69    
   \              0x6E 0x67    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   please wait...   ">`:
   \   00000000   0x20 0x20          DC8 "   please wait...   "
   \              0x20 0x70    
   \              0x6C 0x65    
   \              0x61 0x73    
   \              0x65 0x20    
   \              0x77 0x61    
   \              0x69 0x74    
   \              0x2E 0x2E    
   \              0x2E 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "   Observer Gains   ">`:
   \   00000000   0x20 0x20          DC8 "   Observer Gains   "
   \              0x20 0x4F    
   \              0x62 0x73    
   \              0x65 0x72    
   \              0x76 0x65    
   \              0x72 0x20    
   \              0x47 0x61    
   \              0x69 0x6E    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "     K1       K2    ">`:
   \   00000000   0x20 0x20          DC8 "     K1       K2    "
   \              0x20 0x20    
   \              0x20 0x4B    
   \              0x31 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x4B 0x32    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "      PLL Gains     ">`:
   \   00000000   0x20 0x20          DC8 "      PLL Gains     "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x50 0x4C    
   \              0x4C 0x20    
   \              0x47 0x61    
   \              0x69 0x6E    
   \              0x73 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "     P        I     ">`:
   \   00000000   0x20 0x20          DC8 "     P        I     "
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x49 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    Signal on PB0   ">`:
   \   00000000   0x20 0x20          DC8 "    Signal on PB0   "
   \              0x20 0x20    
   \              0x53 0x69    
   \              0x67 0x6E    
   \              0x61 0x6C    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x50 0x42    
   \              0x30 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "    Signal on PB1   ">`:
   \   00000000   0x20 0x20          DC8 "    Signal on PB1   "
   \              0x20 0x20    
   \              0x53 0x69    
   \              0x67 0x6E    
   \              0x61 0x6C    
   \              0x20 0x6F    
   \              0x6E 0x20    
   \              0x50 0x42    
   \              0x31 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   1171                
   1172          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  ComputeVisualization
       32  Display_5DigitSignedNumber
              0 -> LCD_DisplayChar
             32 -> LCD_DisplayChar
       24  Display_LCD
             24 -> ComputeVisualization
              0 -> Display_5DigitSignedNumber
             24 -> Display_5DigitSignedNumber
              0 -> LCD_ClearLine
             24 -> LCD_ClearLine
              0 -> LCD_DisplayChar
             24 -> LCD_DisplayChar
              0 -> LCD_DisplayStringLine
             24 -> LCD_DisplayStringLine
              0 -> LCD_DrawRect
             24 -> LCD_DrawRect
              0 -> LCD_SetTextColor
             24 -> LCD_SetTextColor
             24 -> MCDAC_Output_Var_Name
             24 -> MCL_Compute_BusVolt
             24 -> MCL_Compute_Temp
             24 -> STO_Get_Speed_Hz
             24 -> TB_DisplayDelay_IsElapsed
             24 -> TB_Set_DisplayDelay_500us
        8  Display_Welcome_Message
              0 -> LCD_DisplayStringLine
              8 -> LCD_DisplayStringLine


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "        Flux        ">
      24  ?<Constant "       (rpm)        ">
      24  ?<Constant "       Speed        ">
      12  ?<Constant "       T =">
      24  ?<Constant "       Torque       ">
      24  ?<Constant "      PLL Gains     ">
      24  ?<Constant "     K1       K2    ">
      24  ?<Constant "     P        I     ">
      24  ?<Constant "     Target Measured">
      24  ?<Constant "    !!! FAULT !!!   ">
      24  ?<Constant "    P     I         ">
      24  ?<Constant "    P     I     D   ">
      24  ?<Constant "    Signal on PB0   ">
      24  ?<Constant "    Signal on PB1   ">
      24  ?<Constant "   Observer Gains   ">
      20  ?<Constant "   Over Current    ">
      20  ?<Constant "   Over Heating    ">
      24  ?<Constant "   Press \'Key\' to   ">
      24  ?<Constant "   Sensorless Demo  ">
      24  ?<Constant "   please wait...   ">
      24  ?<Constant "   return to menu   ">
      24  ?<Constant "  Bus Over Voltage  ">
      24  ?<Constant "  DC bus =     Volt ">
      12  ?<Constant "  DC bus =">
      24  ?<Constant "  PMSM FOC ver 2.0  ">
      24  ?<Constant "  Start-up failed   ">
      24  ?<Constant "  T =      Celsius  ">
      24  ?<Constant " <> Move            ">
      24  ?<Constant " <> Move  ^| Change ">
      24  ?<Constant " Bus Under Voltage  ">
      24  ?<Constant " Measured       (Id)">
      24  ?<Constant " Measured       (Iq)">
      24  ?<Constant " Measured      (Vs%)">
      24  ?<Constant " Measured      (rpm)">
      24  ?<Constant " Motor is stopping  ">
      24  ?<Constant " Power Stage Status ">
      24  ?<Constant " STM32 Motor Control">
      20  ?<Constant " Speed control mode">
      24  ?<Constant " Target         (Id)">
      24  ?<Constant " Target         (Iq)">
      24  ?<Constant " Target        (Vs%)">
      24  ?<Constant " Target        (rpm)">
      24  ?<Constant " Target     Measured">
      24  ?<Constant "Error on speed fdbck">
      24  ?<Constant "Flux Weakening Ctrl ">
      24  ?<Constant "Id                  ">
      24  ?<Constant "Iq                  ">
      24  ?<Constant "Speed (rpm)         ">
      24  ?<Constant "Torque control mode ">
       4  ??DataTable51
       4  ??DataTable51_1
       4  ??DataTable51_10
       4  ??DataTable51_11
       4  ??DataTable51_12
       4  ??DataTable51_13
       4  ??DataTable51_14
       4  ??DataTable51_15
       4  ??DataTable51_16
       4  ??DataTable51_17
       4  ??DataTable51_18
       4  ??DataTable51_19
       4  ??DataTable51_2
       4  ??DataTable51_3
       4  ??DataTable51_4
       4  ??DataTable51_5
       4  ??DataTable51_6
       4  ??DataTable51_7
       4  ??DataTable51_8
       4  ??DataTable51_9
       8  ?Subroutine0
      84  ComputeVisualization
     144  Display_5DigitSignedNumber
    3044  Display_LCD
      36  Display_Welcome_Message
       2  bPrevious_Visualization
          bPresent_Visualization

 
     2 bytes in section .bss
    24 bytes in section .rodata
 4 512 bytes in section .text
 
 4 512 bytes of CODE  memory
    24 bytes of CONST memory
     2 bytes of DATA  memory

Errors: none
Warnings: 4
