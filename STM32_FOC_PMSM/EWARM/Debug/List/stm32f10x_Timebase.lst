###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     04/Nov/2013  13:19:58 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\st\stm32 foc firwmare libraries                       #
#                    v2.0\STM32_FOC_PMSM\src\stm32f10x_Timebase.c             #
#    Command line =  "D:\st\stm32 foc firwmare libraries                      #
#                    v2.0\STM32_FOC_PMSM\src\stm32f10x_Timebase.c" -D         #
#                    VECT_TAB_FLASH -lCN "D:\st\stm32 foc firwmare libraries  #
#                    v2.0\STM32_FOC_PMSM\EWARM\Debug\List\" --diag_error      #
#                    Pe068,Pe069 -o "D:\st\stm32 foc firwmare libraries       #
#                    v2.0\STM32_FOC_PMSM\EWARM\Debug\Obj\" --debug            #
#                    --endian=little --cpu=Cortex-M3 --fpu=None               #
#                    --dlib_config D:\IAR\arm\INC\c\DLib_Config_Normal.h -I   #
#                    "D:\st\stm32 foc firwmare libraries                      #
#                    v2.0\STM32_FOC_PMSM\EWARM\..\" -I "D:\st\stm32 foc       #
#                    firwmare libraries v2.0\STM32_FOC_PMSM\EWARM\..\..\STM32 #
#                    F10XFWLIB\inc\" -I "D:\st\stm32 foc firwmare libraries   #
#                    v2.0\STM32_FOC_PMSM\EWARM\..\inc\" -Oh --use_c++_inline  #
#                    --require_prototypes                                     #
#    List file    =  D:\st\stm32 foc firwmare libraries                       #
#                    v2.0\STM32_FOC_PMSM\EWARM\Debug\List\stm32f10x_Timebase. #
#                    lst                                                      #
#    Object file  =  D:\st\stm32 foc firwmare libraries                       #
#                    v2.0\STM32_FOC_PMSM\EWARM\Debug\Obj\stm32f10x_Timebase.o #
#                                                                             #
#                                                                             #
###############################################################################

D:\st\stm32 foc firwmare libraries v2.0\STM32_FOC_PMSM\src\stm32f10x_Timebase.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : stm32f10x_Timebase.c
      3          * Author             : IMS Systems Lab 
      4          * Date First Issued  : 21/11/07
      5          * Description        : This module handles time base. It used in display and 
      6          *                      fault management, speed regulation, motor ramp-up  
      7          ********************************************************************************
      8          * History:
      9          * 21/11/07 v1.0
     10          * 29/05/08 v2.0
     11          ********************************************************************************
     12          * THE PRESENT SOFTWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     13          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     14          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     15          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     16          * CONTENT OF SUCH SOFTWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     17          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     18          *
     19          * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     20          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     21          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     22          *******************************************************************************/
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "stm32f10x_lib.h"
     25          
     26          /* Include of other module interface headers ---------------------------------*/
     27          /* Local includes ------------------------------------------------------------*/
     28          #include "stm32f10x_MClib.h"
     29          #include "MC_Globals.h"
     30          #include "stm32f10x_it.h"
     31          
     32          /* Private typedef -----------------------------------------------------------*/
     33          /* Private define ------------------------------------------------------------*/
     34          #define TB_Prescaler_5ms    31    // ((31+1)*(9374+1)/60000000) sec -> 5 ms 
     35          #define TB_AutoReload_5ms    9374
     36          
     37          #define TB_Prescaler_500us    29    // ((29+1)*(999+1)/60000000) sec -> 500 us 
     38          #define TB_AutoReload_500us    999
     39          
     40          #define SYSTICK_PRE_EMPTION_PRIORITY 3
     41          #define SYSTICK_SUB_PRIORITY 0
     42          
     43          #define SPEED_SAMPLING_TIME   PID_SPEED_SAMPLING_TIME
     44          
     45          /* Private macro -------------------------------------------------------------*/
     46          /* Private variables ---------------------------------------------------------*/

   \                                 In section .data, align 2
     47          static u16 hStart_Up_TimeLeft_500us =0;
     48          static volatile u16 hTimebase_500us = 0;
     49          static volatile u16 hTimebase_display_500us = 0;
     50          static volatile u16 hKey_debounce_500us = 0;
     51          volatile u8 bPID_Speed_Sampling_Time_500us = PID_SPEED_SAMPLING_TIME;
   \                     bPID_Speed_Sampling_Time_500us:
   \   00000000   0x03               DC8 3
   \   00000001   0x00               DC8 0
   \   00000002   0x0000             DC16 0
   \   00000004   0x0000             DC16 0
   \   00000006   0x0000             DC16 0
   \   00000008   0x0000             DC16 0
   \   0000000A   0x0003             DC16 3
     52          static u16 hSpeedMeas_Timebase_500us = SPEED_SAMPLING_TIME;
     53          
     54          #ifdef FLUX_TORQUE_PIDs_TUNING  
     55          static u16 hTorqueSwapping = SQUARE_WAVE_PERIOD; 
     56          #endif
     57          /*******************************************************************************
     58          * Function Name  : TB_Init
     59          * Description    : TimeBase peripheral initialization. The base time is set to 
     60          *                  500usec and the related interrupt is enabled  
     61          * Input          : None
     62          * Output         : None
     63          * Return         : None
     64          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     65          void TB_Init(void)
     66          {   
   \                     TB_Init:
   \   00000000   0xB580             PUSH     {R7,LR}
     67            /* Select AHB clock(HCLK) as SysTick clock source */
     68            SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK);
   \   00000002   0x2004             MOVS     R0,#+4
   \   00000004   0x.... 0x....      BL       SysTick_CLKSourceConfig
     69            /* SysTick interrupt each 500usec with Core clock equal to 72MHz */
     70            SysTick_SetReload(36000);
   \   00000008   0xF648 0x40A0      MOVW     R0,#+36000
   \   0000000C   0x.... 0x....      BL       SysTick_SetReload
     71            /* Enable SysTick Counter */
     72            SysTick_CounterCmd(SysTick_Counter_Enable);
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x.... 0x....      BL       SysTick_CounterCmd
     73          
     74            NVIC_SystemHandlerPriorityConfig(SystemHandler_SysTick, 
     75                                      SYSTICK_PRE_EMPTION_PRIORITY, SYSTICK_SUB_PRIORITY); 
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x2103             MOVS     R1,#+3
   \   0000001A   0x....             LDR.N    R0,??DataTable9  ;; 0x2c39a
   \   0000001C   0x.... 0x....      BL       NVIC_SystemHandlerPriorityConfig
     76            /* Enable SysTick interrupt */
     77            SysTick_ITConfig(ENABLE);
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xE8BD 0x4002      POP      {R1,LR}
   \   00000026   0x.... 0x....      B.W      SysTick_ITConfig
     78          }
     79          
     80          /*******************************************************************************
     81          * Function Name  : TB_Wait
     82          * Description    : The function wait for a delay to be over.   
     83          * Input          : None
     84          * Output         : None
     85          * Return         : None
     86          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     87          void TB_Wait(u16 time)
     88          {
     89          hTimebase_500us = time;    // delay = 'time' value * 0.5ms
   \                     TB_Wait:
   \   00000000   0x....             LDR.N    R1,??DataTable9_1
   \   00000002   0x8088             STRH     R0,[R1, #+4]
     90          while (hTimebase_500us != 0) // wait and do nothing!
   \                     ??TB_Wait_0:
   \   00000004   0x8888             LDRH     R0,[R1, #+4]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD1FC             BNE.N    ??TB_Wait_0
     91          {}  
     92          
     93          }
   \   0000000A   0x4770             BX       LR               ;; return
     94          
     95          /*******************************************************************************
     96          * Function Name  : TB_Set_Delay_500us
     97          * Description    : Set delay utilized by main.c state machine.   
     98          * Input          : Time out value
     99          * Output         : None
    100          * Return         : None
    101          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    102          void TB_Set_Delay_500us(u16 hDelay)
    103          {
    104            hTimebase_500us = hDelay;
   \                     TB_Set_Delay_500us:
   \   00000000   0x....             LDR.N    R1,??DataTable9_1
   \   00000002   0x8088             STRH     R0,[R1, #+4]
    105          }  
   \   00000004   0x4770             BX       LR               ;; return
    106          
    107          /*******************************************************************************
    108          * Function Name  : TB_Delay_IsElapsed
    109          * Description    : Check if the delay set by TB_Set_Delay_500us is elapsed.   
    110          * Input          : None
    111          * Output         : True if delay is elapsed, false otherwise 
    112          * Return         : None
    113          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    114          bool TB_Delay_IsElapsed(void)
    115          {
    116           if (hTimebase_500us == 0)
   \                     TB_Delay_IsElapsed:
   \   00000000   0x....             LDR.N    R0,??DataTable9_1
   \   00000002   0x8881             LDRH     R1,[R0, #+4]
   \   00000004   0x....             B.N      ?Subroutine0
    117           {
    118             return (TRUE);
    119           }
    120           else 
    121           {
    122             return (FALSE);
    123           }
    124          }  

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x1E48             SUBS     R0,R1,#+1
   \   00000002   0x4180             SBCS     R0,R0,R0
   \   00000004   0x0FC0             LSRS     R0,R0,#+31
   \   00000006   0x4770             BX       LR               ;; return
    125          
    126          /*******************************************************************************
    127          * Function Name  : TB_Set_DisplayDelay_500us
    128          * Description    : Set Delay utilized by MC_Display.c module.   
    129          * Input          : Time out value
    130          * Output         : None
    131          * Return         : None
    132          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    133          void TB_Set_DisplayDelay_500us(u16 hDelay)
    134          {
    135            hTimebase_display_500us = hDelay;
   \                     TB_Set_DisplayDelay_500us:
   \   00000000   0x....             LDR.N    R1,??DataTable9_1
   \   00000002   0x80C8             STRH     R0,[R1, #+6]
    136          }  
   \   00000004   0x4770             BX       LR               ;; return
    137          
    138          /*******************************************************************************
    139          * Function Name  : TB_DisplayDelay_IsElapsed
    140          * Description    : Check if the delay set by TB_Set_DisplayDelay_500us is elapsed.   
    141          * Input          : None
    142          * Output         : True if delay is elapsed, false otherwise 
    143          * Return         : None
    144          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    145          bool TB_DisplayDelay_IsElapsed(void)
    146          {
    147           if (hTimebase_display_500us == 0)
   \                     TB_DisplayDelay_IsElapsed:
   \   00000000   0x....             LDR.N    R0,??DataTable9_1
   \   00000002   0x88C1             LDRH     R1,[R0, #+6]
   \   00000004                      REQUIRE ?Subroutine0
   \   00000004                      ;; // Fall through to label ?Subroutine0
    148           {
    149             return (TRUE);
    150           }
    151           else 
    152           {
    153             return (FALSE);
    154           }
    155          } 
    156          
    157          /*******************************************************************************
    158          * Function Name  : TB_Set_DebounceDelay_500us
    159          * Description    : Set Delay utilized by MC_Display.c module.   
    160          * Input          : Time out value
    161          * Output         : None
    162          * Return         : None
    163          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    164          void TB_Set_DebounceDelay_500us(u8 hDelay)
    165          {
    166            hKey_debounce_500us = hDelay;
   \                     TB_Set_DebounceDelay_500us:
   \   00000000   0x....             LDR.N    R1,??DataTable9_1
   \   00000002   0x8108             STRH     R0,[R1, #+8]
    167          }  
   \   00000004   0x4770             BX       LR               ;; return
    168          
    169          /*******************************************************************************
    170          * Function Name  : TB_DebounceDelay_IsElapsed
    171          * Description    : Check if the delay set by TB_Set_DebounceDelay_500us is elapsed.   
    172          * Input          : None
    173          * Output         : True if delay is elapsed, false otherwise 
    174          * Return         : None
    175          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    176          bool TB_DebounceDelay_IsElapsed(void)
    177          {
    178           if (hKey_debounce_500us == 0)
   \                     TB_DebounceDelay_IsElapsed:
   \   00000000   0x....             LDR.N    R0,??DataTable9_1
   \   00000002   0x8901             LDRH     R1,[R0, #+8]
   \   00000004   0x....             B.N      ?Subroutine0
    179           {
    180             return (TRUE);
    181           }
    182           else 
    183           {
    184             return (FALSE);
    185           }
    186          } 
    187          
    188          /*******************************************************************************
    189          * Function Name  : TB_Set_StartUp_Timeout(STARTUP_TIMEOUT)
    190          * Description    : Set Start up time out and initialize Start_up torque in  
    191          *                  torque control.   
    192          * Input          : Time out value
    193          * Output         : None
    194          * Return         : None
    195          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    196          void TB_Set_StartUp_Timeout(u16 hTimeout)
    197          {
    198            hStart_Up_TimeLeft_500us = 2*hTimeout;  
   \                     TB_Set_StartUp_Timeout:
   \   00000000   0x....             LDR.N    R1,??DataTable9_1
   \   00000002   0x0040             LSLS     R0,R0,#+1
   \   00000004   0x8048             STRH     R0,[R1, #+2]
    199          }  
   \   00000006   0x4770             BX       LR               ;; return
    200          
    201          /*******************************************************************************
    202          * Function Name  : TB_StartUp_Timeout_IsElapsed
    203          * Description    : Set Start up time out.   
    204          * Input          : None
    205          * Output         : True if start up time out is elapsed, false otherwise 
    206          * Return         : None
    207          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    208          bool TB_StartUp_Timeout_IsElapsed(void)
    209          {
    210           if (hStart_Up_TimeLeft_500us == 0)
   \                     TB_StartUp_Timeout_IsElapsed:
   \   00000000   0x....             LDR.N    R0,??DataTable9_1
   \   00000002   0x8841             LDRH     R1,[R0, #+2]
   \   00000004   0x....             B.N      ?Subroutine0
    211           {
    212             return (TRUE);
    213           }
    214           else 
    215           {
    216             return (FALSE);
    217           }
    218          } 
    219          
    220          
    221          /*******************************************************************************
    222          * Function Name  : SysTickHandler
    223          * Description    : This function handles SysTick Handler.
    224          * Input          : None
    225          * Output         : None
    226          * Return         : None
    227          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    228          void SysTickHandler(void)
    229          { 
   \                     SysTickHandler:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    230            if (hTimebase_500us != 0)  
   \   00000002   0x....             LDR.N    R4,??DataTable9_1
   \   00000004   0x88A0             LDRH     R0,[R4, #+4]
   \   00000006   0xB110             CBZ.N    R0,??SysTickHandler_0
    231            {
    232              hTimebase_500us --;
   \   00000008   0x88A0             LDRH     R0,[R4, #+4]
   \   0000000A   0x1E40             SUBS     R0,R0,#+1
   \   0000000C   0x80A0             STRH     R0,[R4, #+4]
    233            }
    234            
    235            if (hTimebase_display_500us != 0)  
   \                     ??SysTickHandler_0:
   \   0000000E   0x88E0             LDRH     R0,[R4, #+6]
   \   00000010   0xB110             CBZ.N    R0,??SysTickHandler_1
    236            {
    237              hTimebase_display_500us --;
   \   00000012   0x88E0             LDRH     R0,[R4, #+6]
   \   00000014   0x1E40             SUBS     R0,R0,#+1
   \   00000016   0x80E0             STRH     R0,[R4, #+6]
    238            }
    239            
    240            if (hKey_debounce_500us != 0)  
   \                     ??SysTickHandler_1:
   \   00000018   0x8920             LDRH     R0,[R4, #+8]
   \   0000001A   0xB110             CBZ.N    R0,??SysTickHandler_2
    241            {
    242              hKey_debounce_500us --;
   \   0000001C   0x8920             LDRH     R0,[R4, #+8]
   \   0000001E   0x1E40             SUBS     R0,R0,#+1
   \   00000020   0x8120             STRH     R0,[R4, #+8]
    243            }
    244          
    245            if (hStart_Up_TimeLeft_500us != 0)
   \                     ??SysTickHandler_2:
   \   00000022   0x8860             LDRH     R0,[R4, #+2]
   \   00000024   0xB108             CBZ.N    R0,??SysTickHandler_3
    246            {
    247              hStart_Up_TimeLeft_500us--;
   \   00000026   0x1E40             SUBS     R0,R0,#+1
   \   00000028   0x8060             STRH     R0,[R4, #+2]
    248            }
    249            
    250          #ifdef FLUX_TORQUE_PIDs_TUNING  
    251            if (State == RUN) 
    252            {
    253              if (hTorqueSwapping!=0)
    254              {
    255                hTorqueSwapping--;
    256              }
    257              else
    258              {
    259                hTorqueSwapping = SQUARE_WAVE_PERIOD;
    260                hTorque_Reference = - hTorque_Reference;
    261              }  
    262            }
    263          #endif
    264           
    265            if (hSpeedMeas_Timebase_500us !=0)
   \                     ??SysTickHandler_3:
   \   0000002A   0x8960             LDRH     R0,[R4, #+10]
   \   0000002C   0xB110             CBZ.N    R0,??SysTickHandler_4
    266            {
    267              hSpeedMeas_Timebase_500us--;
   \   0000002E   0x1E40             SUBS     R0,R0,#+1
   \   00000030   0x8160             STRH     R0,[R4, #+10]
   \   00000032   0xE022             B.N      ??SysTickHandler_5
    268            }
    269            else
    270            {
    271              hSpeedMeas_Timebase_500us = SPEED_SAMPLING_TIME;
   \                     ??SysTickHandler_4:
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0x8160             STRH     R0,[R4, #+10]
    272              
    273              #ifdef ENCODER
    274                //ENC_Calc_Average_Speed must be called ONLY every SPEED_MEAS_TIMEBASE ms
    275                ENC_Calc_Average_Speed();
    276                #ifdef OBSERVER_GAIN_TUNING
    277                STO_Calc_Speed();   
    278                STO_Obs_Gains_Update();
    279                #endif
    280              #elif (defined HALL_SENSORS && defined OBSERVER_GAIN_TUNING)
    281                STO_Calc_Speed();      
    282                STO_Obs_Gains_Update();
    283              #elif defined NO_SPEED_SENSORS
    284                STO_Calc_Speed();
   \   00000038   0x.... 0x....      BL       STO_Calc_Speed
    285                #ifdef OBSERVER_GAIN_TUNING 
    286                STO_Obs_Gains_Update();
   \   0000003C   0x.... 0x....      BL       STO_Obs_Gains_Update
    287                #endif
    288                if (State == RUN)
   \   00000040   0x....             LDR.N    R0,??DataTable9_2
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x2803             CMP      R0,#+3
   \   00000046   0xD105             BNE.N    ??SysTickHandler_6
    289                {        
    290                  if(STO_Check_Speed_Reliability()==FALSE)
   \   00000048   0x.... 0x....      BL       STO_Check_Speed_Reliability
   \   0000004C   0xB910             CBNZ.N   R0,??SysTickHandler_6
    291                  {
    292                    MCL_SetFault(SPEED_FEEDBACK);
   \   0000004E   0x2008             MOVS     R0,#+8
   \   00000050   0x.... 0x....      BL       MCL_SetFault
    293                  }    
    294                }
    295                #ifdef VIEW_ENCODER_FEEDBACK
    296                //ENC_Calc_Average_Speed must be called ONLY every SPEED_MEAS_TIMEBASE ms
    297                ENC_Calc_Average_Speed();
   \                     ??SysTickHandler_6:
   \   00000054   0x.... 0x....      BL       ENC_Calc_Average_Speed
    298                #endif
    299              #endif
    300                
    301              #ifdef DAC_FUNCTIONALITY
    302                #if (defined ENCODER || defined VIEW_ENCODER_FEEDBACK)
    303                MCDAC_Update_Value(SENS_SPEED,(s16)(ENC_Get_Mechanical_Speed()*250));
   \   00000058   0x.... 0x....      BL       ENC_Get_Mechanical_Speed
   \   0000005C   0x25FA             MOVS     R5,#+250
   \   0000005E   0xFB05 0xF100      MUL      R1,R5,R0
   \   00000062   0xB209             SXTH     R1,R1
   \   00000064   0x200E             MOVS     R0,#+14
   \   00000066   0x.... 0x....      BL       MCDAC_Update_Value
    304                #elif (defined HALL_SENSORS || defined VIEW_HALL_FEEDBACK)
    305                MCDAC_Update_Value(SENS_SPEED,(s16)(HALL_GetSpeed()*250));
    306                #endif
    307                #if (defined NO_SPEED_SENSORS || defined OBSERVER_GAIN_TUNING)
    308                MCDAC_Update_Value(LO_SPEED,(s16)(STO_Get_Speed()*250));
   \   0000006A   0x.... 0x....      BL       STO_Get_Speed
   \   0000006E   0xFB05 0xF100      MUL      R1,R5,R0
   \   00000072   0xB209             SXTH     R1,R1
   \   00000074   0x2010             MOVS     R0,#+16
   \   00000076   0x.... 0x....      BL       MCDAC_Update_Value
    309                #endif
    310              #endif      
    311            }
    312          
    313            
    314            if (bPID_Speed_Sampling_Time_500us != 0 )  
   \                     ??SysTickHandler_5:
   \   0000007A   0x7820             LDRB     R0,[R4, #+0]
   \   0000007C   0xB118             CBZ.N    R0,??SysTickHandler_7
    315            {
    316              bPID_Speed_Sampling_Time_500us --;
   \   0000007E   0x7820             LDRB     R0,[R4, #+0]
   \   00000080   0x1E40             SUBS     R0,R0,#+1
   \   00000082   0x7020             STRB     R0,[R4, #+0]
   \   00000084   0xBD31             POP      {R0,R4,R5,PC}
    317            }
    318            else
    319            { 
    320              bPID_Speed_Sampling_Time_500us = PID_SPEED_SAMPLING_TIME;        
   \                     ??SysTickHandler_7:
   \   00000086   0x2003             MOVS     R0,#+3
   \   00000088   0x7020             STRB     R0,[R4, #+0]
    321              if ((wGlobal_Flags & SPEED_CONTROL) == SPEED_CONTROL)
   \   0000008A   0x....             LDR.N    R0,??DataTable9_2
   \   0000008C   0x....             LDR.N    R1,??DataTable9_3
   \   0000008E   0x6809             LDR      R1,[R1, #+0]
   \   00000090   0x07C9             LSLS     R1,R1,#+31
   \   00000092   0x7800             LDRB     R0,[R0, #+0]
   \   00000094   0xD505             BPL.N    ??SysTickHandler_8
    322              {
    323                if (State == RUN) 
   \   00000096   0x2803             CMP      R0,#+3
   \   00000098   0xD109             BNE.N    ??SysTickHandler_9
    324                {
    325          #ifdef HALL_SENSORS
    326                  if (HALL_GetSpeed() == HALL_MAX_SPEED)
    327                  {
    328                    MCL_SetFault(SPEED_FEEDBACK);
    329                  }
    330          #endif        
    331                  //PID_Speed_Coefficients_update(XXX_Get_Speed(),PID_Speed_InitStructure);
    332                  FOC_CalcFluxTorqueRef();        
   \   0000009A   0xE8BD 0x4031      POP      {R0,R4,R5,LR}
   \   0000009E   0x.... 0x....      B.W      FOC_CalcFluxTorqueRef
    333                }
    334              }
    335              else
    336              {
    337                if (State == RUN)
   \                     ??SysTickHandler_8:
   \   000000A2   0x2803             CMP      R0,#+3
   \   000000A4   0xBF04             ITT      EQ 
   \   000000A6   0xE8BD 0x4031      POPEQ    {R0,R4,R5,LR}
   \   000000AA   0x.... 0x....      BEQ.W    FOC_TorqueCtrl
    338                {
    339                  FOC_TorqueCtrl();
    340                }
    341              }
    342            }
    343          }
   \                     ??SysTickHandler_9:
   \   000000AE   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x0002C39A         DC32     0x2c39a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     bPID_Speed_Sampling_Time_500us

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x........         DC32     State

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     wGlobal_Flags
    344          
    345          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  SysTickHandler
             16 -> ENC_Calc_Average_Speed
             16 -> ENC_Get_Mechanical_Speed
              0 -> FOC_CalcFluxTorqueRef
             16 -> FOC_TorqueCtrl
             16 -> MCDAC_Update_Value
             16 -> MCL_SetFault
             16 -> STO_Calc_Speed
             16 -> STO_Check_Speed_Reliability
             16 -> STO_Get_Speed
             16 -> STO_Obs_Gains_Update
        0  TB_DebounceDelay_IsElapsed
        0  TB_Delay_IsElapsed
        0  TB_DisplayDelay_IsElapsed
        8  TB_Init
              8 -> NVIC_SystemHandlerPriorityConfig
              8 -> SysTick_CLKSourceConfig
              8 -> SysTick_CounterCmd
              0 -> SysTick_ITConfig
              8 -> SysTick_SetReload
        0  TB_Set_DebounceDelay_500us
        0  TB_Set_Delay_500us
        0  TB_Set_DisplayDelay_500us
        0  TB_Set_StartUp_Timeout
        0  TB_StartUp_Timeout_IsElapsed
        0  TB_Wait


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       8  ?Subroutine0
     176  SysTickHandler
       6  TB_DebounceDelay_IsElapsed
       6  TB_Delay_IsElapsed
       4  TB_DisplayDelay_IsElapsed
      42  TB_Init
       6  TB_Set_DebounceDelay_500us
       6  TB_Set_Delay_500us
       6  TB_Set_DisplayDelay_500us
       8  TB_Set_StartUp_Timeout
       6  TB_StartUp_Timeout_IsElapsed
      12  TB_Wait
      12  bPID_Speed_Sampling_Time_500us
          hStart_Up_TimeLeft_500us
          hTimebase_500us
          hTimebase_display_500us
          hKey_debounce_500us
          hSpeedMeas_Timebase_500us

 
  12 bytes in section .data
 302 bytes in section .text
 
 302 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: 4
